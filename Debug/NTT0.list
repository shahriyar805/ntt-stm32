
NTT0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef5c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  0800f0f0  0800f0f0  000100f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f548  0800f548  00011210  2**0
                  CONTENTS
  4 .ARM          00000008  0800f548  0800f548  00010548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f550  0800f550  00011210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f550  0800f550  00010550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f554  0800f554  00010554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  0800f558  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011210  2**0
                  CONTENTS
 10 .bss          000016c4  20000210  20000210  00011210  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200018d4  200018d4  00011210  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011210  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eb67  00000000  00000000  00011240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000485f  00000000  00000000  0002fda7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ad8  00000000  00000000  00034608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014df  00000000  00000000  000360e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026775  00000000  00000000  000375bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002358a  00000000  00000000  0005dd34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9325  00000000  00000000  000812be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015a5e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000086d8  00000000  00000000  0015a628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00162d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f0d4 	.word	0x0800f0d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800f0d4 	.word	0x0800f0d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f001 f912 	bl	80020c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f814 	bl	8000ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 f99c 	bl	80011e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ea8:	f000 f87a 	bl	8000fa0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000eac:	f000 f8a6 	bl	8000ffc <MX_I2S3_Init>
  MX_SPI1_Init();
 8000eb0:	f000 f8e8 	bl	8001084 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000eb4:	f00a f846 	bl	800af44 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000eb8:	f000 f968 	bl	800118c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000ebc:	f000 f918 	bl	80010f0 <MX_TIM2_Init>
  MX_RNG_Init();
 8000ec0:	f000 f8cc 	bl	800105c <MX_RNG_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000ec4:	f00a f864 	bl	800af90 <MX_USB_HOST_Process>
 8000ec8:	e7fc      	b.n	8000ec4 <main+0x2c>
	...

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b094      	sub	sp, #80	@ 0x50
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 0320 	add.w	r3, r7, #32
 8000ed6:	2230      	movs	r2, #48	@ 0x30
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f00b f977 	bl	800c1ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	4b28      	ldr	r3, [pc, #160]	@ (8000f98 <SystemClock_Config+0xcc>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef8:	4a27      	ldr	r2, [pc, #156]	@ (8000f98 <SystemClock_Config+0xcc>)
 8000efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000efe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f00:	4b25      	ldr	r3, [pc, #148]	@ (8000f98 <SystemClock_Config+0xcc>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	4b22      	ldr	r3, [pc, #136]	@ (8000f9c <SystemClock_Config+0xd0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a21      	ldr	r2, [pc, #132]	@ (8000f9c <SystemClock_Config+0xd0>)
 8000f16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f9c <SystemClock_Config+0xd0>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f30:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f32:	2302      	movs	r3, #2
 8000f34:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f36:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f3c:	2308      	movs	r3, #8
 8000f3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f40:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f44:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f46:	2302      	movs	r3, #2
 8000f48:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4e:	f107 0320 	add.w	r3, r7, #32
 8000f52:	4618      	mov	r0, r3
 8000f54:	f004 fbbc 	bl	80056d0 <HAL_RCC_OscConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f5e:	f000 fd95 	bl	8001a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f62:	230f      	movs	r3, #15
 8000f64:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f66:	2302      	movs	r3, #2
 8000f68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f6e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f7a:	f107 030c 	add.w	r3, r7, #12
 8000f7e:	2105      	movs	r1, #5
 8000f80:	4618      	mov	r0, r3
 8000f82:	f004 fe1d 	bl	8005bc0 <HAL_RCC_ClockConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f8c:	f000 fd7e 	bl	8001a8c <Error_Handler>
  }
}
 8000f90:	bf00      	nop
 8000f92:	3750      	adds	r7, #80	@ 0x50
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40007000 	.word	0x40007000

08000fa0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <MX_I2C1_Init+0x50>)
 8000fa6:	4a13      	ldr	r2, [pc, #76]	@ (8000ff4 <MX_I2C1_Init+0x54>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000faa:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <MX_I2C1_Init+0x50>)
 8000fac:	4a12      	ldr	r2, [pc, #72]	@ (8000ff8 <MX_I2C1_Init+0x58>)
 8000fae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <MX_I2C1_Init+0x50>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <MX_I2C1_Init+0x50>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <MX_I2C1_Init+0x50>)
 8000fbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <MX_I2C1_Init+0x50>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fca:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <MX_I2C1_Init+0x50>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <MX_I2C1_Init+0x50>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <MX_I2C1_Init+0x50>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fdc:	4804      	ldr	r0, [pc, #16]	@ (8000ff0 <MX_I2C1_Init+0x50>)
 8000fde:	f003 fd93 	bl	8004b08 <HAL_I2C_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fe8:	f000 fd50 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2000022c 	.word	0x2000022c
 8000ff4:	40005400 	.word	0x40005400
 8000ff8:	000186a0 	.word	0x000186a0

08000ffc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001000:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <MX_I2S3_Init+0x54>)
 8001002:	4a14      	ldr	r2, [pc, #80]	@ (8001054 <MX_I2S3_Init+0x58>)
 8001004:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001006:	4b12      	ldr	r3, [pc, #72]	@ (8001050 <MX_I2S3_Init+0x54>)
 8001008:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800100c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800100e:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <MX_I2S3_Init+0x54>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001014:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <MX_I2S3_Init+0x54>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800101a:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <MX_I2S3_Init+0x54>)
 800101c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001020:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001022:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <MX_I2S3_Init+0x54>)
 8001024:	4a0c      	ldr	r2, [pc, #48]	@ (8001058 <MX_I2S3_Init+0x5c>)
 8001026:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001028:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <MX_I2S3_Init+0x54>)
 800102a:	2200      	movs	r2, #0
 800102c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800102e:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <MX_I2S3_Init+0x54>)
 8001030:	2200      	movs	r2, #0
 8001032:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <MX_I2S3_Init+0x54>)
 8001036:	2200      	movs	r2, #0
 8001038:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800103a:	4805      	ldr	r0, [pc, #20]	@ (8001050 <MX_I2S3_Init+0x54>)
 800103c:	f003 fea8 	bl	8004d90 <HAL_I2S_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001046:	f000 fd21 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000280 	.word	0x20000280
 8001054:	40003c00 	.word	0x40003c00
 8001058:	00017700 	.word	0x00017700

0800105c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <MX_RNG_Init+0x20>)
 8001062:	4a07      	ldr	r2, [pc, #28]	@ (8001080 <MX_RNG_Init+0x24>)
 8001064:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	@ (800107c <MX_RNG_Init+0x20>)
 8001068:	f005 f90c 	bl	8006284 <HAL_RNG_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001072:	f000 fd0b 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200002c8 	.word	0x200002c8
 8001080:	50060800 	.word	0x50060800

08001084 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001088:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <MX_SPI1_Init+0x64>)
 800108a:	4a18      	ldr	r2, [pc, #96]	@ (80010ec <MX_SPI1_Init+0x68>)
 800108c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800108e:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <MX_SPI1_Init+0x64>)
 8001090:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001094:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001096:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <MX_SPI1_Init+0x64>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <MX_SPI1_Init+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010b6:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010be:	2200      	movs	r2, #0
 80010c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010c8:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010d0:	220a      	movs	r2, #10
 80010d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	@ (80010e8 <MX_SPI1_Init+0x64>)
 80010d6:	f005 f955 	bl	8006384 <HAL_SPI_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010e0:	f000 fcd4 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200002d8 	.word	0x200002d8
 80010ec:	40013000 	.word	0x40013000

080010f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001104:	463b      	mov	r3, r7
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800110c:	4b1d      	ldr	r3, [pc, #116]	@ (8001184 <MX_TIM2_Init+0x94>)
 800110e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001112:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84 - 1;
 8001114:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <MX_TIM2_Init+0x94>)
 8001116:	2253      	movs	r2, #83	@ 0x53
 8001118:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111a:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <MX_TIM2_Init+0x94>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000000 - 1;
 8001120:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <MX_TIM2_Init+0x94>)
 8001122:	4a19      	ldr	r2, [pc, #100]	@ (8001188 <MX_TIM2_Init+0x98>)
 8001124:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001126:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <MX_TIM2_Init+0x94>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112c:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <MX_TIM2_Init+0x94>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001132:	4814      	ldr	r0, [pc, #80]	@ (8001184 <MX_TIM2_Init+0x94>)
 8001134:	f005 f9af 	bl	8006496 <HAL_TIM_Base_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800113e:	f000 fca5 	bl	8001a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001142:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001146:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001148:	f107 0308 	add.w	r3, r7, #8
 800114c:	4619      	mov	r1, r3
 800114e:	480d      	ldr	r0, [pc, #52]	@ (8001184 <MX_TIM2_Init+0x94>)
 8001150:	f005 fa7f 	bl	8006652 <HAL_TIM_ConfigClockSource>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800115a:	f000 fc97 	bl	8001a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001166:	463b      	mov	r3, r7
 8001168:	4619      	mov	r1, r3
 800116a:	4806      	ldr	r0, [pc, #24]	@ (8001184 <MX_TIM2_Init+0x94>)
 800116c:	f005 fc7e 	bl	8006a6c <HAL_TIMEx_MasterConfigSynchronization>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001176:	f000 fc89 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000330 	.word	0x20000330
 8001188:	0098967f 	.word	0x0098967f

0800118c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 8001192:	4a12      	ldr	r2, [pc, #72]	@ (80011dc <MX_USART2_UART_Init+0x50>)
 8001194:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 8001198:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800119c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011b0:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011b2:	220c      	movs	r2, #12
 80011b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b6:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011c2:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <MX_USART2_UART_Init+0x4c>)
 80011c4:	f005 fcce 	bl	8006b64 <HAL_UART_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ce:	f000 fc5d 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000378 	.word	0x20000378
 80011dc:	40004400 	.word	0x40004400

080011e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08c      	sub	sp, #48	@ 0x30
 80011e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
 80011fa:	4b76      	ldr	r3, [pc, #472]	@ (80013d4 <MX_GPIO_Init+0x1f4>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	4a75      	ldr	r2, [pc, #468]	@ (80013d4 <MX_GPIO_Init+0x1f4>)
 8001200:	f043 0310 	orr.w	r3, r3, #16
 8001204:	6313      	str	r3, [r2, #48]	@ 0x30
 8001206:	4b73      	ldr	r3, [pc, #460]	@ (80013d4 <MX_GPIO_Init+0x1f4>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	f003 0310 	and.w	r3, r3, #16
 800120e:	61bb      	str	r3, [r7, #24]
 8001210:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	4b6f      	ldr	r3, [pc, #444]	@ (80013d4 <MX_GPIO_Init+0x1f4>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a6e      	ldr	r2, [pc, #440]	@ (80013d4 <MX_GPIO_Init+0x1f4>)
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b6c      	ldr	r3, [pc, #432]	@ (80013d4 <MX_GPIO_Init+0x1f4>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b68      	ldr	r3, [pc, #416]	@ (80013d4 <MX_GPIO_Init+0x1f4>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	4a67      	ldr	r2, [pc, #412]	@ (80013d4 <MX_GPIO_Init+0x1f4>)
 8001238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800123c:	6313      	str	r3, [r2, #48]	@ 0x30
 800123e:	4b65      	ldr	r3, [pc, #404]	@ (80013d4 <MX_GPIO_Init+0x1f4>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b61      	ldr	r3, [pc, #388]	@ (80013d4 <MX_GPIO_Init+0x1f4>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a60      	ldr	r2, [pc, #384]	@ (80013d4 <MX_GPIO_Init+0x1f4>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b5e      	ldr	r3, [pc, #376]	@ (80013d4 <MX_GPIO_Init+0x1f4>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	4b5a      	ldr	r3, [pc, #360]	@ (80013d4 <MX_GPIO_Init+0x1f4>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a59      	ldr	r2, [pc, #356]	@ (80013d4 <MX_GPIO_Init+0x1f4>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b57      	ldr	r3, [pc, #348]	@ (80013d4 <MX_GPIO_Init+0x1f4>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	4b53      	ldr	r3, [pc, #332]	@ (80013d4 <MX_GPIO_Init+0x1f4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a52      	ldr	r2, [pc, #328]	@ (80013d4 <MX_GPIO_Init+0x1f4>)
 800128c:	f043 0308 	orr.w	r3, r3, #8
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b50      	ldr	r3, [pc, #320]	@ (80013d4 <MX_GPIO_Init+0x1f4>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	2108      	movs	r1, #8
 80012a2:	484d      	ldr	r0, [pc, #308]	@ (80013d8 <MX_GPIO_Init+0x1f8>)
 80012a4:	f001 fae4 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2101      	movs	r1, #1
 80012ac:	484b      	ldr	r0, [pc, #300]	@ (80013dc <MX_GPIO_Init+0x1fc>)
 80012ae:	f001 fadf 	bl	8002870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80012b2:	2200      	movs	r2, #0
 80012b4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80012b8:	4849      	ldr	r0, [pc, #292]	@ (80013e0 <MX_GPIO_Init+0x200>)
 80012ba:	f001 fad9 	bl	8002870 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80012be:	2308      	movs	r3, #8
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4840      	ldr	r0, [pc, #256]	@ (80013d8 <MX_GPIO_Init+0x1f8>)
 80012d6:	f001 f92f 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80012da:	2301      	movs	r3, #1
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	483a      	ldr	r0, [pc, #232]	@ (80013dc <MX_GPIO_Init+0x1fc>)
 80012f2:	f001 f921 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80012f6:	2308      	movs	r3, #8
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001306:	2305      	movs	r3, #5
 8001308:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	4619      	mov	r1, r3
 8001310:	4832      	ldr	r0, [pc, #200]	@ (80013dc <MX_GPIO_Init+0x1fc>)
 8001312:	f001 f911 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001316:	2301      	movs	r3, #1
 8001318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800131a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800131e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001320:	2302      	movs	r3, #2
 8001322:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4619      	mov	r1, r3
 800132a:	482e      	ldr	r0, [pc, #184]	@ (80013e4 <MX_GPIO_Init+0x204>)
 800132c:	f001 f904 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001330:	2304      	movs	r3, #4
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001334:	2300      	movs	r3, #0
 8001336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	4829      	ldr	r0, [pc, #164]	@ (80013e8 <MX_GPIO_Init+0x208>)
 8001344:	f001 f8f8 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001348:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800134c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800135a:	2305      	movs	r3, #5
 800135c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	4820      	ldr	r0, [pc, #128]	@ (80013e8 <MX_GPIO_Init+0x208>)
 8001366:	f001 f8e7 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800136a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800136e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	4817      	ldr	r0, [pc, #92]	@ (80013e0 <MX_GPIO_Init+0x200>)
 8001384:	f001 f8d8 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001388:	2320      	movs	r3, #32
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	4811      	ldr	r0, [pc, #68]	@ (80013e0 <MX_GPIO_Init+0x200>)
 800139c:	f001 f8cc 	bl	8002538 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80013a0:	2302      	movs	r3, #2
 80013a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013a4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80013a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	4808      	ldr	r0, [pc, #32]	@ (80013d8 <MX_GPIO_Init+0x1f8>)
 80013b6:	f001 f8bf 	bl	8002538 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	2006      	movs	r0, #6
 80013c0:	f000 fff1 	bl	80023a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013c4:	2006      	movs	r0, #6
 80013c6:	f001 f80a 	bl	80023de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013ca:	bf00      	nop
 80013cc:	3730      	adds	r7, #48	@ 0x30
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40020800 	.word	0x40020800
 80013e0:	40020c00 	.word	0x40020c00
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400

080013ec <printArray>:

/* USER CODE BEGIN 4 */

void printArray(int arr[], char arrName[], int arrSize) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	f6ad 0d48 	subw	sp, sp, #2120	@ 0x848
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 80013f8:	f6a3 033c 	subw	r3, r3, #2108	@ 0x83c
 80013fc:	6018      	str	r0, [r3, #0]
 80013fe:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001402:	f5a3 6304 	sub.w	r3, r3, #2112	@ 0x840
 8001406:	6019      	str	r1, [r3, #0]
 8001408:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 800140c:	f6a3 0344 	subw	r3, r3, #2116	@ 0x844
 8001410:	601a      	str	r2, [r3, #0]
	char stringToPrint[2000], temp[100];
    sprintf(stringToPrint, "%s = {", arrName);
 8001412:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001416:	f5a3 6304 	sub.w	r3, r3, #2112	@ 0x840
 800141a:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4932      	ldr	r1, [pc, #200]	@ (80014ec <printArray+0x100>)
 8001422:	f00a fe71 	bl	800c108 <siprintf>
    int i;

    for (i = 0; i < (arrSize - 1); i++) {
 8001426:	2300      	movs	r3, #0
 8001428:	f8c7 3844 	str.w	r3, [r7, #2116]	@ 0x844
 800142c:	e01c      	b.n	8001468 <printArray+0x7c>
        sprintf(temp, "%d, ", arr[i]);
 800142e:	f8d7 3844 	ldr.w	r3, [r7, #2116]	@ 0x844
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	f607 0248 	addw	r2, r7, #2120	@ 0x848
 8001438:	f6a2 023c 	subw	r2, r2, #2108	@ 0x83c
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	4413      	add	r3, r2
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	492a      	ldr	r1, [pc, #168]	@ (80014f0 <printArray+0x104>)
 8001448:	4618      	mov	r0, r3
 800144a:	f00a fe5d 	bl	800c108 <siprintf>
        strcat(stringToPrint, temp);
 800144e:	f107 0210 	add.w	r2, r7, #16
 8001452:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f00a fec0 	bl	800c1de <strcat>
    for (i = 0; i < (arrSize - 1); i++) {
 800145e:	f8d7 3844 	ldr.w	r3, [r7, #2116]	@ 0x844
 8001462:	3301      	adds	r3, #1
 8001464:	f8c7 3844 	str.w	r3, [r7, #2116]	@ 0x844
 8001468:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 800146c:	f6a3 0344 	subw	r3, r3, #2116	@ 0x844
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	3b01      	subs	r3, #1
 8001474:	f8d7 2844 	ldr.w	r2, [r7, #2116]	@ 0x844
 8001478:	429a      	cmp	r2, r3
 800147a:	dbd8      	blt.n	800142e <printArray+0x42>
    }

    if (arrSize != 0) {
 800147c:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 8001480:	f6a3 0344 	subw	r3, r3, #2116	@ 0x844
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d02a      	beq.n	80014e0 <printArray+0xf4>
        sprintf(temp, "%d}\n\n", arr[arrSize - 1]);
 800148a:	f607 0348 	addw	r3, r7, #2120	@ 0x848
 800148e:	f6a3 0344 	subw	r3, r3, #2116	@ 0x844
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001498:	3b01      	subs	r3, #1
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	f607 0248 	addw	r2, r7, #2120	@ 0x848
 80014a0:	f6a2 023c 	subw	r2, r2, #2108	@ 0x83c
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	4911      	ldr	r1, [pc, #68]	@ (80014f4 <printArray+0x108>)
 80014b0:	4618      	mov	r0, r3
 80014b2:	f00a fe29 	bl	800c108 <siprintf>
        strcat(stringToPrint, temp);
 80014b6:	f107 0210 	add.w	r2, r7, #16
 80014ba:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00a fe8c 	bl	800c1de <strcat>
        HAL_UART_Transmit(&huart2, (const uint8_t*)stringToPrint, strlen(stringToPrint), 200);
 80014c6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7fe fed0 	bl	8000270 <strlen>
 80014d0:	4603      	mov	r3, r0
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80014d8:	23c8      	movs	r3, #200	@ 0xc8
 80014da:	4807      	ldr	r0, [pc, #28]	@ (80014f8 <printArray+0x10c>)
 80014dc:	f005 fb92 	bl	8006c04 <HAL_UART_Transmit>
    }
}
 80014e0:	bf00      	nop
 80014e2:	f607 0748 	addw	r7, r7, #2120	@ 0x848
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	0800f0f0 	.word	0x0800f0f0
 80014f0:	0800f0f8 	.word	0x0800f0f8
 80014f4:	0800f100 	.word	0x0800f100
 80014f8:	20000378 	.word	0x20000378

080014fc <arrCopy>:

void arrCopy(const int from[], int to[], int arrSize) {
 80014fc:	b480      	push	{r7}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
    int i;

    for (i = 0; i < arrSize; i++)
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	e00c      	b.n	8001528 <arrCopy+0x2c>
        to[i] = from[i];
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	441a      	add	r2, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	68b9      	ldr	r1, [r7, #8]
 800151c:	440b      	add	r3, r1
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	601a      	str	r2, [r3, #0]
    for (i = 0; i < arrSize; i++)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3301      	adds	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	dbee      	blt.n	800150e <arrCopy+0x12>
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	371c      	adds	r7, #28
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <bit_reverse_7>:

int bit_reverse_7(int num) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
//        printf("The value should be a number from 0 to 127.\nProvided value: %d", num);
//        exit(1);
//    }

    char binary[8];
    int bit_presenter = 64, i, result = 0;
 8001548:	2340      	movs	r3, #64	@ 0x40
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]

    for (i = 0; i < 7; i++) {
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	e01a      	b.n	800158c <bit_reverse_7+0x4c>
        if (num >= bit_presenter) {
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	429a      	cmp	r2, r3
 800155c:	db0a      	blt.n	8001574 <bit_reverse_7+0x34>
            binary[i] = '1';
 800155e:	f107 020c 	add.w	r2, r7, #12
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	4413      	add	r3, r2
 8001566:	2231      	movs	r2, #49	@ 0x31
 8001568:	701a      	strb	r2, [r3, #0]
            num -= bit_presenter;
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	e005      	b.n	8001580 <bit_reverse_7+0x40>
        } else
            binary[i] = '0';
 8001574:	f107 020c 	add.w	r2, r7, #12
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	4413      	add	r3, r2
 800157c:	2230      	movs	r2, #48	@ 0x30
 800157e:	701a      	strb	r2, [r3, #0]

        bit_presenter >>= 1;
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	105b      	asrs	r3, r3, #1
 8001584:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < 7; i++) {
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	3301      	adds	r3, #1
 800158a:	61bb      	str	r3, [r7, #24]
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	2b06      	cmp	r3, #6
 8001590:	dde1      	ble.n	8001556 <bit_reverse_7+0x16>
    }
    binary[7] = '\0';
 8001592:	2300      	movs	r3, #0
 8001594:	74fb      	strb	r3, [r7, #19]

    for (i = 0; i < 7; i++)
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	e01e      	b.n	80015da <bit_reverse_7+0x9a>
        if (binary[i] == '1')
 800159c:	f107 020c 	add.w	r2, r7, #12
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	4413      	add	r3, r2
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b31      	cmp	r3, #49	@ 0x31
 80015a8:	d114      	bne.n	80015d4 <bit_reverse_7+0x94>
            result += (int)pow(2, i);
 80015aa:	69b8      	ldr	r0, [r7, #24]
 80015ac:	f7fe ffba 	bl	8000524 <__aeabi_i2d>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	ec43 2b11 	vmov	d1, r2, r3
 80015b8:	ed9f 0b0d 	vldr	d0, [pc, #52]	@ 80015f0 <bit_reverse_7+0xb0>
 80015bc:	f00c fe2a 	bl	800e214 <pow>
 80015c0:	ec53 2b10 	vmov	r2, r3, d0
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	f7ff fac6 	bl	8000b58 <__aeabi_d2iz>
 80015cc:	4602      	mov	r2, r0
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	4413      	add	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]
    for (i = 0; i < 7; i++)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	3301      	adds	r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2b06      	cmp	r3, #6
 80015de:	dddd      	ble.n	800159c <bit_reverse_7+0x5c>

    return result;
 80015e0:	697b      	ldr	r3, [r7, #20]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3720      	adds	r7, #32
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	f3af 8000 	nop.w
 80015f0:	00000000 	.word	0x00000000
 80015f4:	40000000 	.word	0x40000000

080015f8 <positive_modulo>:

int positive_modulo(int num, int modulus) {
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
    int result = num % modulus;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	fb93 f2f2 	sdiv	r2, r3, r2
 800160a:	6839      	ldr	r1, [r7, #0]
 800160c:	fb01 f202 	mul.w	r2, r1, r2
 8001610:	1a9b      	subs	r3, r3, r2
 8001612:	60fb      	str	r3, [r7, #12]

    if (result < 0)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	da03      	bge.n	8001622 <positive_modulo+0x2a>
        result += modulus;
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	4413      	add	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]

    return result;
 8001622:	68fb      	ldr	r3, [r7, #12]

//    int m = num % modulus;
//    return m + ((m >> 31) & modulus);

//    return num % modulus;
}
 8001624:	4618      	mov	r0, r3
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <modular_power>:

int modular_power(int x, int y, int modulus) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
    int result = 1;
 800163c:	2301      	movs	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
    x = positive_modulo(x, modulus);
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f7ff ffd8 	bl	80015f8 <positive_modulo>
 8001648:	60f8      	str	r0, [r7, #12]

    if (x == 0)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d11a      	bne.n	8001686 <modular_power+0x56>
        return 0;
 8001650:	2300      	movs	r3, #0
 8001652:	e01c      	b.n	800168e <modular_power+0x5e>

    while (y > 0) {
        if (y & 1)                  // If y is odd
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d008      	beq.n	8001670 <modular_power+0x40>
            result = positive_modulo((result * x), modulus);
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	fb02 f303 	mul.w	r3, r2, r3
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ffc5 	bl	80015f8 <positive_modulo>
 800166e:	6178      	str	r0, [r7, #20]

        // y should be even now
        y >>= 1;                    // y /= 2
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	105b      	asrs	r3, r3, #1
 8001674:	60bb      	str	r3, [r7, #8]
        x = positive_modulo((x * x), modulus);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	fb03 f303 	mul.w	r3, r3, r3
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ffba 	bl	80015f8 <positive_modulo>
 8001684:	60f8      	str	r0, [r7, #12]
    while (y > 0) {
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	2b00      	cmp	r3, #0
 800168a:	dce3      	bgt.n	8001654 <modular_power+0x24>
    }

    return result;
 800168c:	697b      	ldr	r3, [r7, #20]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <ntt>:

void ntt(int arr[], int result[]) {
 8001696:	b590      	push	{r4, r7, lr}
 8001698:	b089      	sub	sp, #36	@ 0x24
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
    int len, start, i = 1;
 80016a0:	2301      	movs	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
    arrCopy(arr, result, 256);
 80016a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016a8:	6839      	ldr	r1, [r7, #0]
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ff26 	bl	80014fc <arrCopy>

    for (len = 128; len >= 2; len >>= 1) {
 80016b0:	2380      	movs	r3, #128	@ 0x80
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	e05b      	b.n	800176e <ntt+0xd8>
        for (start = 0; start < 256; start += (len << 1)) {
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
 80016ba:	e052      	b.n	8001762 <ntt+0xcc>
            int j, zeta = modular_power(17, bit_reverse_7(i), 3329);
 80016bc:	6978      	ldr	r0, [r7, #20]
 80016be:	f7ff ff3f 	bl	8001540 <bit_reverse_7>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f640 5201 	movw	r2, #3329	@ 0xd01
 80016c8:	4619      	mov	r1, r3
 80016ca:	2011      	movs	r0, #17
 80016cc:	f7ff ffb0 	bl	8001630 <modular_power>
 80016d0:	60f8      	str	r0, [r7, #12]
            i++;
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3301      	adds	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]

            for (j = start; j < (start + len); j++) {
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	e036      	b.n	800174c <ntt+0xb6>
                int t = positive_modulo((zeta * result[j + len]), 3329);
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	4413      	add	r3, r2
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	fb02 f303 	mul.w	r3, r2, r3
 80016f2:	f640 5101 	movw	r1, #3329	@ 0xd01
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff7e 	bl	80015f8 <positive_modulo>
 80016fc:	60b8      	str	r0, [r7, #8]
                result[j + len] = positive_modulo(result[j] - t, 3329);
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	4413      	add	r3, r2
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	1ad0      	subs	r0, r2, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	4413      	add	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	18d4      	adds	r4, r2, r3
 8001718:	f640 5101 	movw	r1, #3329	@ 0xd01
 800171c:	f7ff ff6c 	bl	80015f8 <positive_modulo>
 8001720:	4603      	mov	r3, r0
 8001722:	6023      	str	r3, [r4, #0]
                result[j] = positive_modulo((result[j] + t), 3329);
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	4413      	add	r3, r2
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	18d0      	adds	r0, r2, r3
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	18d4      	adds	r4, r2, r3
 800173a:	f640 5101 	movw	r1, #3329	@ 0xd01
 800173e:	f7ff ff5b 	bl	80015f8 <positive_modulo>
 8001742:	4603      	mov	r3, r0
 8001744:	6023      	str	r3, [r4, #0]
            for (j = start; j < (start + len); j++) {
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	3301      	adds	r3, #1
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	4413      	add	r3, r2
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	429a      	cmp	r2, r3
 8001756:	dbc2      	blt.n	80016de <ntt+0x48>
        for (start = 0; start < 256; start += (len << 1)) {
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4413      	add	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	2bff      	cmp	r3, #255	@ 0xff
 8001766:	dda9      	ble.n	80016bc <ntt+0x26>
    for (len = 128; len >= 2; len >>= 1) {
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	105b      	asrs	r3, r3, #1
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	2b01      	cmp	r3, #1
 8001772:	dca0      	bgt.n	80016b6 <ntt+0x20>
            }
        }
    }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3724      	adds	r7, #36	@ 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd90      	pop	{r4, r7, pc}

0800177e <intt>:

void intt(int arr[], int result[]) {
 800177e:	b590      	push	{r4, r7, lr}
 8001780:	b089      	sub	sp, #36	@ 0x24
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	6039      	str	r1, [r7, #0]
    int len, start, i = 127;
 8001788:	237f      	movs	r3, #127	@ 0x7f
 800178a:	617b      	str	r3, [r7, #20]
    arrCopy(arr, result, 256);
 800178c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001790:	6839      	ldr	r1, [r7, #0]
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff feb2 	bl	80014fc <arrCopy>

    for (len = 2; len <= 128; len <<= 1) {
 8001798:	2302      	movs	r3, #2
 800179a:	61fb      	str	r3, [r7, #28]
 800179c:	e058      	b.n	8001850 <intt+0xd2>
        for (start = 0; start < 256; start += len << 1) {
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
 80017a2:	e04f      	b.n	8001844 <intt+0xc6>
            int j, zeta = modular_power(17, bit_reverse_7(i), 3329);
 80017a4:	6978      	ldr	r0, [r7, #20]
 80017a6:	f7ff fecb 	bl	8001540 <bit_reverse_7>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f640 5201 	movw	r2, #3329	@ 0xd01
 80017b0:	4619      	mov	r1, r3
 80017b2:	2011      	movs	r0, #17
 80017b4:	f7ff ff3c 	bl	8001630 <modular_power>
 80017b8:	60f8      	str	r0, [r7, #12]
            i--;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3b01      	subs	r3, #1
 80017be:	617b      	str	r3, [r7, #20]

            for (j = start; j < (start + len); j++) {
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	e033      	b.n	800182e <intt+0xb0>
                int t = result[j];
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	4413      	add	r3, r2
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	60bb      	str	r3, [r7, #8]
                result[j] = positive_modulo((t + result[j + len]), 3329);
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	4413      	add	r3, r2
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	18d0      	adds	r0, r2, r3
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	18d4      	adds	r4, r2, r3
 80017ec:	f640 5101 	movw	r1, #3329	@ 0xd01
 80017f0:	f7ff ff02 	bl	80015f8 <positive_modulo>
 80017f4:	4603      	mov	r3, r0
 80017f6:	6023      	str	r3, [r4, #0]
                result[j + len] = positive_modulo((zeta * (result[j + len] - t)), 3329);
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	4413      	add	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	4413      	add	r3, r2
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	fb02 f003 	mul.w	r0, r2, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	18d4      	adds	r4, r2, r3
 800181c:	f640 5101 	movw	r1, #3329	@ 0xd01
 8001820:	f7ff feea 	bl	80015f8 <positive_modulo>
 8001824:	4603      	mov	r3, r0
 8001826:	6023      	str	r3, [r4, #0]
            for (j = start; j < (start + len); j++) {
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	3301      	adds	r3, #1
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	4413      	add	r3, r2
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	429a      	cmp	r2, r3
 8001838:	dbc5      	blt.n	80017c6 <intt+0x48>
        for (start = 0; start < 256; start += len << 1) {
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4413      	add	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	2bff      	cmp	r3, #255	@ 0xff
 8001848:	ddac      	ble.n	80017a4 <intt+0x26>
    for (len = 2; len <= 128; len <<= 1) {
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	61fb      	str	r3, [r7, #28]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	2b80      	cmp	r3, #128	@ 0x80
 8001854:	dda3      	ble.n	800179e <intt+0x20>
            }
        }
    }

    for (i = 0; i < 256; i++)
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	e015      	b.n	8001888 <intt+0x10a>
        result[i] = positive_modulo((result[i] * 3303), 3329);
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	4413      	add	r3, r2
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f640 42e7 	movw	r2, #3303	@ 0xce7
 800186a:	fb02 f003 	mul.w	r0, r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	18d4      	adds	r4, r2, r3
 8001876:	f640 5101 	movw	r1, #3329	@ 0xd01
 800187a:	f7ff febd 	bl	80015f8 <positive_modulo>
 800187e:	4603      	mov	r3, r0
 8001880:	6023      	str	r3, [r4, #0]
    for (i = 0; i < 256; i++)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	2bff      	cmp	r3, #255	@ 0xff
 800188c:	dde6      	ble.n	800185c <intt+0xde>
}
 800188e:	bf00      	nop
 8001890:	bf00      	nop
 8001892:	3724      	adds	r7, #36	@ 0x24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd90      	pop	{r4, r7, pc}

08001898 <generate_random_array>:
//		arrNum = 1;
//		break;
//	}
//}

void generate_random_array(int arr[], int size, uint32_t min, uint32_t max) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
 80018a4:	603b      	str	r3, [r7, #0]
	int i;
	uint32_t randNum;

	for (i = 0; i < size; i++) {
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	e01c      	b.n	80018e6 <generate_random_array+0x4e>
		HAL_RNG_GenerateRandomNumber(&hrng, &randNum);
 80018ac:	f107 0310 	add.w	r3, r7, #16
 80018b0:	4619      	mov	r1, r3
 80018b2:	4811      	ldr	r0, [pc, #68]	@ (80018f8 <generate_random_array+0x60>)
 80018b4:	f004 fd10 	bl	80062d8 <HAL_RNG_GenerateRandomNumber>
		randNum = (randNum % (max - min + 1)) + min;
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	6839      	ldr	r1, [r7, #0]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	1a8a      	subs	r2, r1, r2
 80018c0:	3201      	adds	r2, #1
 80018c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80018c6:	fb01 f202 	mul.w	r2, r1, r2
 80018ca:	1a9a      	subs	r2, r3, r2
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4413      	add	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
		arr[i] = (int)randNum;
 80018d2:	6939      	ldr	r1, [r7, #16]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	460a      	mov	r2, r1
 80018de:	601a      	str	r2, [r3, #0]
	for (i = 0; i < size; i++) {
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	3301      	adds	r3, #1
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	dbde      	blt.n	80018ac <generate_random_array+0x14>
	}
}
 80018ee:	bf00      	nop
 80018f0:	bf00      	nop
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200002c8 	.word	0x200002c8

080018fc <random_array_ntt_intt>:

void random_array_ntt_intt() {
 80018fc:	b5b0      	push	{r4, r5, r7, lr}
 80018fe:	b0a6      	sub	sp, #152	@ 0x98
 8001900:	af02      	add	r7, sp, #8
	generate_random_array(randArr, 256, 0, 3328);
 8001902:	f44f 6350 	mov.w	r3, #3328	@ 0xd00
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800190c:	4845      	ldr	r0, [pc, #276]	@ (8001a24 <random_array_ntt_intt+0x128>)
 800190e:	f7ff ffc3 	bl	8001898 <generate_random_array>

	HAL_TIM_Base_Start(&htim2);
 8001912:	4845      	ldr	r0, [pc, #276]	@ (8001a28 <random_array_ntt_intt+0x12c>)
 8001914:	f004 fe0e 	bl	8006534 <HAL_TIM_Base_Start>
	int ntt_timeLapse = __HAL_TIM_GET_COUNTER(&htim2);
 8001918:	4b43      	ldr	r3, [pc, #268]	@ (8001a28 <random_array_ntt_intt+0x12c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	ntt (randArr, r1);
 8001922:	4942      	ldr	r1, [pc, #264]	@ (8001a2c <random_array_ntt_intt+0x130>)
 8001924:	483f      	ldr	r0, [pc, #252]	@ (8001a24 <random_array_ntt_intt+0x128>)
 8001926:	f7ff feb6 	bl	8001696 <ntt>
	ntt_timeLapse = __HAL_TIM_GET_COUNTER(&htim2) - ntt_timeLapse;
 800192a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a28 <random_array_ntt_intt+0x12c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001930:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	int intt_timeLapse = __HAL_TIM_GET_COUNTER(&htim2);
 800193a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a28 <random_array_ntt_intt+0x12c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001940:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	intt(r1, r2);
 8001944:	493a      	ldr	r1, [pc, #232]	@ (8001a30 <random_array_ntt_intt+0x134>)
 8001946:	4839      	ldr	r0, [pc, #228]	@ (8001a2c <random_array_ntt_intt+0x130>)
 8001948:	f7ff ff19 	bl	800177e <intt>
	intt_timeLapse = __HAL_TIM_GET_COUNTER(&htim2) - intt_timeLapse;
 800194c:	4b36      	ldr	r3, [pc, #216]	@ (8001a28 <random_array_ntt_intt+0x12c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001952:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	HAL_TIM_Base_Stop(&htim2);
 800195c:	4832      	ldr	r0, [pc, #200]	@ (8001a28 <random_array_ntt_intt+0x12c>)
 800195e:	f004 fe51 	bl	8006604 <HAL_TIM_Base_Stop>

	char arr1Name[] = "randArr", ntt1Name[] = "NTT of randArr", intt1Name[] = "INTT of r1", str[100];
 8001962:	4a34      	ldr	r2, [pc, #208]	@ (8001a34 <random_array_ntt_intt+0x138>)
 8001964:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001968:	e892 0003 	ldmia.w	r2, {r0, r1}
 800196c:	e883 0003 	stmia.w	r3, {r0, r1}
 8001970:	4b31      	ldr	r3, [pc, #196]	@ (8001a38 <random_array_ntt_intt+0x13c>)
 8001972:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8001976:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001978:	c407      	stmia	r4!, {r0, r1, r2}
 800197a:	8023      	strh	r3, [r4, #0]
 800197c:	3402      	adds	r4, #2
 800197e:	0c1b      	lsrs	r3, r3, #16
 8001980:	7023      	strb	r3, [r4, #0]
 8001982:	4a2e      	ldr	r2, [pc, #184]	@ (8001a3c <random_array_ntt_intt+0x140>)
 8001984:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001988:	ca07      	ldmia	r2, {r0, r1, r2}
 800198a:	c303      	stmia	r3!, {r0, r1}
 800198c:	801a      	strh	r2, [r3, #0]
 800198e:	3302      	adds	r3, #2
 8001990:	0c12      	lsrs	r2, r2, #16
 8001992:	701a      	strb	r2, [r3, #0]
	printArray(randArr, arr1Name, 256);
 8001994:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001998:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800199c:	4619      	mov	r1, r3
 800199e:	4821      	ldr	r0, [pc, #132]	@ (8001a24 <random_array_ntt_intt+0x128>)
 80019a0:	f7ff fd24 	bl	80013ec <printArray>
	printArray(r1, ntt1Name, 256);
 80019a4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80019a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019ac:	4619      	mov	r1, r3
 80019ae:	481f      	ldr	r0, [pc, #124]	@ (8001a2c <random_array_ntt_intt+0x130>)
 80019b0:	f7ff fd1c 	bl	80013ec <printArray>
	printArray(r2, intt1Name, 256);
 80019b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019bc:	4619      	mov	r1, r3
 80019be:	481c      	ldr	r0, [pc, #112]	@ (8001a30 <random_array_ntt_intt+0x134>)
 80019c0:	f7ff fd14 	bl	80013ec <printArray>

	sprintf(str, "It took %.3f milliseconds to do NTT and %.3f milliseconds to do INTT operations on randArr.\n\n", ((double)ntt_timeLapse / double_precision), ((double)intt_timeLapse / double_precision));
 80019c4:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80019c8:	f7fe fdac 	bl	8000524 <__aeabi_i2d>
 80019cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a40 <random_array_ntt_intt+0x144>)
 80019ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d2:	f7fe ff3b 	bl	800084c <__aeabi_ddiv>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4614      	mov	r4, r2
 80019dc:	461d      	mov	r5, r3
 80019de:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80019e2:	f7fe fd9f 	bl	8000524 <__aeabi_i2d>
 80019e6:	4b16      	ldr	r3, [pc, #88]	@ (8001a40 <random_array_ntt_intt+0x144>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe ff2e 	bl	800084c <__aeabi_ddiv>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4638      	mov	r0, r7
 80019f6:	e9cd 2300 	strd	r2, r3, [sp]
 80019fa:	4622      	mov	r2, r4
 80019fc:	462b      	mov	r3, r5
 80019fe:	4911      	ldr	r1, [pc, #68]	@ (8001a44 <random_array_ntt_intt+0x148>)
 8001a00:	f00a fb82 	bl	800c108 <siprintf>
	HAL_UART_Transmit(&huart2, (const uint8_t*)str, strlen(str), 200);
 8001a04:	463b      	mov	r3, r7
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fc32 	bl	8000270 <strlen>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	4639      	mov	r1, r7
 8001a12:	23c8      	movs	r3, #200	@ 0xc8
 8001a14:	480c      	ldr	r0, [pc, #48]	@ (8001a48 <random_array_ntt_intt+0x14c>)
 8001a16:	f005 f8f5 	bl	8006c04 <HAL_UART_Transmit>
}
 8001a1a:	bf00      	nop
 8001a1c:	3790      	adds	r7, #144	@ 0x90
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bdb0      	pop	{r4, r5, r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200003c0 	.word	0x200003c0
 8001a28:	20000330 	.word	0x20000330
 8001a2c:	200007c0 	.word	0x200007c0
 8001a30:	20000bc0 	.word	0x20000bc0
 8001a34:	0800f168 	.word	0x0800f168
 8001a38:	0800f170 	.word	0x0800f170
 8001a3c:	0800f180 	.word	0x0800f180
 8001a40:	20000000 	.word	0x20000000
 8001a44:	0800f108 	.word	0x0800f108
 8001a48:	20000378 	.word	0x20000378

08001a4c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0) {
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d112      	bne.n	8001a82 <HAL_GPIO_EXTI_Callback+0x36>
		if (last_gpio_exti + 200 > HAL_GetTick())
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a88 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	33c8      	adds	r3, #200	@ 0xc8
 8001a62:	461c      	mov	r4, r3
 8001a64:	f000 fb94 	bl	8002190 <HAL_GetTick>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	429c      	cmp	r4, r3
 8001a6c:	d808      	bhi.n	8001a80 <HAL_GPIO_EXTI_Callback+0x34>
			return;
		last_gpio_exti = HAL_GetTick();
 8001a6e:	f000 fb8f 	bl	8002190 <HAL_GetTick>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b04      	ldr	r3, [pc, #16]	@ (8001a88 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001a78:	601a      	str	r2, [r3, #0]

//		timing_and_iteration_of_arr1_and_arr2();

		random_array_ntt_intt();
 8001a7a:	f7ff ff3f 	bl	80018fc <random_array_ntt_intt>
 8001a7e:	e000      	b.n	8001a82 <HAL_GPIO_EXTI_Callback+0x36>
			return;
 8001a80:	bf00      	nop
	}
}
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd90      	pop	{r4, r7, pc}
 8001a88:	20000fc0 	.word	0x20000fc0

08001a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a90:	b672      	cpsid	i
}
 8001a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <Error_Handler+0x8>

08001a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	4b10      	ldr	r3, [pc, #64]	@ (8001ae4 <HAL_MspInit+0x4c>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae4 <HAL_MspInit+0x4c>)
 8001aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae4 <HAL_MspInit+0x4c>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <HAL_MspInit+0x4c>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac2:	4a08      	ldr	r2, [pc, #32]	@ (8001ae4 <HAL_MspInit+0x4c>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <HAL_MspInit+0x4c>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ad6:	2007      	movs	r0, #7
 8001ad8:	f000 fc5a 	bl	8002390 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40023800 	.word	0x40023800

08001ae8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	@ 0x28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a19      	ldr	r2, [pc, #100]	@ (8001b6c <HAL_I2C_MspInit+0x84>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d12c      	bne.n	8001b64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <HAL_I2C_MspInit+0x88>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	4a17      	ldr	r2, [pc, #92]	@ (8001b70 <HAL_I2C_MspInit+0x88>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1a:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <HAL_I2C_MspInit+0x88>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001b26:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b2c:	2312      	movs	r3, #18
 8001b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b38:	2304      	movs	r3, #4
 8001b3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	4619      	mov	r1, r3
 8001b42:	480c      	ldr	r0, [pc, #48]	@ (8001b74 <HAL_I2C_MspInit+0x8c>)
 8001b44:	f000 fcf8 	bl	8002538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	4b08      	ldr	r3, [pc, #32]	@ (8001b70 <HAL_I2C_MspInit+0x88>)
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b50:	4a07      	ldr	r2, [pc, #28]	@ (8001b70 <HAL_I2C_MspInit+0x88>)
 8001b52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b56:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b58:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <HAL_I2C_MspInit+0x88>)
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b64:	bf00      	nop
 8001b66:	3728      	adds	r7, #40	@ 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40005400 	.word	0x40005400
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020400 	.word	0x40020400

08001b78 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08e      	sub	sp, #56	@ 0x38
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a31      	ldr	r2, [pc, #196]	@ (8001c68 <HAL_I2S_MspInit+0xf0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d15a      	bne.n	8001c5e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001bac:	23c0      	movs	r3, #192	@ 0xc0
 8001bae:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f004 fa21 	bl	8006000 <HAL_RCCEx_PeriphCLKConfig>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001bc4:	f7ff ff62 	bl	8001a8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bc8:	2300      	movs	r3, #0
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	4b27      	ldr	r3, [pc, #156]	@ (8001c6c <HAL_I2S_MspInit+0xf4>)
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	4a26      	ldr	r2, [pc, #152]	@ (8001c6c <HAL_I2S_MspInit+0xf4>)
 8001bd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd8:	4b24      	ldr	r3, [pc, #144]	@ (8001c6c <HAL_I2S_MspInit+0xf4>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	4b20      	ldr	r3, [pc, #128]	@ (8001c6c <HAL_I2S_MspInit+0xf4>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bec:	4a1f      	ldr	r2, [pc, #124]	@ (8001c6c <HAL_I2S_MspInit+0xf4>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c6c <HAL_I2S_MspInit+0xf4>)
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	4b19      	ldr	r3, [pc, #100]	@ (8001c6c <HAL_I2S_MspInit+0xf4>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c08:	4a18      	ldr	r2, [pc, #96]	@ (8001c6c <HAL_I2S_MspInit+0xf4>)
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c10:	4b16      	ldr	r3, [pc, #88]	@ (8001c6c <HAL_I2S_MspInit+0xf4>)
 8001c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001c1c:	2310      	movs	r3, #16
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c2c:	2306      	movs	r3, #6
 8001c2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001c30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c34:	4619      	mov	r1, r3
 8001c36:	480e      	ldr	r0, [pc, #56]	@ (8001c70 <HAL_I2S_MspInit+0xf8>)
 8001c38:	f000 fc7e 	bl	8002538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001c3c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c42:	2302      	movs	r3, #2
 8001c44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c4e:	2306      	movs	r3, #6
 8001c50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c56:	4619      	mov	r1, r3
 8001c58:	4806      	ldr	r0, [pc, #24]	@ (8001c74 <HAL_I2S_MspInit+0xfc>)
 8001c5a:	f000 fc6d 	bl	8002538 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001c5e:	bf00      	nop
 8001c60:	3738      	adds	r7, #56	@ 0x38
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40003c00 	.word	0x40003c00
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40020000 	.word	0x40020000
 8001c74:	40020800 	.word	0x40020800

08001c78 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0b      	ldr	r2, [pc, #44]	@ (8001cb4 <HAL_RNG_MspInit+0x3c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d10d      	bne.n	8001ca6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <HAL_RNG_MspInit+0x40>)
 8001c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c92:	4a09      	ldr	r2, [pc, #36]	@ (8001cb8 <HAL_RNG_MspInit+0x40>)
 8001c94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c98:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c9a:	4b07      	ldr	r3, [pc, #28]	@ (8001cb8 <HAL_RNG_MspInit+0x40>)
 8001c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	50060800 	.word	0x50060800
 8001cb8:	40023800 	.word	0x40023800

08001cbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08a      	sub	sp, #40	@ 0x28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a19      	ldr	r2, [pc, #100]	@ (8001d40 <HAL_SPI_MspInit+0x84>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d12b      	bne.n	8001d36 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	4b18      	ldr	r3, [pc, #96]	@ (8001d44 <HAL_SPI_MspInit+0x88>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	4a17      	ldr	r2, [pc, #92]	@ (8001d44 <HAL_SPI_MspInit+0x88>)
 8001ce8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cee:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <HAL_SPI_MspInit+0x88>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <HAL_SPI_MspInit+0x88>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a10      	ldr	r2, [pc, #64]	@ (8001d44 <HAL_SPI_MspInit+0x88>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d44 <HAL_SPI_MspInit+0x88>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001d16:	23e0      	movs	r3, #224	@ 0xe0
 8001d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d26:	2305      	movs	r3, #5
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4805      	ldr	r0, [pc, #20]	@ (8001d48 <HAL_SPI_MspInit+0x8c>)
 8001d32:	f000 fc01 	bl	8002538 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001d36:	bf00      	nop
 8001d38:	3728      	adds	r7, #40	@ 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40013000 	.word	0x40013000
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40020000 	.word	0x40020000

08001d4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d5c:	d10d      	bne.n	8001d7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <HAL_TIM_Base_MspInit+0x3c>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d66:	4a08      	ldr	r2, [pc, #32]	@ (8001d88 <HAL_TIM_Base_MspInit+0x3c>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d6e:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <HAL_TIM_Base_MspInit+0x3c>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800

08001d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	@ 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1d      	ldr	r2, [pc, #116]	@ (8001e20 <HAL_UART_MspInit+0x94>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d133      	bne.n	8001e16 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e24 <HAL_UART_MspInit+0x98>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	4a1b      	ldr	r2, [pc, #108]	@ (8001e24 <HAL_UART_MspInit+0x98>)
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dbe:	4b19      	ldr	r3, [pc, #100]	@ (8001e24 <HAL_UART_MspInit+0x98>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b15      	ldr	r3, [pc, #84]	@ (8001e24 <HAL_UART_MspInit+0x98>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	4a14      	ldr	r2, [pc, #80]	@ (8001e24 <HAL_UART_MspInit+0x98>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dda:	4b12      	ldr	r3, [pc, #72]	@ (8001e24 <HAL_UART_MspInit+0x98>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001de6:	230c      	movs	r3, #12
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df2:	2303      	movs	r3, #3
 8001df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001df6:	2307      	movs	r3, #7
 8001df8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4809      	ldr	r0, [pc, #36]	@ (8001e28 <HAL_UART_MspInit+0x9c>)
 8001e02:	f000 fb99 	bl	8002538 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2026      	movs	r0, #38	@ 0x26
 8001e0c:	f000 facb 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e10:	2026      	movs	r0, #38	@ 0x26
 8001e12:	f000 fae4 	bl	80023de <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001e16:	bf00      	nop
 8001e18:	3728      	adds	r7, #40	@ 0x28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40004400 	.word	0x40004400
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40020000 	.word	0x40020000

08001e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <NMI_Handler+0x4>

08001e34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <HardFault_Handler+0x4>

08001e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <MemManage_Handler+0x4>

08001e44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <BusFault_Handler+0x4>

08001e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <UsageFault_Handler+0x4>

08001e54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e82:	f000 f971 	bl	8002168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001e8e:	2001      	movs	r0, #1
 8001e90:	f000 fd08 	bl	80028a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e9c:	4802      	ldr	r0, [pc, #8]	@ (8001ea8 <USART2_IRQHandler+0x10>)
 8001e9e:	f004 ff3d 	bl	8006d1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000378 	.word	0x20000378

08001eac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001eb0:	4802      	ldr	r0, [pc, #8]	@ (8001ebc <OTG_FS_IRQHandler+0x10>)
 8001eb2:	f000 ffef 	bl	8002e94 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200013a8 	.word	0x200013a8

08001ec0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return 1;
 8001ec4:	2301      	movs	r3, #1
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <_kill>:

int _kill(int pid, int sig)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eda:	f00a f9e9 	bl	800c2b0 <__errno>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2216      	movs	r2, #22
 8001ee2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ee4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_exit>:

void _exit (int status)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ffe7 	bl	8001ed0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f02:	bf00      	nop
 8001f04:	e7fd      	b.n	8001f02 <_exit+0x12>

08001f06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	e00a      	b.n	8001f2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f18:	f3af 8000 	nop.w
 8001f1c:	4601      	mov	r1, r0
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	60ba      	str	r2, [r7, #8]
 8001f24:	b2ca      	uxtb	r2, r1
 8001f26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	dbf0      	blt.n	8001f18 <_read+0x12>
  }

  return len;
 8001f36:	687b      	ldr	r3, [r7, #4]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	e009      	b.n	8001f66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	60ba      	str	r2, [r7, #8]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	3301      	adds	r3, #1
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	dbf1      	blt.n	8001f52 <_write+0x12>
  }
  return len;
 8001f6e:	687b      	ldr	r3, [r7, #4]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_close>:

int _close(int file)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fa0:	605a      	str	r2, [r3, #4]
  return 0;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <_isatty>:

int _isatty(int file)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fb8:	2301      	movs	r3, #1
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b085      	sub	sp, #20
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	60f8      	str	r0, [r7, #12]
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe8:	4a14      	ldr	r2, [pc, #80]	@ (800203c <_sbrk+0x5c>)
 8001fea:	4b15      	ldr	r3, [pc, #84]	@ (8002040 <_sbrk+0x60>)
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff4:	4b13      	ldr	r3, [pc, #76]	@ (8002044 <_sbrk+0x64>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <_sbrk+0x64>)
 8001ffe:	4a12      	ldr	r2, [pc, #72]	@ (8002048 <_sbrk+0x68>)
 8002000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002002:	4b10      	ldr	r3, [pc, #64]	@ (8002044 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	429a      	cmp	r2, r3
 800200e:	d207      	bcs.n	8002020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002010:	f00a f94e 	bl	800c2b0 <__errno>
 8002014:	4603      	mov	r3, r0
 8002016:	220c      	movs	r2, #12
 8002018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295
 800201e:	e009      	b.n	8002034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002020:	4b08      	ldr	r3, [pc, #32]	@ (8002044 <_sbrk+0x64>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002026:	4b07      	ldr	r3, [pc, #28]	@ (8002044 <_sbrk+0x64>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	4a05      	ldr	r2, [pc, #20]	@ (8002044 <_sbrk+0x64>)
 8002030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002032:	68fb      	ldr	r3, [r7, #12]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20020000 	.word	0x20020000
 8002040:	00000400 	.word	0x00000400
 8002044:	20000fc4 	.word	0x20000fc4
 8002048:	200018d8 	.word	0x200018d8

0800204c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002050:	4b06      	ldr	r3, [pc, #24]	@ (800206c <SystemInit+0x20>)
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002056:	4a05      	ldr	r2, [pc, #20]	@ (800206c <SystemInit+0x20>)
 8002058:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800205c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002070:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002074:	f7ff ffea 	bl	800204c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002078:	480c      	ldr	r0, [pc, #48]	@ (80020ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800207a:	490d      	ldr	r1, [pc, #52]	@ (80020b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800207c:	4a0d      	ldr	r2, [pc, #52]	@ (80020b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800207e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002080:	e002      	b.n	8002088 <LoopCopyDataInit>

08002082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002086:	3304      	adds	r3, #4

08002088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800208a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800208c:	d3f9      	bcc.n	8002082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800208e:	4a0a      	ldr	r2, [pc, #40]	@ (80020b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002090:	4c0a      	ldr	r4, [pc, #40]	@ (80020bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002094:	e001      	b.n	800209a <LoopFillZerobss>

08002096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002098:	3204      	adds	r2, #4

0800209a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800209a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800209c:	d3fb      	bcc.n	8002096 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800209e:	f00a f90d 	bl	800c2bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020a2:	f7fe fef9 	bl	8000e98 <main>
  bx  lr    
 80020a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b0:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80020b4:	0800f558 	.word	0x0800f558
  ldr r2, =_sbss
 80020b8:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80020bc:	200018d4 	.word	0x200018d4

080020c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020c0:	e7fe      	b.n	80020c0 <ADC_IRQHandler>
	...

080020c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002104 <HAL_Init+0x40>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002104 <HAL_Init+0x40>)
 80020ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002104 <HAL_Init+0x40>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002104 <HAL_Init+0x40>)
 80020da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e0:	4b08      	ldr	r3, [pc, #32]	@ (8002104 <HAL_Init+0x40>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a07      	ldr	r2, [pc, #28]	@ (8002104 <HAL_Init+0x40>)
 80020e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ec:	2003      	movs	r0, #3
 80020ee:	f000 f94f 	bl	8002390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020f2:	2000      	movs	r0, #0
 80020f4:	f000 f808 	bl	8002108 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020f8:	f7ff fcce 	bl	8001a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023c00 	.word	0x40023c00

08002108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002110:	4b12      	ldr	r3, [pc, #72]	@ (800215c <HAL_InitTick+0x54>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b12      	ldr	r3, [pc, #72]	@ (8002160 <HAL_InitTick+0x58>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4619      	mov	r1, r3
 800211a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800211e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002122:	fbb2 f3f3 	udiv	r3, r2, r3
 8002126:	4618      	mov	r0, r3
 8002128:	f000 f967 	bl	80023fa <HAL_SYSTICK_Config>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e00e      	b.n	8002154 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b0f      	cmp	r3, #15
 800213a:	d80a      	bhi.n	8002152 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800213c:	2200      	movs	r2, #0
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	f04f 30ff 	mov.w	r0, #4294967295
 8002144:	f000 f92f 	bl	80023a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002148:	4a06      	ldr	r2, [pc, #24]	@ (8002164 <HAL_InitTick+0x5c>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	e000      	b.n	8002154 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
}
 8002154:	4618      	mov	r0, r3
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000008 	.word	0x20000008
 8002160:	20000010 	.word	0x20000010
 8002164:	2000000c 	.word	0x2000000c

08002168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800216c:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <HAL_IncTick+0x20>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	4b06      	ldr	r3, [pc, #24]	@ (800218c <HAL_IncTick+0x24>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4413      	add	r3, r2
 8002178:	4a04      	ldr	r2, [pc, #16]	@ (800218c <HAL_IncTick+0x24>)
 800217a:	6013      	str	r3, [r2, #0]
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	20000010 	.word	0x20000010
 800218c:	20000fc8 	.word	0x20000fc8

08002190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return uwTick;
 8002194:	4b03      	ldr	r3, [pc, #12]	@ (80021a4 <HAL_GetTick+0x14>)
 8002196:	681b      	ldr	r3, [r3, #0]
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000fc8 	.word	0x20000fc8

080021a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021b0:	f7ff ffee 	bl	8002190 <HAL_GetTick>
 80021b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c0:	d005      	beq.n	80021ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021c2:	4b0a      	ldr	r3, [pc, #40]	@ (80021ec <HAL_Delay+0x44>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4413      	add	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021ce:	bf00      	nop
 80021d0:	f7ff ffde 	bl	8002190 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d8f7      	bhi.n	80021d0 <HAL_Delay+0x28>
  {
  }
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000010 	.word	0x20000010

080021f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002200:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800220c:	4013      	ands	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002218:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800221c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002222:	4a04      	ldr	r2, [pc, #16]	@ (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	60d3      	str	r3, [r2, #12]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800223c:	4b04      	ldr	r3, [pc, #16]	@ (8002250 <__NVIC_GetPriorityGrouping+0x18>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	0a1b      	lsrs	r3, r3, #8
 8002242:	f003 0307 	and.w	r3, r3, #7
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	2b00      	cmp	r3, #0
 8002264:	db0b      	blt.n	800227e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	f003 021f 	and.w	r2, r3, #31
 800226c:	4907      	ldr	r1, [pc, #28]	@ (800228c <__NVIC_EnableIRQ+0x38>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	2001      	movs	r0, #1
 8002276:	fa00 f202 	lsl.w	r2, r0, r2
 800227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000e100 	.word	0xe000e100

08002290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	db0a      	blt.n	80022ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	490c      	ldr	r1, [pc, #48]	@ (80022dc <__NVIC_SetPriority+0x4c>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	0112      	lsls	r2, r2, #4
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	440b      	add	r3, r1
 80022b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b8:	e00a      	b.n	80022d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4908      	ldr	r1, [pc, #32]	@ (80022e0 <__NVIC_SetPriority+0x50>)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	3b04      	subs	r3, #4
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	440b      	add	r3, r1
 80022ce:	761a      	strb	r2, [r3, #24]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	@ 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f1c3 0307 	rsb	r3, r3, #7
 80022fe:	2b04      	cmp	r3, #4
 8002300:	bf28      	it	cs
 8002302:	2304      	movcs	r3, #4
 8002304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3304      	adds	r3, #4
 800230a:	2b06      	cmp	r3, #6
 800230c:	d902      	bls.n	8002314 <NVIC_EncodePriority+0x30>
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3b03      	subs	r3, #3
 8002312:	e000      	b.n	8002316 <NVIC_EncodePriority+0x32>
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	401a      	ands	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800232c:	f04f 31ff 	mov.w	r1, #4294967295
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43d9      	mvns	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	4313      	orrs	r3, r2
         );
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	@ 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800235c:	d301      	bcc.n	8002362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235e:	2301      	movs	r3, #1
 8002360:	e00f      	b.n	8002382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002362:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <SysTick_Config+0x40>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236a:	210f      	movs	r1, #15
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	f7ff ff8e 	bl	8002290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002374:	4b05      	ldr	r3, [pc, #20]	@ (800238c <SysTick_Config+0x40>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237a:	4b04      	ldr	r3, [pc, #16]	@ (800238c <SysTick_Config+0x40>)
 800237c:	2207      	movs	r2, #7
 800237e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	e000e010 	.word	0xe000e010

08002390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff ff29 	bl	80021f0 <__NVIC_SetPriorityGrouping>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b086      	sub	sp, #24
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4603      	mov	r3, r0
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b8:	f7ff ff3e 	bl	8002238 <__NVIC_GetPriorityGrouping>
 80023bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	6978      	ldr	r0, [r7, #20]
 80023c4:	f7ff ff8e 	bl	80022e4 <NVIC_EncodePriority>
 80023c8:	4602      	mov	r2, r0
 80023ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff5d 	bl	8002290 <__NVIC_SetPriority>
}
 80023d6:	bf00      	nop
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	4603      	mov	r3, r0
 80023e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff31 	bl	8002254 <__NVIC_EnableIRQ>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff ffa2 	bl	800234c <SysTick_Config>
 8002408:	4603      	mov	r3, r0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b084      	sub	sp, #16
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002420:	f7ff feb6 	bl	8002190 <HAL_GetTick>
 8002424:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d008      	beq.n	8002444 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2280      	movs	r2, #128	@ 0x80
 8002436:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e052      	b.n	80024ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0216 	bic.w	r2, r2, #22
 8002452:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695a      	ldr	r2, [r3, #20]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002462:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002468:	2b00      	cmp	r3, #0
 800246a:	d103      	bne.n	8002474 <HAL_DMA_Abort+0x62>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0208 	bic.w	r2, r2, #8
 8002482:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0201 	bic.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002494:	e013      	b.n	80024be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002496:	f7ff fe7b 	bl	8002190 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b05      	cmp	r3, #5
 80024a2:	d90c      	bls.n	80024be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2220      	movs	r2, #32
 80024a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2203      	movs	r2, #3
 80024ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e015      	b.n	80024ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1e4      	bne.n	8002496 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d0:	223f      	movs	r2, #63	@ 0x3f
 80024d2:	409a      	lsls	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d004      	beq.n	8002510 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2280      	movs	r2, #128	@ 0x80
 800250a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e00c      	b.n	800252a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2205      	movs	r2, #5
 8002514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0201 	bic.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002538:	b480      	push	{r7}
 800253a:	b089      	sub	sp, #36	@ 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002542:	2300      	movs	r3, #0
 8002544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	e16b      	b.n	800282c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002554:	2201      	movs	r2, #1
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	429a      	cmp	r2, r3
 800256e:	f040 815a 	bne.w	8002826 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b01      	cmp	r3, #1
 800257c:	d005      	beq.n	800258a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002586:	2b02      	cmp	r3, #2
 8002588:	d130      	bne.n	80025ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	2203      	movs	r2, #3
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c0:	2201      	movs	r2, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f003 0201 	and.w	r2, r3, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d017      	beq.n	8002628 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	2203      	movs	r2, #3
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d123      	bne.n	800267c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	08da      	lsrs	r2, r3, #3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3208      	adds	r2, #8
 800263c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	220f      	movs	r2, #15
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	08da      	lsrs	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3208      	adds	r2, #8
 8002676:	69b9      	ldr	r1, [r7, #24]
 8002678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	2203      	movs	r2, #3
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 0203 	and.w	r2, r3, #3
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 80b4 	beq.w	8002826 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	4b60      	ldr	r3, [pc, #384]	@ (8002844 <HAL_GPIO_Init+0x30c>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c6:	4a5f      	ldr	r2, [pc, #380]	@ (8002844 <HAL_GPIO_Init+0x30c>)
 80026c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002844 <HAL_GPIO_Init+0x30c>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026da:	4a5b      	ldr	r2, [pc, #364]	@ (8002848 <HAL_GPIO_Init+0x310>)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	3302      	adds	r3, #2
 80026e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	220f      	movs	r2, #15
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a52      	ldr	r2, [pc, #328]	@ (800284c <HAL_GPIO_Init+0x314>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d02b      	beq.n	800275e <HAL_GPIO_Init+0x226>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a51      	ldr	r2, [pc, #324]	@ (8002850 <HAL_GPIO_Init+0x318>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d025      	beq.n	800275a <HAL_GPIO_Init+0x222>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a50      	ldr	r2, [pc, #320]	@ (8002854 <HAL_GPIO_Init+0x31c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d01f      	beq.n	8002756 <HAL_GPIO_Init+0x21e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4f      	ldr	r2, [pc, #316]	@ (8002858 <HAL_GPIO_Init+0x320>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d019      	beq.n	8002752 <HAL_GPIO_Init+0x21a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4e      	ldr	r2, [pc, #312]	@ (800285c <HAL_GPIO_Init+0x324>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d013      	beq.n	800274e <HAL_GPIO_Init+0x216>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a4d      	ldr	r2, [pc, #308]	@ (8002860 <HAL_GPIO_Init+0x328>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00d      	beq.n	800274a <HAL_GPIO_Init+0x212>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a4c      	ldr	r2, [pc, #304]	@ (8002864 <HAL_GPIO_Init+0x32c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d007      	beq.n	8002746 <HAL_GPIO_Init+0x20e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a4b      	ldr	r2, [pc, #300]	@ (8002868 <HAL_GPIO_Init+0x330>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d101      	bne.n	8002742 <HAL_GPIO_Init+0x20a>
 800273e:	2307      	movs	r3, #7
 8002740:	e00e      	b.n	8002760 <HAL_GPIO_Init+0x228>
 8002742:	2308      	movs	r3, #8
 8002744:	e00c      	b.n	8002760 <HAL_GPIO_Init+0x228>
 8002746:	2306      	movs	r3, #6
 8002748:	e00a      	b.n	8002760 <HAL_GPIO_Init+0x228>
 800274a:	2305      	movs	r3, #5
 800274c:	e008      	b.n	8002760 <HAL_GPIO_Init+0x228>
 800274e:	2304      	movs	r3, #4
 8002750:	e006      	b.n	8002760 <HAL_GPIO_Init+0x228>
 8002752:	2303      	movs	r3, #3
 8002754:	e004      	b.n	8002760 <HAL_GPIO_Init+0x228>
 8002756:	2302      	movs	r3, #2
 8002758:	e002      	b.n	8002760 <HAL_GPIO_Init+0x228>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <HAL_GPIO_Init+0x228>
 800275e:	2300      	movs	r3, #0
 8002760:	69fa      	ldr	r2, [r7, #28]
 8002762:	f002 0203 	and.w	r2, r2, #3
 8002766:	0092      	lsls	r2, r2, #2
 8002768:	4093      	lsls	r3, r2
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002770:	4935      	ldr	r1, [pc, #212]	@ (8002848 <HAL_GPIO_Init+0x310>)
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	089b      	lsrs	r3, r3, #2
 8002776:	3302      	adds	r3, #2
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800277e:	4b3b      	ldr	r3, [pc, #236]	@ (800286c <HAL_GPIO_Init+0x334>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027a2:	4a32      	ldr	r2, [pc, #200]	@ (800286c <HAL_GPIO_Init+0x334>)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027a8:	4b30      	ldr	r3, [pc, #192]	@ (800286c <HAL_GPIO_Init+0x334>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027cc:	4a27      	ldr	r2, [pc, #156]	@ (800286c <HAL_GPIO_Init+0x334>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027d2:	4b26      	ldr	r3, [pc, #152]	@ (800286c <HAL_GPIO_Init+0x334>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027f6:	4a1d      	ldr	r2, [pc, #116]	@ (800286c <HAL_GPIO_Init+0x334>)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027fc:	4b1b      	ldr	r3, [pc, #108]	@ (800286c <HAL_GPIO_Init+0x334>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002820:	4a12      	ldr	r2, [pc, #72]	@ (800286c <HAL_GPIO_Init+0x334>)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3301      	adds	r3, #1
 800282a:	61fb      	str	r3, [r7, #28]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	2b0f      	cmp	r3, #15
 8002830:	f67f ae90 	bls.w	8002554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002834:	bf00      	nop
 8002836:	bf00      	nop
 8002838:	3724      	adds	r7, #36	@ 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	40013800 	.word	0x40013800
 800284c:	40020000 	.word	0x40020000
 8002850:	40020400 	.word	0x40020400
 8002854:	40020800 	.word	0x40020800
 8002858:	40020c00 	.word	0x40020c00
 800285c:	40021000 	.word	0x40021000
 8002860:	40021400 	.word	0x40021400
 8002864:	40021800 	.word	0x40021800
 8002868:	40021c00 	.word	0x40021c00
 800286c:	40013c00 	.word	0x40013c00

08002870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	807b      	strh	r3, [r7, #2]
 800287c:	4613      	mov	r3, r2
 800287e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002880:	787b      	ldrb	r3, [r7, #1]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002886:	887a      	ldrh	r2, [r7, #2]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800288c:	e003      	b.n	8002896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800288e:	887b      	ldrh	r3, [r7, #2]
 8002890:	041a      	lsls	r2, r3, #16
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	619a      	str	r2, [r3, #24]
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028ae:	4b08      	ldr	r3, [pc, #32]	@ (80028d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028b0:	695a      	ldr	r2, [r3, #20]
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d006      	beq.n	80028c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ba:	4a05      	ldr	r2, [pc, #20]	@ (80028d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff f8c2 	bl	8001a4c <HAL_GPIO_EXTI_Callback>
  }
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40013c00 	.word	0x40013c00

080028d4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af02      	add	r7, sp, #8
 80028da:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e059      	b.n	800299a <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d106      	bne.n	8002906 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f008 fb7d 	bl	800b000 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2203      	movs	r2, #3
 800290a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002914:	d102      	bne.n	800291c <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f005 f996 	bl	8007c52 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	7c1a      	ldrb	r2, [r3, #16]
 800292e:	f88d 2000 	strb.w	r2, [sp]
 8002932:	3304      	adds	r3, #4
 8002934:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002936:	f005 f917 	bl	8007b68 <USB_CoreInit>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e026      	b.n	800299a <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2101      	movs	r1, #1
 8002952:	4618      	mov	r0, r3
 8002954:	f005 f98e 	bl	8007c74 <USB_SetCurrentMode>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2202      	movs	r2, #2
 8002962:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e017      	b.n	800299a <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	7c1a      	ldrb	r2, [r3, #16]
 8002972:	f88d 2000 	strb.w	r2, [sp]
 8002976:	3304      	adds	r3, #4
 8002978:	cb0e      	ldmia	r3, {r1, r2, r3}
 800297a:	f005 fb31 	bl	8007fe0 <USB_HostInit>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e004      	b.n	800299a <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80029a2:	b590      	push	{r4, r7, lr}
 80029a4:	b08b      	sub	sp, #44	@ 0x2c
 80029a6:	af04      	add	r7, sp, #16
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	4608      	mov	r0, r1
 80029ac:	4611      	mov	r1, r2
 80029ae:	461a      	mov	r2, r3
 80029b0:	4603      	mov	r3, r0
 80029b2:	70fb      	strb	r3, [r7, #3]
 80029b4:	460b      	mov	r3, r1
 80029b6:	70bb      	strb	r3, [r7, #2]
 80029b8:	4613      	mov	r3, r2
 80029ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80029bc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80029be:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_HCD_HC_Init+0x2c>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e09d      	b.n	8002b0a <HAL_HCD_HC_Init+0x168>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	3319      	adds	r3, #25
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80029ea:	78fa      	ldrb	r2, [r7, #3]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	1a9b      	subs	r3, r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	3314      	adds	r3, #20
 80029fa:	787a      	ldrb	r2, [r7, #1]
 80029fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80029fe:	78fa      	ldrb	r2, [r7, #3]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	3315      	adds	r3, #21
 8002a0e:	78fa      	ldrb	r2, [r7, #3]
 8002a10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	3326      	adds	r3, #38	@ 0x26
 8002a22:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002a26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	78bb      	ldrb	r3, [r7, #2]
 8002a2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a30:	b2d8      	uxtb	r0, r3
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	3316      	adds	r3, #22
 8002a40:	4602      	mov	r2, r0
 8002a42:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	4619      	mov	r1, r3
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 fbc7 	bl	80031dc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002a4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	da0a      	bge.n	8002a6c <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	3317      	adds	r3, #23
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
 8002a6a:	e009      	b.n	8002a80 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	3317      	adds	r3, #23
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f005 fc0f 	bl	80082a8 <USB_GetHostSpeed>
 8002a8a:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002a8c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d10b      	bne.n	8002aac <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002a94:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d107      	bne.n	8002aac <HAL_HCD_HC_Init+0x10a>
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d104      	bne.n	8002aac <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2bbc      	cmp	r3, #188	@ 0xbc
 8002aa6:	d901      	bls.n	8002aac <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002aa8:	23bc      	movs	r3, #188	@ 0xbc
 8002aaa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002aac:	78fa      	ldrb	r2, [r7, #3]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	3318      	adds	r3, #24
 8002abc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002ac0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002ac2:	78fa      	ldrb	r2, [r7, #3]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	b298      	uxth	r0, r3
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	3328      	adds	r3, #40	@ 0x28
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	787c      	ldrb	r4, [r7, #1]
 8002ae4:	78ba      	ldrb	r2, [r7, #2]
 8002ae6:	78f9      	ldrb	r1, [r7, #3]
 8002ae8:	9302      	str	r3, [sp, #8]
 8002aea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002aee:	9301      	str	r3, [sp, #4]
 8002af0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	4623      	mov	r3, r4
 8002af8:	f005 fbfe 	bl	80082f8 <USB_HC_Init>
 8002afc:	4603      	mov	r3, r0
 8002afe:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd90      	pop	{r4, r7, pc}

08002b12 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_HCD_HC_Halt+0x1e>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e00f      	b.n	8002b50 <HAL_HCD_HC_Halt+0x3e>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f005 ff90 	bl	8008a66 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	4608      	mov	r0, r1
 8002b62:	4611      	mov	r1, r2
 8002b64:	461a      	mov	r2, r3
 8002b66:	4603      	mov	r3, r0
 8002b68:	70fb      	strb	r3, [r7, #3]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	70bb      	strb	r3, [r7, #2]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	3317      	adds	r3, #23
 8002b82:	78ba      	ldrb	r2, [r7, #2]
 8002b84:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002b86:	78fa      	ldrb	r2, [r7, #3]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	3326      	adds	r3, #38	@ 0x26
 8002b96:	787a      	ldrb	r2, [r7, #1]
 8002b98:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002b9a:	7c3b      	ldrb	r3, [r7, #16]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d114      	bne.n	8002bca <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	332a      	adds	r3, #42	@ 0x2a
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002bb4:	78fa      	ldrb	r2, [r7, #3]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	3319      	adds	r3, #25
 8002bc4:	7f3a      	ldrb	r2, [r7, #28]
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	e009      	b.n	8002bde <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bca:	78fa      	ldrb	r2, [r7, #3]
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	1a9b      	subs	r3, r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	332a      	adds	r3, #42	@ 0x2a
 8002bda:	2202      	movs	r2, #2
 8002bdc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002bde:	787b      	ldrb	r3, [r7, #1]
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	f200 8102 	bhi.w	8002dea <HAL_HCD_HC_SubmitRequest+0x292>
 8002be6:	a201      	add	r2, pc, #4	@ (adr r2, 8002bec <HAL_HCD_HC_SubmitRequest+0x94>)
 8002be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bec:	08002bfd 	.word	0x08002bfd
 8002bf0:	08002dd5 	.word	0x08002dd5
 8002bf4:	08002cc1 	.word	0x08002cc1
 8002bf8:	08002d4b 	.word	0x08002d4b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002bfc:	7c3b      	ldrb	r3, [r7, #16]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	f040 80f5 	bne.w	8002dee <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002c04:	78bb      	ldrb	r3, [r7, #2]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d12d      	bne.n	8002c66 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002c0a:	8b3b      	ldrh	r3, [r7, #24]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d109      	bne.n	8002c24 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	1a9b      	subs	r3, r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	333d      	adds	r3, #61	@ 0x3d
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	333d      	adds	r3, #61	@ 0x3d
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10a      	bne.n	8002c50 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c3a:	78fa      	ldrb	r2, [r7, #3]
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	1a9b      	subs	r3, r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	332a      	adds	r3, #42	@ 0x2a
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002c4e:	e0ce      	b.n	8002dee <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c50:	78fa      	ldrb	r2, [r7, #3]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	332a      	adds	r3, #42	@ 0x2a
 8002c60:	2202      	movs	r2, #2
 8002c62:	701a      	strb	r2, [r3, #0]
      break;
 8002c64:	e0c3      	b.n	8002dee <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	331a      	adds	r3, #26
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	f040 80b8 	bne.w	8002dee <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c7e:	78fa      	ldrb	r2, [r7, #3]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	333c      	adds	r3, #60	@ 0x3c
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10a      	bne.n	8002caa <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	332a      	adds	r3, #42	@ 0x2a
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
      break;
 8002ca8:	e0a1      	b.n	8002dee <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	332a      	adds	r3, #42	@ 0x2a
 8002cba:	2202      	movs	r2, #2
 8002cbc:	701a      	strb	r2, [r3, #0]
      break;
 8002cbe:	e096      	b.n	8002dee <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002cc0:	78bb      	ldrb	r3, [r7, #2]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d120      	bne.n	8002d08 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	333d      	adds	r3, #61	@ 0x3d
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10a      	bne.n	8002cf2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cdc:	78fa      	ldrb	r2, [r7, #3]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	332a      	adds	r3, #42	@ 0x2a
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002cf0:	e07e      	b.n	8002df0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cf2:	78fa      	ldrb	r2, [r7, #3]
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	1a9b      	subs	r3, r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	332a      	adds	r3, #42	@ 0x2a
 8002d02:	2202      	movs	r2, #2
 8002d04:	701a      	strb	r2, [r3, #0]
      break;
 8002d06:	e073      	b.n	8002df0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	1a9b      	subs	r3, r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	333c      	adds	r3, #60	@ 0x3c
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10a      	bne.n	8002d34 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	332a      	adds	r3, #42	@ 0x2a
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]
      break;
 8002d32:	e05d      	b.n	8002df0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d34:	78fa      	ldrb	r2, [r7, #3]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	332a      	adds	r3, #42	@ 0x2a
 8002d44:	2202      	movs	r2, #2
 8002d46:	701a      	strb	r2, [r3, #0]
      break;
 8002d48:	e052      	b.n	8002df0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002d4a:	78bb      	ldrb	r3, [r7, #2]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d120      	bne.n	8002d92 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	333d      	adds	r3, #61	@ 0x3d
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d66:	78fa      	ldrb	r2, [r7, #3]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	332a      	adds	r3, #42	@ 0x2a
 8002d76:	2200      	movs	r2, #0
 8002d78:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d7a:	e039      	b.n	8002df0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d7c:	78fa      	ldrb	r2, [r7, #3]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	1a9b      	subs	r3, r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	332a      	adds	r3, #42	@ 0x2a
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	701a      	strb	r2, [r3, #0]
      break;
 8002d90:	e02e      	b.n	8002df0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	333c      	adds	r3, #60	@ 0x3c
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10a      	bne.n	8002dbe <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	332a      	adds	r3, #42	@ 0x2a
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
      break;
 8002dbc:	e018      	b.n	8002df0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	332a      	adds	r3, #42	@ 0x2a
 8002dce:	2202      	movs	r2, #2
 8002dd0:	701a      	strb	r2, [r3, #0]
      break;
 8002dd2:	e00d      	b.n	8002df0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	332a      	adds	r3, #42	@ 0x2a
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
      break;
 8002de8:	e002      	b.n	8002df0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002dea:	bf00      	nop
 8002dec:	e000      	b.n	8002df0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002dee:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	332c      	adds	r3, #44	@ 0x2c
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	8b39      	ldrh	r1, [r7, #24]
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4403      	add	r3, r0
 8002e14:	3334      	adds	r3, #52	@ 0x34
 8002e16:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002e18:	78fa      	ldrb	r2, [r7, #3]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	334c      	adds	r3, #76	@ 0x4c
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002e2c:	78fa      	ldrb	r2, [r7, #3]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	3338      	adds	r3, #56	@ 0x38
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e40:	78fa      	ldrb	r2, [r7, #3]
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	1a9b      	subs	r3, r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	3315      	adds	r3, #21
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002e54:	78fa      	ldrb	r2, [r7, #3]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	334d      	adds	r3, #77	@ 0x4d
 8002e64:	2200      	movs	r2, #0
 8002e66:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	3310      	adds	r3, #16
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	1d19      	adds	r1, r3, #4
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	799b      	ldrb	r3, [r3, #6]
 8002e82:	461a      	mov	r2, r3
 8002e84:	f005 fb64 	bl	8008550 <USB_HC_StartXfer>
 8002e88:	4603      	mov	r3, r0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop

08002e94 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f005 f858 	bl	8007f60 <USB_GetMode>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	f040 80fb 	bne.w	80030ae <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f005 f81b 	bl	8007ef8 <USB_ReadInterrupts>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80f1 	beq.w	80030ac <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f005 f812 	bl	8007ef8 <USB_ReadInterrupts>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ede:	d104      	bne.n	8002eea <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002ee8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f005 f802 	bl	8007ef8 <USB_ReadInterrupts>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002efa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002efe:	d104      	bne.n	8002f0a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002f08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f004 fff2 	bl	8007ef8 <USB_ReadInterrupts>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f1a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f1e:	d104      	bne.n	8002f2a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f004 ffe2 	bl	8007ef8 <USB_ReadInterrupts>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d103      	bne.n	8002f46 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2202      	movs	r2, #2
 8002f44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f004 ffd4 	bl	8007ef8 <USB_ReadInterrupts>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f5a:	d120      	bne.n	8002f9e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002f64:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d113      	bne.n	8002f9e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002f76:	2110      	movs	r1, #16
 8002f78:	6938      	ldr	r0, [r7, #16]
 8002f7a:	f004 fec7 	bl	8007d0c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002f7e:	6938      	ldr	r0, [r7, #16]
 8002f80:	f004 fef6 	bl	8007d70 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	7a5b      	ldrb	r3, [r3, #9]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d105      	bne.n	8002f98 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2101      	movs	r1, #1
 8002f92:	4618      	mov	r0, r3
 8002f94:	f005 f8e8 	bl	8008168 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f008 f8af 	bl	800b0fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f004 ffa8 	bl	8007ef8 <USB_ReadInterrupts>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fb2:	d102      	bne.n	8002fba <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f001 fd33 	bl	8004a20 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f004 ff9a 	bl	8007ef8 <USB_ReadInterrupts>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d106      	bne.n	8002fdc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f008 f878 	bl	800b0c4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2208      	movs	r2, #8
 8002fda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f004 ff89 	bl	8007ef8 <USB_ReadInterrupts>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ff0:	d139      	bne.n	8003066 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f005 fd24 	bl	8008a44 <USB_HC_ReadInterrupt>
 8002ffc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	e025      	b.n	8003050 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d018      	beq.n	800304a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800302a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800302e:	d106      	bne.n	800303e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	4619      	mov	r1, r3
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f905 	bl	8003246 <HCD_HC_IN_IRQHandler>
 800303c:	e005      	b.n	800304a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	4619      	mov	r1, r3
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 ff67 	bl	8003f18 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	3301      	adds	r3, #1
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	795b      	ldrb	r3, [r3, #5]
 8003054:	461a      	mov	r2, r3
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	4293      	cmp	r3, r2
 800305a:	d3d3      	bcc.n	8003004 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003064:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f004 ff44 	bl	8007ef8 <USB_ReadInterrupts>
 8003070:	4603      	mov	r3, r0
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	2b10      	cmp	r3, #16
 8003078:	d101      	bne.n	800307e <HAL_HCD_IRQHandler+0x1ea>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <HAL_HCD_IRQHandler+0x1ec>
 800307e:	2300      	movs	r3, #0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d014      	beq.n	80030ae <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0210 	bic.w	r2, r2, #16
 8003092:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f001 fbe4 	bl	8004862 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699a      	ldr	r2, [r3, #24]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0210 	orr.w	r2, r2, #16
 80030a8:	619a      	str	r2, [r3, #24]
 80030aa:	e000      	b.n	80030ae <HAL_HCD_IRQHandler+0x21a>
      return;
 80030ac:	bf00      	nop
    }
  }
}
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_HCD_Start+0x16>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e013      	b.n	80030f2 <HAL_HCD_Start+0x3e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2101      	movs	r1, #1
 80030d8:	4618      	mov	r0, r3
 80030da:	f005 f8ac 	bl	8008236 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f004 fda4 	bl	8007c30 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_HCD_Stop+0x16>
 800310c:	2302      	movs	r3, #2
 800310e:	e00d      	b.n	800312c <HAL_HCD_Stop+0x32>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f005 fdff 	bl	8008d20 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f005 f84e 	bl	80081e2 <USB_ResetPort>
 8003146:	4603      	mov	r3, r0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	334c      	adds	r3, #76	@ 0x4c
 800316c:	781b      	ldrb	r3, [r3, #0]
}
 800316e:	4618      	mov	r0, r3
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	460b      	mov	r3, r1
 8003184:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	3338      	adds	r3, #56	@ 0x38
 8003196:	681b      	ldr	r3, [r3, #0]
}
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f005 f890 	bl	80082d6 <USB_GetCurrentFrame>
 80031b6:	4603      	mov	r3, r0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f005 f86b 	bl	80082a8 <USB_GetHostSpeed>
 80031d2:	4603      	mov	r3, r0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	331a      	adds	r3, #26
 80031f8:	2200      	movs	r2, #0
 80031fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	331b      	adds	r3, #27
 800320c:	2200      	movs	r2, #0
 800320e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003210:	78fa      	ldrb	r2, [r7, #3]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	3325      	adds	r3, #37	@ 0x25
 8003220:	2200      	movs	r2, #0
 8003222:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	3324      	adds	r3, #36	@ 0x24
 8003234:	2200      	movs	r2, #0
 8003236:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b086      	sub	sp, #24
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	460b      	mov	r3, r1
 8003250:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	78fa      	ldrb	r2, [r7, #3]
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f004 fe5a 	bl	8007f1e <USB_ReadChInterrupts>
 800326a:	4603      	mov	r3, r0
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b04      	cmp	r3, #4
 8003272:	d11a      	bne.n	80032aa <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4413      	add	r3, r2
 800327c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003280:	461a      	mov	r2, r3
 8003282:	2304      	movs	r3, #4
 8003284:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	334d      	adds	r3, #77	@ 0x4d
 8003296:	2207      	movs	r2, #7
 8003298:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	78fa      	ldrb	r2, [r7, #3]
 80032a0:	4611      	mov	r1, r2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f005 fbdf 	bl	8008a66 <USB_HC_Halt>
 80032a8:	e09e      	b.n	80033e8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	4611      	mov	r1, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f004 fe33 	bl	8007f1e <USB_ReadChInterrupts>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032c2:	d11b      	bne.n	80032fc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	015a      	lsls	r2, r3, #5
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4413      	add	r3, r2
 80032cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032d0:	461a      	mov	r2, r3
 80032d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80032d8:	78fa      	ldrb	r2, [r7, #3]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	334d      	adds	r3, #77	@ 0x4d
 80032e8:	2208      	movs	r2, #8
 80032ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	78fa      	ldrb	r2, [r7, #3]
 80032f2:	4611      	mov	r1, r2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f005 fbb6 	bl	8008a66 <USB_HC_Halt>
 80032fa:	e075      	b.n	80033e8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	4611      	mov	r1, r2
 8003304:	4618      	mov	r0, r3
 8003306:	f004 fe0a 	bl	8007f1e <USB_ReadChInterrupts>
 800330a:	4603      	mov	r3, r0
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b08      	cmp	r3, #8
 8003312:	d11a      	bne.n	800334a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003314:	78fb      	ldrb	r3, [r7, #3]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4413      	add	r3, r2
 800331c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003320:	461a      	mov	r2, r3
 8003322:	2308      	movs	r3, #8
 8003324:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	334d      	adds	r3, #77	@ 0x4d
 8003336:	2206      	movs	r2, #6
 8003338:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	4611      	mov	r1, r2
 8003342:	4618      	mov	r0, r3
 8003344:	f005 fb8f 	bl	8008a66 <USB_HC_Halt>
 8003348:	e04e      	b.n	80033e8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	4611      	mov	r1, r2
 8003352:	4618      	mov	r0, r3
 8003354:	f004 fde3 	bl	8007f1e <USB_ReadChInterrupts>
 8003358:	4603      	mov	r3, r0
 800335a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800335e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003362:	d11b      	bne.n	800339c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003370:	461a      	mov	r2, r3
 8003372:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003376:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	334d      	adds	r3, #77	@ 0x4d
 8003388:	2209      	movs	r2, #9
 800338a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	4611      	mov	r1, r2
 8003394:	4618      	mov	r0, r3
 8003396:	f005 fb66 	bl	8008a66 <USB_HC_Halt>
 800339a:	e025      	b.n	80033e8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	78fa      	ldrb	r2, [r7, #3]
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f004 fdba 	bl	8007f1e <USB_ReadChInterrupts>
 80033aa:	4603      	mov	r3, r0
 80033ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b0:	2b80      	cmp	r3, #128	@ 0x80
 80033b2:	d119      	bne.n	80033e8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80033b4:	78fb      	ldrb	r3, [r7, #3]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033c0:	461a      	mov	r2, r3
 80033c2:	2380      	movs	r3, #128	@ 0x80
 80033c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	334d      	adds	r3, #77	@ 0x4d
 80033d6:	2207      	movs	r2, #7
 80033d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	4611      	mov	r1, r2
 80033e2:	4618      	mov	r0, r3
 80033e4:	f005 fb3f 	bl	8008a66 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f004 fd94 	bl	8007f1e <USB_ReadChInterrupts>
 80033f6:	4603      	mov	r3, r0
 80033f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003400:	d112      	bne.n	8003428 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	78fa      	ldrb	r2, [r7, #3]
 8003408:	4611      	mov	r1, r2
 800340a:	4618      	mov	r0, r3
 800340c:	f005 fb2b 	bl	8008a66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4413      	add	r3, r2
 8003418:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800341c:	461a      	mov	r2, r3
 800341e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003422:	6093      	str	r3, [r2, #8]
 8003424:	f000 bd75 	b.w	8003f12 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	78fa      	ldrb	r2, [r7, #3]
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f004 fd74 	bl	8007f1e <USB_ReadChInterrupts>
 8003436:	4603      	mov	r3, r0
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b01      	cmp	r3, #1
 800343e:	f040 8128 	bne.w	8003692 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4413      	add	r3, r2
 800344a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800344e:	461a      	mov	r2, r3
 8003450:	2320      	movs	r3, #32
 8003452:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003454:	78fa      	ldrb	r2, [r7, #3]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	331b      	adds	r3, #27
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d119      	bne.n	800349e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800346a:	78fa      	ldrb	r2, [r7, #3]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	331b      	adds	r3, #27
 800347a:	2200      	movs	r2, #0
 800347c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4413      	add	r3, r2
 8003486:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	0151      	lsls	r1, r2, #5
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	440a      	add	r2, r1
 8003494:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003498:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800349c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	799b      	ldrb	r3, [r3, #6]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d01b      	beq.n	80034de <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	3330      	adds	r3, #48	@ 0x30
 80034b6:	6819      	ldr	r1, [r3, #0]
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	1ac9      	subs	r1, r1, r3
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	1a9b      	subs	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4403      	add	r3, r0
 80034da:	3338      	adds	r3, #56	@ 0x38
 80034dc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	334d      	adds	r3, #77	@ 0x4d
 80034ee:	2201      	movs	r2, #1
 80034f0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	3344      	adds	r3, #68	@ 0x44
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003506:	78fb      	ldrb	r3, [r7, #3]
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4413      	add	r3, r2
 800350e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003512:	461a      	mov	r2, r3
 8003514:	2301      	movs	r3, #1
 8003516:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	3326      	adds	r3, #38	@ 0x26
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	3326      	adds	r3, #38	@ 0x26
 800353e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003540:	2b02      	cmp	r3, #2
 8003542:	d110      	bne.n	8003566 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f005 fa8a 	bl	8008a66 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4413      	add	r3, r2
 800355a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800355e:	461a      	mov	r2, r3
 8003560:	2310      	movs	r3, #16
 8003562:	6093      	str	r3, [r2, #8]
 8003564:	e03d      	b.n	80035e2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	3326      	adds	r3, #38	@ 0x26
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d00a      	beq.n	8003592 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	3326      	adds	r3, #38	@ 0x26
 800358c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800358e:	2b01      	cmp	r3, #1
 8003590:	d127      	bne.n	80035e2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	4413      	add	r3, r2
 800359a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	78fa      	ldrb	r2, [r7, #3]
 80035a2:	0151      	lsls	r1, r2, #5
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	440a      	add	r2, r1
 80035a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80035b0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80035b2:	78fa      	ldrb	r2, [r7, #3]
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	334c      	adds	r3, #76	@ 0x4c
 80035c2:	2201      	movs	r2, #1
 80035c4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	1a9b      	subs	r3, r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	334c      	adds	r3, #76	@ 0x4c
 80035d6:	781a      	ldrb	r2, [r3, #0]
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	4619      	mov	r1, r3
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f007 fd9b 	bl	800b118 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	799b      	ldrb	r3, [r3, #6]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d13b      	bne.n	8003662 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	3338      	adds	r3, #56	@ 0x38
 80035fa:	6819      	ldr	r1, [r3, #0]
 80035fc:	78fa      	ldrb	r2, [r7, #3]
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4403      	add	r3, r0
 800360a:	3328      	adds	r3, #40	@ 0x28
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	440b      	add	r3, r1
 8003610:	1e59      	subs	r1, r3, #1
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	1a9b      	subs	r3, r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4403      	add	r3, r0
 8003620:	3328      	adds	r3, #40	@ 0x28
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	fbb1 f3f3 	udiv	r3, r1, r3
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8470 	beq.w	8003f12 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	1a9b      	subs	r3, r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	333c      	adds	r3, #60	@ 0x3c
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	78fa      	ldrb	r2, [r7, #3]
 8003646:	f083 0301 	eor.w	r3, r3, #1
 800364a:	b2d8      	uxtb	r0, r3
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	333c      	adds	r3, #60	@ 0x3c
 800365a:	4602      	mov	r2, r0
 800365c:	701a      	strb	r2, [r3, #0]
 800365e:	f000 bc58 	b.w	8003f12 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003662:	78fa      	ldrb	r2, [r7, #3]
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	333c      	adds	r3, #60	@ 0x3c
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	f083 0301 	eor.w	r3, r3, #1
 800367a:	b2d8      	uxtb	r0, r3
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	333c      	adds	r3, #60	@ 0x3c
 800368a:	4602      	mov	r2, r0
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	f000 bc40 	b.w	8003f12 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	4611      	mov	r1, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f004 fc3f 	bl	8007f1e <USB_ReadChInterrupts>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b20      	cmp	r3, #32
 80036a8:	d131      	bne.n	800370e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036b6:	461a      	mov	r2, r3
 80036b8:	2320      	movs	r3, #32
 80036ba:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	331a      	adds	r3, #26
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	f040 841f 	bne.w	8003f12 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80036d4:	78fa      	ldrb	r2, [r7, #3]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	1a9b      	subs	r3, r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	331b      	adds	r3, #27
 80036e4:	2201      	movs	r2, #1
 80036e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80036e8:	78fa      	ldrb	r2, [r7, #3]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	334d      	adds	r3, #77	@ 0x4d
 80036f8:	2203      	movs	r2, #3
 80036fa:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f005 f9ae 	bl	8008a66 <USB_HC_Halt>
 800370a:	f000 bc02 	b.w	8003f12 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	78fa      	ldrb	r2, [r7, #3]
 8003714:	4611      	mov	r1, r2
 8003716:	4618      	mov	r0, r3
 8003718:	f004 fc01 	bl	8007f1e <USB_ReadChInterrupts>
 800371c:	4603      	mov	r3, r0
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b02      	cmp	r3, #2
 8003724:	f040 8305 	bne.w	8003d32 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4413      	add	r3, r2
 8003730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003734:	461a      	mov	r2, r3
 8003736:	2302      	movs	r3, #2
 8003738:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800373a:	78fa      	ldrb	r2, [r7, #3]
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	334d      	adds	r3, #77	@ 0x4d
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d114      	bne.n	800377a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	334d      	adds	r3, #77	@ 0x4d
 8003760:	2202      	movs	r2, #2
 8003762:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003764:	78fa      	ldrb	r2, [r7, #3]
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	334c      	adds	r3, #76	@ 0x4c
 8003774:	2201      	movs	r2, #1
 8003776:	701a      	strb	r2, [r3, #0]
 8003778:	e2cc      	b.n	8003d14 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800377a:	78fa      	ldrb	r2, [r7, #3]
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	1a9b      	subs	r3, r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	334d      	adds	r3, #77	@ 0x4d
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b06      	cmp	r3, #6
 800378e:	d114      	bne.n	80037ba <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003790:	78fa      	ldrb	r2, [r7, #3]
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	334d      	adds	r3, #77	@ 0x4d
 80037a0:	2202      	movs	r2, #2
 80037a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	334c      	adds	r3, #76	@ 0x4c
 80037b4:	2205      	movs	r2, #5
 80037b6:	701a      	strb	r2, [r3, #0]
 80037b8:	e2ac      	b.n	8003d14 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80037ba:	78fa      	ldrb	r2, [r7, #3]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	334d      	adds	r3, #77	@ 0x4d
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b07      	cmp	r3, #7
 80037ce:	d00b      	beq.n	80037e8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80037d0:	78fa      	ldrb	r2, [r7, #3]
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	4613      	mov	r3, r2
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	1a9b      	subs	r3, r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	334d      	adds	r3, #77	@ 0x4d
 80037e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80037e2:	2b09      	cmp	r3, #9
 80037e4:	f040 80a6 	bne.w	8003934 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037e8:	78fa      	ldrb	r2, [r7, #3]
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	334d      	adds	r3, #77	@ 0x4d
 80037f8:	2202      	movs	r2, #2
 80037fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80037fc:	78fa      	ldrb	r2, [r7, #3]
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	4613      	mov	r3, r2
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	3344      	adds	r3, #68	@ 0x44
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	1c59      	adds	r1, r3, #1
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4403      	add	r3, r0
 800381c:	3344      	adds	r3, #68	@ 0x44
 800381e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	1a9b      	subs	r3, r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	3344      	adds	r3, #68	@ 0x44
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b02      	cmp	r3, #2
 8003834:	d943      	bls.n	80038be <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003836:	78fa      	ldrb	r2, [r7, #3]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	3344      	adds	r3, #68	@ 0x44
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	331a      	adds	r3, #26
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d123      	bne.n	80038a8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003860:	78fa      	ldrb	r2, [r7, #3]
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	331b      	adds	r3, #27
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003874:	78fa      	ldrb	r2, [r7, #3]
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	4613      	mov	r3, r2
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	1a9b      	subs	r3, r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	331c      	adds	r3, #28
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003888:	78fb      	ldrb	r3, [r7, #3]
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	4413      	add	r3, r2
 8003890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	0151      	lsls	r1, r2, #5
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	440a      	add	r2, r1
 800389e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038a6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80038a8:	78fa      	ldrb	r2, [r7, #3]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	334c      	adds	r3, #76	@ 0x4c
 80038b8:	2204      	movs	r2, #4
 80038ba:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80038bc:	e229      	b.n	8003d12 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	334c      	adds	r3, #76	@ 0x4c
 80038ce:	2202      	movs	r2, #2
 80038d0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038d2:	78fa      	ldrb	r2, [r7, #3]
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	3326      	adds	r3, #38	@ 0x26
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00b      	beq.n	8003900 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038e8:	78fa      	ldrb	r2, [r7, #3]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	3326      	adds	r3, #38	@ 0x26
 80038f8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	f040 8209 	bne.w	8003d12 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4413      	add	r3, r2
 8003908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003916:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800391e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4413      	add	r3, r2
 8003928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800392c:	461a      	mov	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003932:	e1ee      	b.n	8003d12 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003934:	78fa      	ldrb	r2, [r7, #3]
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	1a9b      	subs	r3, r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	334d      	adds	r3, #77	@ 0x4d
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b05      	cmp	r3, #5
 8003948:	f040 80c8 	bne.w	8003adc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800394c:	78fa      	ldrb	r2, [r7, #3]
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	1a9b      	subs	r3, r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	334d      	adds	r3, #77	@ 0x4d
 800395c:	2202      	movs	r2, #2
 800395e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003960:	78fa      	ldrb	r2, [r7, #3]
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	1a9b      	subs	r3, r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	331b      	adds	r3, #27
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b01      	cmp	r3, #1
 8003974:	f040 81ce 	bne.w	8003d14 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	3326      	adds	r3, #38	@ 0x26
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b03      	cmp	r3, #3
 800398c:	d16b      	bne.n	8003a66 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800398e:	78fa      	ldrb	r2, [r7, #3]
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	3348      	adds	r3, #72	@ 0x48
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	1c59      	adds	r1, r3, #1
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4403      	add	r3, r0
 80039ae:	3348      	adds	r3, #72	@ 0x48
 80039b0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80039b2:	78fa      	ldrb	r2, [r7, #3]
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	1a9b      	subs	r3, r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	3348      	adds	r3, #72	@ 0x48
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d943      	bls.n	8003a50 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	3348      	adds	r3, #72	@ 0x48
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80039dc:	78fa      	ldrb	r2, [r7, #3]
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	1a9b      	subs	r3, r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	440b      	add	r3, r1
 80039ea:	331b      	adds	r3, #27
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	3344      	adds	r3, #68	@ 0x44
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d809      	bhi.n	8003a1a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003a06:	78fa      	ldrb	r2, [r7, #3]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	1a9b      	subs	r3, r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	331c      	adds	r3, #28
 8003a16:	2201      	movs	r2, #1
 8003a18:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003a1a:	78fb      	ldrb	r3, [r7, #3]
 8003a1c:	015a      	lsls	r2, r3, #5
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	78fa      	ldrb	r2, [r7, #3]
 8003a2a:	0151      	lsls	r1, r2, #5
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	440a      	add	r2, r1
 8003a30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a38:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003a3a:	78fa      	ldrb	r2, [r7, #3]
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	1a9b      	subs	r3, r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	334c      	adds	r3, #76	@ 0x4c
 8003a4a:	2204      	movs	r2, #4
 8003a4c:	701a      	strb	r2, [r3, #0]
 8003a4e:	e014      	b.n	8003a7a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a50:	78fa      	ldrb	r2, [r7, #3]
 8003a52:	6879      	ldr	r1, [r7, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	011b      	lsls	r3, r3, #4
 8003a58:	1a9b      	subs	r3, r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	334c      	adds	r3, #76	@ 0x4c
 8003a60:	2202      	movs	r2, #2
 8003a62:	701a      	strb	r2, [r3, #0]
 8003a64:	e009      	b.n	8003a7a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a66:	78fa      	ldrb	r2, [r7, #3]
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	1a9b      	subs	r3, r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	440b      	add	r3, r1
 8003a74:	334c      	adds	r3, #76	@ 0x4c
 8003a76:	2202      	movs	r2, #2
 8003a78:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a7a:	78fa      	ldrb	r2, [r7, #3]
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	3326      	adds	r3, #38	@ 0x26
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00b      	beq.n	8003aa8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a90:	78fa      	ldrb	r2, [r7, #3]
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	3326      	adds	r3, #38	@ 0x26
 8003aa0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	f040 8136 	bne.w	8003d14 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003abe:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ac6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e11b      	b.n	8003d14 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003adc:	78fa      	ldrb	r2, [r7, #3]
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	334d      	adds	r3, #77	@ 0x4d
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	f040 8081 	bne.w	8003bf6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	334d      	adds	r3, #77	@ 0x4d
 8003b04:	2202      	movs	r2, #2
 8003b06:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003b08:	78fa      	ldrb	r2, [r7, #3]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	331b      	adds	r3, #27
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	f040 80fa 	bne.w	8003d14 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b20:	78fa      	ldrb	r2, [r7, #3]
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	1a9b      	subs	r3, r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	334c      	adds	r3, #76	@ 0x4c
 8003b30:	2202      	movs	r2, #2
 8003b32:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	78fa      	ldrb	r2, [r7, #3]
 8003b44:	0151      	lsls	r1, r2, #5
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	440a      	add	r2, r1
 8003b4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b52:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	0151      	lsls	r1, r2, #5
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	440a      	add	r2, r1
 8003b6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b72:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	78fa      	ldrb	r2, [r7, #3]
 8003b84:	0151      	lsls	r1, r2, #5
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	440a      	add	r2, r1
 8003b8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b8e:	f023 0320 	bic.w	r3, r3, #32
 8003b92:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	3326      	adds	r3, #38	@ 0x26
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	3326      	adds	r3, #38	@ 0x26
 8003bba:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	f040 80a9 	bne.w	8003d14 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003bd8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003be0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	e08e      	b.n	8003d14 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003bf6:	78fa      	ldrb	r2, [r7, #3]
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	1a9b      	subs	r3, r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	334d      	adds	r3, #77	@ 0x4d
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d143      	bne.n	8003c94 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c0c:	78fa      	ldrb	r2, [r7, #3]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	334d      	adds	r3, #77	@ 0x4d
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c20:	78fa      	ldrb	r2, [r7, #3]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	334c      	adds	r3, #76	@ 0x4c
 8003c30:	2202      	movs	r2, #2
 8003c32:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c34:	78fa      	ldrb	r2, [r7, #3]
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	3326      	adds	r3, #38	@ 0x26
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	3326      	adds	r3, #38	@ 0x26
 8003c5a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d159      	bne.n	8003d14 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c76:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c7e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	e03f      	b.n	8003d14 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003c94:	78fa      	ldrb	r2, [r7, #3]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	334d      	adds	r3, #77	@ 0x4d
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d126      	bne.n	8003cf8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003caa:	78fa      	ldrb	r2, [r7, #3]
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	334d      	adds	r3, #77	@ 0x4d
 8003cba:	2202      	movs	r2, #2
 8003cbc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003cbe:	78fa      	ldrb	r2, [r7, #3]
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	3344      	adds	r3, #68	@ 0x44
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	1c59      	adds	r1, r3, #1
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	1a9b      	subs	r3, r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4403      	add	r3, r0
 8003cde:	3344      	adds	r3, #68	@ 0x44
 8003ce0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	334c      	adds	r3, #76	@ 0x4c
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	701a      	strb	r2, [r3, #0]
 8003cf6:	e00d      	b.n	8003d14 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003cf8:	78fa      	ldrb	r2, [r7, #3]
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	334d      	adds	r3, #77	@ 0x4d
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	f000 8100 	beq.w	8003f10 <HCD_HC_IN_IRQHandler+0xcca>
 8003d10:	e000      	b.n	8003d14 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d12:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d14:	78fa      	ldrb	r2, [r7, #3]
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	334c      	adds	r3, #76	@ 0x4c
 8003d24:	781a      	ldrb	r2, [r3, #0]
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f007 f9f4 	bl	800b118 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d30:	e0ef      	b.n	8003f12 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	78fa      	ldrb	r2, [r7, #3]
 8003d38:	4611      	mov	r1, r2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f004 f8ef 	bl	8007f1e <USB_ReadChInterrupts>
 8003d40:	4603      	mov	r3, r0
 8003d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d46:	2b40      	cmp	r3, #64	@ 0x40
 8003d48:	d12f      	bne.n	8003daa <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003d4a:	78fb      	ldrb	r3, [r7, #3]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d56:	461a      	mov	r2, r3
 8003d58:	2340      	movs	r3, #64	@ 0x40
 8003d5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	334d      	adds	r3, #77	@ 0x4d
 8003d6c:	2205      	movs	r2, #5
 8003d6e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003d70:	78fa      	ldrb	r2, [r7, #3]
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	4613      	mov	r3, r2
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	1a9b      	subs	r3, r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	331a      	adds	r3, #26
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d109      	bne.n	8003d9a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d86:	78fa      	ldrb	r2, [r7, #3]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	3344      	adds	r3, #68	@ 0x44
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	78fa      	ldrb	r2, [r7, #3]
 8003da0:	4611      	mov	r1, r2
 8003da2:	4618      	mov	r0, r3
 8003da4:	f004 fe5f 	bl	8008a66 <USB_HC_Halt>
 8003da8:	e0b3      	b.n	8003f12 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	78fa      	ldrb	r2, [r7, #3]
 8003db0:	4611      	mov	r1, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f004 f8b3 	bl	8007f1e <USB_ReadChInterrupts>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b10      	cmp	r3, #16
 8003dc0:	f040 80a7 	bne.w	8003f12 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003dc4:	78fa      	ldrb	r2, [r7, #3]
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	3326      	adds	r3, #38	@ 0x26
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d11b      	bne.n	8003e12 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003dda:	78fa      	ldrb	r2, [r7, #3]
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	3344      	adds	r3, #68	@ 0x44
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003dee:	78fa      	ldrb	r2, [r7, #3]
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	4613      	mov	r3, r2
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	1a9b      	subs	r3, r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	334d      	adds	r3, #77	@ 0x4d
 8003dfe:	2204      	movs	r2, #4
 8003e00:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	78fa      	ldrb	r2, [r7, #3]
 8003e08:	4611      	mov	r1, r2
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f004 fe2b 	bl	8008a66 <USB_HC_Halt>
 8003e10:	e03f      	b.n	8003e92 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e12:	78fa      	ldrb	r2, [r7, #3]
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	4613      	mov	r3, r2
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	1a9b      	subs	r3, r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	3326      	adds	r3, #38	@ 0x26
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e28:	78fa      	ldrb	r2, [r7, #3]
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	3326      	adds	r3, #38	@ 0x26
 8003e38:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d129      	bne.n	8003e92 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003e3e:	78fa      	ldrb	r2, [r7, #3]
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	1a9b      	subs	r3, r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	3344      	adds	r3, #68	@ 0x44
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	799b      	ldrb	r3, [r3, #6]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HCD_HC_IN_IRQHandler+0xc2a>
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	1a9b      	subs	r3, r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	331b      	adds	r3, #27
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d110      	bne.n	8003e92 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	334d      	adds	r3, #77	@ 0x4d
 8003e80:	2204      	movs	r2, #4
 8003e82:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	78fa      	ldrb	r2, [r7, #3]
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f004 fdea 	bl	8008a66 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003e92:	78fa      	ldrb	r2, [r7, #3]
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	331b      	adds	r3, #27
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d129      	bne.n	8003efc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	331b      	adds	r3, #27
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ebc:	78fb      	ldrb	r3, [r7, #3]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	78fa      	ldrb	r2, [r7, #3]
 8003ecc:	0151      	lsls	r1, r2, #5
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	440a      	add	r2, r1
 8003ed2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ed6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eda:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	78fa      	ldrb	r2, [r7, #3]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ef6:	f043 0320 	orr.w	r3, r3, #32
 8003efa:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f08:	461a      	mov	r2, r3
 8003f0a:	2310      	movs	r3, #16
 8003f0c:	6093      	str	r3, [r2, #8]
 8003f0e:	e000      	b.n	8003f12 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003f10:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	78fa      	ldrb	r2, [r7, #3]
 8003f34:	4611      	mov	r1, r2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f003 fff1 	bl	8007f1e <USB_ReadChInterrupts>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d11b      	bne.n	8003f7e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003f46:	78fb      	ldrb	r3, [r7, #3]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f52:	461a      	mov	r2, r3
 8003f54:	2304      	movs	r3, #4
 8003f56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003f58:	78fa      	ldrb	r2, [r7, #3]
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	334d      	adds	r3, #77	@ 0x4d
 8003f68:	2207      	movs	r2, #7
 8003f6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	78fa      	ldrb	r2, [r7, #3]
 8003f72:	4611      	mov	r1, r2
 8003f74:	4618      	mov	r0, r3
 8003f76:	f004 fd76 	bl	8008a66 <USB_HC_Halt>
 8003f7a:	f000 bc6f 	b.w	800485c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	78fa      	ldrb	r2, [r7, #3]
 8003f84:	4611      	mov	r1, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f003 ffc9 	bl	8007f1e <USB_ReadChInterrupts>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	f040 8082 	bne.w	800409c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	2320      	movs	r3, #32
 8003fa8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003faa:	78fa      	ldrb	r2, [r7, #3]
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	1a9b      	subs	r3, r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	3319      	adds	r3, #25
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d124      	bne.n	800400a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003fc0:	78fa      	ldrb	r2, [r7, #3]
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	1a9b      	subs	r3, r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	440b      	add	r3, r1
 8003fce:	3319      	adds	r3, #25
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003fd4:	78fa      	ldrb	r2, [r7, #3]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	1a9b      	subs	r3, r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	334c      	adds	r3, #76	@ 0x4c
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003fe8:	78fa      	ldrb	r2, [r7, #3]
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	1a9b      	subs	r3, r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	334d      	adds	r3, #77	@ 0x4d
 8003ff8:	2203      	movs	r2, #3
 8003ffa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	78fa      	ldrb	r2, [r7, #3]
 8004002:	4611      	mov	r1, r2
 8004004:	4618      	mov	r0, r3
 8004006:	f004 fd2e 	bl	8008a66 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800400a:	78fa      	ldrb	r2, [r7, #3]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	1a9b      	subs	r3, r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	331a      	adds	r3, #26
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b01      	cmp	r3, #1
 800401e:	f040 841d 	bne.w	800485c <HCD_HC_OUT_IRQHandler+0x944>
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	331b      	adds	r3, #27
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	f040 8411 	bne.w	800485c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800403a:	78fa      	ldrb	r2, [r7, #3]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	3326      	adds	r3, #38	@ 0x26
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d009      	beq.n	8004064 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004050:	78fa      	ldrb	r2, [r7, #3]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	331b      	adds	r3, #27
 8004060:	2201      	movs	r2, #1
 8004062:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004064:	78fa      	ldrb	r2, [r7, #3]
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	4613      	mov	r3, r2
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	1a9b      	subs	r3, r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	334d      	adds	r3, #77	@ 0x4d
 8004074:	2203      	movs	r2, #3
 8004076:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	78fa      	ldrb	r2, [r7, #3]
 800407e:	4611      	mov	r1, r2
 8004080:	4618      	mov	r0, r3
 8004082:	f004 fcf0 	bl	8008a66 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	3344      	adds	r3, #68	@ 0x44
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e3df      	b.n	800485c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	78fa      	ldrb	r2, [r7, #3]
 80040a2:	4611      	mov	r1, r2
 80040a4:	4618      	mov	r0, r3
 80040a6:	f003 ff3a 	bl	8007f1e <USB_ReadChInterrupts>
 80040aa:	4603      	mov	r3, r0
 80040ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040b4:	d111      	bne.n	80040da <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040c2:	461a      	mov	r2, r3
 80040c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040c8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	78fa      	ldrb	r2, [r7, #3]
 80040d0:	4611      	mov	r1, r2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f004 fcc7 	bl	8008a66 <USB_HC_Halt>
 80040d8:	e3c0      	b.n	800485c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	78fa      	ldrb	r2, [r7, #3]
 80040e0:	4611      	mov	r1, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f003 ff1b 	bl	8007f1e <USB_ReadChInterrupts>
 80040e8:	4603      	mov	r3, r0
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d168      	bne.n	80041c4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80040f2:	78fa      	ldrb	r2, [r7, #3]
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	3344      	adds	r3, #68	@ 0x44
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	78fa      	ldrb	r2, [r7, #3]
 800410c:	4611      	mov	r1, r2
 800410e:	4618      	mov	r0, r3
 8004110:	f003 ff05 	bl	8007f1e <USB_ReadChInterrupts>
 8004114:	4603      	mov	r3, r0
 8004116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800411a:	2b40      	cmp	r3, #64	@ 0x40
 800411c:	d112      	bne.n	8004144 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	3319      	adds	r3, #25
 800412e:	2201      	movs	r2, #1
 8004130:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004132:	78fb      	ldrb	r3, [r7, #3]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	4413      	add	r3, r2
 800413a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800413e:	461a      	mov	r2, r3
 8004140:	2340      	movs	r3, #64	@ 0x40
 8004142:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004144:	78fa      	ldrb	r2, [r7, #3]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	331b      	adds	r3, #27
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d019      	beq.n	800418e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800415a:	78fa      	ldrb	r2, [r7, #3]
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	331b      	adds	r3, #27
 800416a:	2200      	movs	r2, #0
 800416c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	4413      	add	r3, r2
 8004176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	0151      	lsls	r1, r2, #5
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	440a      	add	r2, r1
 8004184:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004188:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800418c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	4413      	add	r3, r2
 8004196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800419a:	461a      	mov	r2, r3
 800419c:	2301      	movs	r3, #1
 800419e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80041a0:	78fa      	ldrb	r2, [r7, #3]
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	4613      	mov	r3, r2
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	334d      	adds	r3, #77	@ 0x4d
 80041b0:	2201      	movs	r2, #1
 80041b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	78fa      	ldrb	r2, [r7, #3]
 80041ba:	4611      	mov	r1, r2
 80041bc:	4618      	mov	r0, r3
 80041be:	f004 fc52 	bl	8008a66 <USB_HC_Halt>
 80041c2:	e34b      	b.n	800485c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	78fa      	ldrb	r2, [r7, #3]
 80041ca:	4611      	mov	r1, r2
 80041cc:	4618      	mov	r0, r3
 80041ce:	f003 fea6 	bl	8007f1e <USB_ReadChInterrupts>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d8:	2b40      	cmp	r3, #64	@ 0x40
 80041da:	d139      	bne.n	8004250 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80041dc:	78fa      	ldrb	r2, [r7, #3]
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	4613      	mov	r3, r2
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	1a9b      	subs	r3, r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	334d      	adds	r3, #77	@ 0x4d
 80041ec:	2205      	movs	r2, #5
 80041ee:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80041f0:	78fa      	ldrb	r2, [r7, #3]
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	4613      	mov	r3, r2
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	331a      	adds	r3, #26
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d109      	bne.n	800421a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004206:	78fa      	ldrb	r2, [r7, #3]
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	4613      	mov	r3, r2
 800420c:	011b      	lsls	r3, r3, #4
 800420e:	1a9b      	subs	r3, r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	440b      	add	r3, r1
 8004214:	3319      	adds	r3, #25
 8004216:	2201      	movs	r2, #1
 8004218:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800421a:	78fa      	ldrb	r2, [r7, #3]
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	440b      	add	r3, r1
 8004228:	3344      	adds	r3, #68	@ 0x44
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	4611      	mov	r1, r2
 8004236:	4618      	mov	r0, r3
 8004238:	f004 fc15 	bl	8008a66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4413      	add	r3, r2
 8004244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004248:	461a      	mov	r2, r3
 800424a:	2340      	movs	r3, #64	@ 0x40
 800424c:	6093      	str	r3, [r2, #8]
 800424e:	e305      	b.n	800485c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	78fa      	ldrb	r2, [r7, #3]
 8004256:	4611      	mov	r1, r2
 8004258:	4618      	mov	r0, r3
 800425a:	f003 fe60 	bl	8007f1e <USB_ReadChInterrupts>
 800425e:	4603      	mov	r3, r0
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b08      	cmp	r3, #8
 8004266:	d11a      	bne.n	800429e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	4413      	add	r3, r2
 8004270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004274:	461a      	mov	r2, r3
 8004276:	2308      	movs	r3, #8
 8004278:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800427a:	78fa      	ldrb	r2, [r7, #3]
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	4613      	mov	r3, r2
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	1a9b      	subs	r3, r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	440b      	add	r3, r1
 8004288:	334d      	adds	r3, #77	@ 0x4d
 800428a:	2206      	movs	r2, #6
 800428c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	78fa      	ldrb	r2, [r7, #3]
 8004294:	4611      	mov	r1, r2
 8004296:	4618      	mov	r0, r3
 8004298:	f004 fbe5 	bl	8008a66 <USB_HC_Halt>
 800429c:	e2de      	b.n	800485c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	78fa      	ldrb	r2, [r7, #3]
 80042a4:	4611      	mov	r1, r2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f003 fe39 	bl	8007f1e <USB_ReadChInterrupts>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	2b10      	cmp	r3, #16
 80042b4:	d144      	bne.n	8004340 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80042b6:	78fa      	ldrb	r2, [r7, #3]
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	1a9b      	subs	r3, r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	3344      	adds	r3, #68	@ 0x44
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80042ca:	78fa      	ldrb	r2, [r7, #3]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	1a9b      	subs	r3, r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	334d      	adds	r3, #77	@ 0x4d
 80042da:	2204      	movs	r2, #4
 80042dc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80042de:	78fa      	ldrb	r2, [r7, #3]
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	1a9b      	subs	r3, r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	3319      	adds	r3, #25
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d114      	bne.n	800431e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80042f4:	78fa      	ldrb	r2, [r7, #3]
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	4613      	mov	r3, r2
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	1a9b      	subs	r3, r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	3318      	adds	r3, #24
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800430a:	78fa      	ldrb	r2, [r7, #3]
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	3319      	adds	r3, #25
 800431a:	2201      	movs	r2, #1
 800431c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	78fa      	ldrb	r2, [r7, #3]
 8004324:	4611      	mov	r1, r2
 8004326:	4618      	mov	r0, r3
 8004328:	f004 fb9d 	bl	8008a66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	4413      	add	r3, r2
 8004334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004338:	461a      	mov	r2, r3
 800433a:	2310      	movs	r3, #16
 800433c:	6093      	str	r3, [r2, #8]
 800433e:	e28d      	b.n	800485c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	78fa      	ldrb	r2, [r7, #3]
 8004346:	4611      	mov	r1, r2
 8004348:	4618      	mov	r0, r3
 800434a:	f003 fde8 	bl	8007f1e <USB_ReadChInterrupts>
 800434e:	4603      	mov	r3, r0
 8004350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004354:	2b80      	cmp	r3, #128	@ 0x80
 8004356:	d169      	bne.n	800442c <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	799b      	ldrb	r3, [r3, #6]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d111      	bne.n	8004384 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004360:	78fa      	ldrb	r2, [r7, #3]
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	4613      	mov	r3, r2
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	1a9b      	subs	r3, r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	334d      	adds	r3, #77	@ 0x4d
 8004370:	2207      	movs	r2, #7
 8004372:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	78fa      	ldrb	r2, [r7, #3]
 800437a:	4611      	mov	r1, r2
 800437c:	4618      	mov	r0, r3
 800437e:	f004 fb72 	bl	8008a66 <USB_HC_Halt>
 8004382:	e049      	b.n	8004418 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004384:	78fa      	ldrb	r2, [r7, #3]
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	3344      	adds	r3, #68	@ 0x44
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	1c59      	adds	r1, r3, #1
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	4613      	mov	r3, r2
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4403      	add	r3, r0
 80043a4:	3344      	adds	r3, #68	@ 0x44
 80043a6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80043a8:	78fa      	ldrb	r2, [r7, #3]
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	4613      	mov	r3, r2
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	1a9b      	subs	r3, r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	3344      	adds	r3, #68	@ 0x44
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d922      	bls.n	8004404 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80043be:	78fa      	ldrb	r2, [r7, #3]
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	3344      	adds	r3, #68	@ 0x44
 80043ce:	2200      	movs	r2, #0
 80043d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80043d2:	78fa      	ldrb	r2, [r7, #3]
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	1a9b      	subs	r3, r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	334c      	adds	r3, #76	@ 0x4c
 80043e2:	2204      	movs	r2, #4
 80043e4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80043e6:	78fa      	ldrb	r2, [r7, #3]
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	4613      	mov	r3, r2
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	1a9b      	subs	r3, r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	440b      	add	r3, r1
 80043f4:	334c      	adds	r3, #76	@ 0x4c
 80043f6:	781a      	ldrb	r2, [r3, #0]
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	4619      	mov	r1, r3
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f006 fe8b 	bl	800b118 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004402:	e009      	b.n	8004418 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004404:	78fa      	ldrb	r2, [r7, #3]
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	4613      	mov	r3, r2
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	334c      	adds	r3, #76	@ 0x4c
 8004414:	2202      	movs	r2, #2
 8004416:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	4413      	add	r3, r2
 8004420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004424:	461a      	mov	r2, r3
 8004426:	2380      	movs	r3, #128	@ 0x80
 8004428:	6093      	str	r3, [r2, #8]
 800442a:	e217      	b.n	800485c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	78fa      	ldrb	r2, [r7, #3]
 8004432:	4611      	mov	r1, r2
 8004434:	4618      	mov	r0, r3
 8004436:	f003 fd72 	bl	8007f1e <USB_ReadChInterrupts>
 800443a:	4603      	mov	r3, r0
 800443c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004440:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004444:	d11b      	bne.n	800447e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004446:	78fa      	ldrb	r2, [r7, #3]
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	1a9b      	subs	r3, r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	440b      	add	r3, r1
 8004454:	334d      	adds	r3, #77	@ 0x4d
 8004456:	2209      	movs	r2, #9
 8004458:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	78fa      	ldrb	r2, [r7, #3]
 8004460:	4611      	mov	r1, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f004 faff 	bl	8008a66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	4413      	add	r3, r2
 8004470:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004474:	461a      	mov	r2, r3
 8004476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800447a:	6093      	str	r3, [r2, #8]
 800447c:	e1ee      	b.n	800485c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	78fa      	ldrb	r2, [r7, #3]
 8004484:	4611      	mov	r1, r2
 8004486:	4618      	mov	r0, r3
 8004488:	f003 fd49 	bl	8007f1e <USB_ReadChInterrupts>
 800448c:	4603      	mov	r3, r0
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b02      	cmp	r3, #2
 8004494:	f040 81df 	bne.w	8004856 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044a4:	461a      	mov	r2, r3
 80044a6:	2302      	movs	r3, #2
 80044a8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80044aa:	78fa      	ldrb	r2, [r7, #3]
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	4613      	mov	r3, r2
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	1a9b      	subs	r3, r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	334d      	adds	r3, #77	@ 0x4d
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	f040 8093 	bne.w	80045e8 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044c2:	78fa      	ldrb	r2, [r7, #3]
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	1a9b      	subs	r3, r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	334d      	adds	r3, #77	@ 0x4d
 80044d2:	2202      	movs	r2, #2
 80044d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80044d6:	78fa      	ldrb	r2, [r7, #3]
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	334c      	adds	r3, #76	@ 0x4c
 80044e6:	2201      	movs	r2, #1
 80044e8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80044ea:	78fa      	ldrb	r2, [r7, #3]
 80044ec:	6879      	ldr	r1, [r7, #4]
 80044ee:	4613      	mov	r3, r2
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	1a9b      	subs	r3, r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	3326      	adds	r3, #38	@ 0x26
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d00b      	beq.n	8004518 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004500:	78fa      	ldrb	r2, [r7, #3]
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	4613      	mov	r3, r2
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	1a9b      	subs	r3, r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	3326      	adds	r3, #38	@ 0x26
 8004510:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004512:	2b03      	cmp	r3, #3
 8004514:	f040 8190 	bne.w	8004838 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	799b      	ldrb	r3, [r3, #6]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d115      	bne.n	800454c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004520:	78fa      	ldrb	r2, [r7, #3]
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	4613      	mov	r3, r2
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	1a9b      	subs	r3, r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	333d      	adds	r3, #61	@ 0x3d
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	78fa      	ldrb	r2, [r7, #3]
 8004534:	f083 0301 	eor.w	r3, r3, #1
 8004538:	b2d8      	uxtb	r0, r3
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	4613      	mov	r3, r2
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	1a9b      	subs	r3, r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	333d      	adds	r3, #61	@ 0x3d
 8004548:	4602      	mov	r2, r0
 800454a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	799b      	ldrb	r3, [r3, #6]
 8004550:	2b01      	cmp	r3, #1
 8004552:	f040 8171 	bne.w	8004838 <HCD_HC_OUT_IRQHandler+0x920>
 8004556:	78fa      	ldrb	r2, [r7, #3]
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	4613      	mov	r3, r2
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	3334      	adds	r3, #52	@ 0x34
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8165 	beq.w	8004838 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800456e:	78fa      	ldrb	r2, [r7, #3]
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	1a9b      	subs	r3, r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	3334      	adds	r3, #52	@ 0x34
 800457e:	6819      	ldr	r1, [r3, #0]
 8004580:	78fa      	ldrb	r2, [r7, #3]
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4403      	add	r3, r0
 800458e:	3328      	adds	r3, #40	@ 0x28
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	440b      	add	r3, r1
 8004594:	1e59      	subs	r1, r3, #1
 8004596:	78fa      	ldrb	r2, [r7, #3]
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4403      	add	r3, r0
 80045a4:	3328      	adds	r3, #40	@ 0x28
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80045ac:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 813f 	beq.w	8004838 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	333d      	adds	r3, #61	@ 0x3d
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	78fa      	ldrb	r2, [r7, #3]
 80045ce:	f083 0301 	eor.w	r3, r3, #1
 80045d2:	b2d8      	uxtb	r0, r3
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	1a9b      	subs	r3, r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	333d      	adds	r3, #61	@ 0x3d
 80045e2:	4602      	mov	r2, r0
 80045e4:	701a      	strb	r2, [r3, #0]
 80045e6:	e127      	b.n	8004838 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80045e8:	78fa      	ldrb	r2, [r7, #3]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	334d      	adds	r3, #77	@ 0x4d
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d120      	bne.n	8004640 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045fe:	78fa      	ldrb	r2, [r7, #3]
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	1a9b      	subs	r3, r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	334d      	adds	r3, #77	@ 0x4d
 800460e:	2202      	movs	r2, #2
 8004610:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004612:	78fa      	ldrb	r2, [r7, #3]
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	4613      	mov	r3, r2
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	1a9b      	subs	r3, r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	331b      	adds	r3, #27
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b01      	cmp	r3, #1
 8004626:	f040 8107 	bne.w	8004838 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800462a:	78fa      	ldrb	r2, [r7, #3]
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	4613      	mov	r3, r2
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	1a9b      	subs	r3, r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	440b      	add	r3, r1
 8004638:	334c      	adds	r3, #76	@ 0x4c
 800463a:	2202      	movs	r2, #2
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	e0fb      	b.n	8004838 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004640:	78fa      	ldrb	r2, [r7, #3]
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	1a9b      	subs	r3, r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	334d      	adds	r3, #77	@ 0x4d
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b04      	cmp	r3, #4
 8004654:	d13a      	bne.n	80046cc <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004656:	78fa      	ldrb	r2, [r7, #3]
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	1a9b      	subs	r3, r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	440b      	add	r3, r1
 8004664:	334d      	adds	r3, #77	@ 0x4d
 8004666:	2202      	movs	r2, #2
 8004668:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800466a:	78fa      	ldrb	r2, [r7, #3]
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	4613      	mov	r3, r2
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	1a9b      	subs	r3, r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	440b      	add	r3, r1
 8004678:	334c      	adds	r3, #76	@ 0x4c
 800467a:	2202      	movs	r2, #2
 800467c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800467e:	78fa      	ldrb	r2, [r7, #3]
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	4613      	mov	r3, r2
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	1a9b      	subs	r3, r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	331b      	adds	r3, #27
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b01      	cmp	r3, #1
 8004692:	f040 80d1 	bne.w	8004838 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004696:	78fa      	ldrb	r2, [r7, #3]
 8004698:	6879      	ldr	r1, [r7, #4]
 800469a:	4613      	mov	r3, r2
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	1a9b      	subs	r3, r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	440b      	add	r3, r1
 80046a4:	331b      	adds	r3, #27
 80046a6:	2200      	movs	r2, #0
 80046a8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80046aa:	78fb      	ldrb	r3, [r7, #3]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	78fa      	ldrb	r2, [r7, #3]
 80046ba:	0151      	lsls	r1, r2, #5
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	440a      	add	r2, r1
 80046c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046c8:	6053      	str	r3, [r2, #4]
 80046ca:	e0b5      	b.n	8004838 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80046cc:	78fa      	ldrb	r2, [r7, #3]
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	4613      	mov	r3, r2
 80046d2:	011b      	lsls	r3, r3, #4
 80046d4:	1a9b      	subs	r3, r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	334d      	adds	r3, #77	@ 0x4d
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b05      	cmp	r3, #5
 80046e0:	d114      	bne.n	800470c <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046e2:	78fa      	ldrb	r2, [r7, #3]
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	4613      	mov	r3, r2
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	1a9b      	subs	r3, r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	440b      	add	r3, r1
 80046f0:	334d      	adds	r3, #77	@ 0x4d
 80046f2:	2202      	movs	r2, #2
 80046f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80046f6:	78fa      	ldrb	r2, [r7, #3]
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	4613      	mov	r3, r2
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	440b      	add	r3, r1
 8004704:	334c      	adds	r3, #76	@ 0x4c
 8004706:	2202      	movs	r2, #2
 8004708:	701a      	strb	r2, [r3, #0]
 800470a:	e095      	b.n	8004838 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800470c:	78fa      	ldrb	r2, [r7, #3]
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	4613      	mov	r3, r2
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	334d      	adds	r3, #77	@ 0x4d
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2b06      	cmp	r3, #6
 8004720:	d114      	bne.n	800474c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004722:	78fa      	ldrb	r2, [r7, #3]
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	1a9b      	subs	r3, r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	334d      	adds	r3, #77	@ 0x4d
 8004732:	2202      	movs	r2, #2
 8004734:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004736:	78fa      	ldrb	r2, [r7, #3]
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	4613      	mov	r3, r2
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	1a9b      	subs	r3, r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	334c      	adds	r3, #76	@ 0x4c
 8004746:	2205      	movs	r2, #5
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	e075      	b.n	8004838 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800474c:	78fa      	ldrb	r2, [r7, #3]
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	1a9b      	subs	r3, r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	334d      	adds	r3, #77	@ 0x4d
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	2b07      	cmp	r3, #7
 8004760:	d00a      	beq.n	8004778 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004762:	78fa      	ldrb	r2, [r7, #3]
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	1a9b      	subs	r3, r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	334d      	adds	r3, #77	@ 0x4d
 8004772:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004774:	2b09      	cmp	r3, #9
 8004776:	d170      	bne.n	800485a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004778:	78fa      	ldrb	r2, [r7, #3]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	334d      	adds	r3, #77	@ 0x4d
 8004788:	2202      	movs	r2, #2
 800478a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800478c:	78fa      	ldrb	r2, [r7, #3]
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	1a9b      	subs	r3, r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	3344      	adds	r3, #68	@ 0x44
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	1c59      	adds	r1, r3, #1
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	4613      	mov	r3, r2
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	1a9b      	subs	r3, r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4403      	add	r3, r0
 80047ac:	3344      	adds	r3, #68	@ 0x44
 80047ae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047b0:	78fa      	ldrb	r2, [r7, #3]
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	4613      	mov	r3, r2
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	1a9b      	subs	r3, r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	3344      	adds	r3, #68	@ 0x44
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d914      	bls.n	80047f0 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80047c6:	78fa      	ldrb	r2, [r7, #3]
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	1a9b      	subs	r3, r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	440b      	add	r3, r1
 80047d4:	3344      	adds	r3, #68	@ 0x44
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80047da:	78fa      	ldrb	r2, [r7, #3]
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	4613      	mov	r3, r2
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	440b      	add	r3, r1
 80047e8:	334c      	adds	r3, #76	@ 0x4c
 80047ea:	2204      	movs	r2, #4
 80047ec:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047ee:	e022      	b.n	8004836 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80047f0:	78fa      	ldrb	r2, [r7, #3]
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	4613      	mov	r3, r2
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	1a9b      	subs	r3, r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	334c      	adds	r3, #76	@ 0x4c
 8004800:	2202      	movs	r2, #2
 8004802:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	4413      	add	r3, r2
 800480c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800481a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004822:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	4413      	add	r3, r2
 800482c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004830:	461a      	mov	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004836:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004838:	78fa      	ldrb	r2, [r7, #3]
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	4613      	mov	r3, r2
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	1a9b      	subs	r3, r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	334c      	adds	r3, #76	@ 0x4c
 8004848:	781a      	ldrb	r2, [r3, #0]
 800484a:	78fb      	ldrb	r3, [r7, #3]
 800484c:	4619      	mov	r1, r3
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f006 fc62 	bl	800b118 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004854:	e002      	b.n	800485c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004856:	bf00      	nop
 8004858:	e000      	b.n	800485c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800485a:	bf00      	nop
  }
}
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b08a      	sub	sp, #40	@ 0x28
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004872:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	0c5b      	lsrs	r3, r3, #17
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	091b      	lsrs	r3, r3, #4
 8004892:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004896:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2b02      	cmp	r3, #2
 800489c:	d004      	beq.n	80048a8 <HCD_RXQLVL_IRQHandler+0x46>
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b05      	cmp	r3, #5
 80048a2:	f000 80b6 	beq.w	8004a12 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80048a6:	e0b7      	b.n	8004a18 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 80b3 	beq.w	8004a16 <HCD_RXQLVL_IRQHandler+0x1b4>
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	4613      	mov	r3, r2
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	1a9b      	subs	r3, r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	440b      	add	r3, r1
 80048be:	332c      	adds	r3, #44	@ 0x2c
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 80a7 	beq.w	8004a16 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4613      	mov	r3, r2
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	1a9b      	subs	r3, r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	440b      	add	r3, r1
 80048d6:	3338      	adds	r3, #56	@ 0x38
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	18d1      	adds	r1, r2, r3
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4613      	mov	r3, r2
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	1a9b      	subs	r3, r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4403      	add	r3, r0
 80048ec:	3334      	adds	r3, #52	@ 0x34
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4299      	cmp	r1, r3
 80048f2:	f200 8083 	bhi.w	80049fc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6818      	ldr	r0, [r3, #0]
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	4613      	mov	r3, r2
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	1a9b      	subs	r3, r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	332c      	adds	r3, #44	@ 0x2c
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	b292      	uxth	r2, r2
 8004910:	4619      	mov	r1, r3
 8004912:	f003 fa99 	bl	8007e48 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	4613      	mov	r3, r2
 800491c:	011b      	lsls	r3, r3, #4
 800491e:	1a9b      	subs	r3, r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	440b      	add	r3, r1
 8004924:	332c      	adds	r3, #44	@ 0x2c
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	18d1      	adds	r1, r2, r3
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	4613      	mov	r3, r2
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	1a9b      	subs	r3, r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4403      	add	r3, r0
 800493a:	332c      	adds	r3, #44	@ 0x2c
 800493c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	4613      	mov	r3, r2
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	440b      	add	r3, r1
 800494c:	3338      	adds	r3, #56	@ 0x38
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	18d1      	adds	r1, r2, r3
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	4613      	mov	r3, r2
 800495a:	011b      	lsls	r3, r3, #4
 800495c:	1a9b      	subs	r3, r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4403      	add	r3, r0
 8004962:	3338      	adds	r3, #56	@ 0x38
 8004964:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	4413      	add	r3, r2
 800496e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	0cdb      	lsrs	r3, r3, #19
 8004976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800497a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	4613      	mov	r3, r2
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	1a9b      	subs	r3, r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	3328      	adds	r3, #40	@ 0x28
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	4293      	cmp	r3, r2
 8004994:	d13f      	bne.n	8004a16 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d03c      	beq.n	8004a16 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80049b2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80049ba:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049c8:	461a      	mov	r2, r3
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	4613      	mov	r3, r2
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	1a9b      	subs	r3, r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	440b      	add	r3, r1
 80049dc:	333c      	adds	r3, #60	@ 0x3c
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	f083 0301 	eor.w	r3, r3, #1
 80049e4:	b2d8      	uxtb	r0, r3
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4613      	mov	r3, r2
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	440b      	add	r3, r1
 80049f4:	333c      	adds	r3, #60	@ 0x3c
 80049f6:	4602      	mov	r2, r0
 80049f8:	701a      	strb	r2, [r3, #0]
      break;
 80049fa:	e00c      	b.n	8004a16 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4613      	mov	r3, r2
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	1a9b      	subs	r3, r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	440b      	add	r3, r1
 8004a0a:	334c      	adds	r3, #76	@ 0x4c
 8004a0c:	2204      	movs	r2, #4
 8004a0e:	701a      	strb	r2, [r3, #0]
      break;
 8004a10:	e001      	b.n	8004a16 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004a12:	bf00      	nop
 8004a14:	e000      	b.n	8004a18 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004a16:	bf00      	nop
  }
}
 8004a18:	bf00      	nop
 8004a1a:	3728      	adds	r7, #40	@ 0x28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004a4c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d10b      	bne.n	8004a70 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d102      	bne.n	8004a68 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f006 fb3c 	bl	800b0e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f043 0302 	orr.w	r3, r3, #2
 8004a6e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d132      	bne.n	8004ae0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f043 0308 	orr.w	r3, r3, #8
 8004a80:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d126      	bne.n	8004ada <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	7a5b      	ldrb	r3, [r3, #9]
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d113      	bne.n	8004abc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004a9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a9e:	d106      	bne.n	8004aae <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2102      	movs	r1, #2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f003 fb5e 	bl	8008168 <USB_InitFSLSPClkSel>
 8004aac:	e011      	b.n	8004ad2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f003 fb57 	bl	8008168 <USB_InitFSLSPClkSel>
 8004aba:	e00a      	b.n	8004ad2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	79db      	ldrb	r3, [r3, #7]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d106      	bne.n	8004ad2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004aca:	461a      	mov	r2, r3
 8004acc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004ad0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f006 fb2e 	bl	800b134 <HAL_HCD_PortEnabled_Callback>
 8004ad8:	e002      	b.n	8004ae0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f006 fb38 	bl	800b150 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b20      	cmp	r3, #32
 8004ae8:	d103      	bne.n	8004af2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f043 0320 	orr.w	r3, r3, #32
 8004af0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004af8:	461a      	mov	r2, r3
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	6013      	str	r3, [r2, #0]
}
 8004afe:	bf00      	nop
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e12b      	b.n	8004d72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fc ffda 	bl	8001ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2224      	movs	r2, #36	@ 0x24
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0201 	bic.w	r2, r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b6c:	f001 fa20 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8004b70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	4a81      	ldr	r2, [pc, #516]	@ (8004d7c <HAL_I2C_Init+0x274>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d807      	bhi.n	8004b8c <HAL_I2C_Init+0x84>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4a80      	ldr	r2, [pc, #512]	@ (8004d80 <HAL_I2C_Init+0x278>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	bf94      	ite	ls
 8004b84:	2301      	movls	r3, #1
 8004b86:	2300      	movhi	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	e006      	b.n	8004b9a <HAL_I2C_Init+0x92>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4a7d      	ldr	r2, [pc, #500]	@ (8004d84 <HAL_I2C_Init+0x27c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	bf94      	ite	ls
 8004b94:	2301      	movls	r3, #1
 8004b96:	2300      	movhi	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e0e7      	b.n	8004d72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4a78      	ldr	r2, [pc, #480]	@ (8004d88 <HAL_I2C_Init+0x280>)
 8004ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8004baa:	0c9b      	lsrs	r3, r3, #18
 8004bac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	4a6a      	ldr	r2, [pc, #424]	@ (8004d7c <HAL_I2C_Init+0x274>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d802      	bhi.n	8004bdc <HAL_I2C_Init+0xd4>
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	e009      	b.n	8004bf0 <HAL_I2C_Init+0xe8>
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004be2:	fb02 f303 	mul.w	r3, r2, r3
 8004be6:	4a69      	ldr	r2, [pc, #420]	@ (8004d8c <HAL_I2C_Init+0x284>)
 8004be8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bec:	099b      	lsrs	r3, r3, #6
 8004bee:	3301      	adds	r3, #1
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6812      	ldr	r2, [r2, #0]
 8004bf4:	430b      	orrs	r3, r1
 8004bf6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004c02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	495c      	ldr	r1, [pc, #368]	@ (8004d7c <HAL_I2C_Init+0x274>)
 8004c0c:	428b      	cmp	r3, r1
 8004c0e:	d819      	bhi.n	8004c44 <HAL_I2C_Init+0x13c>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	1e59      	subs	r1, r3, #1
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c1e:	1c59      	adds	r1, r3, #1
 8004c20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004c24:	400b      	ands	r3, r1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00a      	beq.n	8004c40 <HAL_I2C_Init+0x138>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	1e59      	subs	r1, r3, #1
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c38:	3301      	adds	r3, #1
 8004c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c3e:	e051      	b.n	8004ce4 <HAL_I2C_Init+0x1dc>
 8004c40:	2304      	movs	r3, #4
 8004c42:	e04f      	b.n	8004ce4 <HAL_I2C_Init+0x1dc>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d111      	bne.n	8004c70 <HAL_I2C_Init+0x168>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	1e58      	subs	r0, r3, #1
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6859      	ldr	r1, [r3, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	005b      	lsls	r3, r3, #1
 8004c58:	440b      	add	r3, r1
 8004c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c5e:	3301      	adds	r3, #1
 8004c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	bf0c      	ite	eq
 8004c68:	2301      	moveq	r3, #1
 8004c6a:	2300      	movne	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	e012      	b.n	8004c96 <HAL_I2C_Init+0x18e>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	1e58      	subs	r0, r3, #1
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6859      	ldr	r1, [r3, #4]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	0099      	lsls	r1, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c86:	3301      	adds	r3, #1
 8004c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	bf0c      	ite	eq
 8004c90:	2301      	moveq	r3, #1
 8004c92:	2300      	movne	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <HAL_I2C_Init+0x196>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e022      	b.n	8004ce4 <HAL_I2C_Init+0x1dc>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10e      	bne.n	8004cc4 <HAL_I2C_Init+0x1bc>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1e58      	subs	r0, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6859      	ldr	r1, [r3, #4]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	440b      	add	r3, r1
 8004cb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cb8:	3301      	adds	r3, #1
 8004cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cc2:	e00f      	b.n	8004ce4 <HAL_I2C_Init+0x1dc>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	1e58      	subs	r0, r3, #1
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6859      	ldr	r1, [r3, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	0099      	lsls	r1, r3, #2
 8004cd4:	440b      	add	r3, r1
 8004cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cda:	3301      	adds	r3, #1
 8004cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ce0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	6809      	ldr	r1, [r1, #0]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69da      	ldr	r2, [r3, #28]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004d12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6911      	ldr	r1, [r2, #16]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	68d2      	ldr	r2, [r2, #12]
 8004d1e:	4311      	orrs	r1, r2
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6812      	ldr	r2, [r2, #0]
 8004d24:	430b      	orrs	r3, r1
 8004d26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	695a      	ldr	r2, [r3, #20]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	000186a0 	.word	0x000186a0
 8004d80:	001e847f 	.word	0x001e847f
 8004d84:	003d08ff 	.word	0x003d08ff
 8004d88:	431bde83 	.word	0x431bde83
 8004d8c:	10624dd3 	.word	0x10624dd3

08004d90 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e128      	b.n	8004ff4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d109      	bne.n	8004dc2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a90      	ldr	r2, [pc, #576]	@ (8004ffc <HAL_I2S_Init+0x26c>)
 8004dba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7fc fedb 	bl	8001b78 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004dd8:	f023 030f 	bic.w	r3, r3, #15
 8004ddc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2202      	movs	r2, #2
 8004de4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d060      	beq.n	8004eb0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d102      	bne.n	8004dfc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004df6:	2310      	movs	r3, #16
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	e001      	b.n	8004e00 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004dfc:	2320      	movs	r3, #32
 8004dfe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	2b20      	cmp	r3, #32
 8004e06:	d802      	bhi.n	8004e0e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004e0e:	2001      	movs	r0, #1
 8004e10:	f001 f9d8 	bl	80061c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e14:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e1e:	d125      	bne.n	8004e6c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d010      	beq.n	8004e4a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e44:	3305      	adds	r3, #5
 8004e46:	613b      	str	r3, [r7, #16]
 8004e48:	e01f      	b.n	8004e8a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e66:	3305      	adds	r3, #5
 8004e68:	613b      	str	r3, [r7, #16]
 8004e6a:	e00e      	b.n	8004e8a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	3305      	adds	r3, #5
 8004e88:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	4a5c      	ldr	r2, [pc, #368]	@ (8005000 <HAL_I2S_Init+0x270>)
 8004e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e92:	08db      	lsrs	r3, r3, #3
 8004e94:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	085b      	lsrs	r3, r3, #1
 8004ea6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	021b      	lsls	r3, r3, #8
 8004eac:	61bb      	str	r3, [r7, #24]
 8004eae:	e003      	b.n	8004eb8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d902      	bls.n	8004ec4 <HAL_I2S_Init+0x134>
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	2bff      	cmp	r3, #255	@ 0xff
 8004ec2:	d907      	bls.n	8004ed4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec8:	f043 0210 	orr.w	r2, r3, #16
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e08f      	b.n	8004ff4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	ea42 0103 	orr.w	r1, r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004ef2:	f023 030f 	bic.w	r3, r3, #15
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6851      	ldr	r1, [r2, #4]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6892      	ldr	r2, [r2, #8]
 8004efe:	4311      	orrs	r1, r2
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	68d2      	ldr	r2, [r2, #12]
 8004f04:	4311      	orrs	r1, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6992      	ldr	r2, [r2, #24]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f16:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d161      	bne.n	8004fe4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a38      	ldr	r2, [pc, #224]	@ (8005004 <HAL_I2S_Init+0x274>)
 8004f24:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a37      	ldr	r2, [pc, #220]	@ (8005008 <HAL_I2S_Init+0x278>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d101      	bne.n	8004f34 <HAL_I2S_Init+0x1a4>
 8004f30:	4b36      	ldr	r3, [pc, #216]	@ (800500c <HAL_I2S_Init+0x27c>)
 8004f32:	e001      	b.n	8004f38 <HAL_I2S_Init+0x1a8>
 8004f34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6812      	ldr	r2, [r2, #0]
 8004f3e:	4932      	ldr	r1, [pc, #200]	@ (8005008 <HAL_I2S_Init+0x278>)
 8004f40:	428a      	cmp	r2, r1
 8004f42:	d101      	bne.n	8004f48 <HAL_I2S_Init+0x1b8>
 8004f44:	4a31      	ldr	r2, [pc, #196]	@ (800500c <HAL_I2S_Init+0x27c>)
 8004f46:	e001      	b.n	8004f4c <HAL_I2S_Init+0x1bc>
 8004f48:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004f4c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004f50:	f023 030f 	bic.w	r3, r3, #15
 8004f54:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a2b      	ldr	r2, [pc, #172]	@ (8005008 <HAL_I2S_Init+0x278>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d101      	bne.n	8004f64 <HAL_I2S_Init+0x1d4>
 8004f60:	4b2a      	ldr	r3, [pc, #168]	@ (800500c <HAL_I2S_Init+0x27c>)
 8004f62:	e001      	b.n	8004f68 <HAL_I2S_Init+0x1d8>
 8004f64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f68:	2202      	movs	r2, #2
 8004f6a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a25      	ldr	r2, [pc, #148]	@ (8005008 <HAL_I2S_Init+0x278>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d101      	bne.n	8004f7a <HAL_I2S_Init+0x1ea>
 8004f76:	4b25      	ldr	r3, [pc, #148]	@ (800500c <HAL_I2S_Init+0x27c>)
 8004f78:	e001      	b.n	8004f7e <HAL_I2S_Init+0x1ee>
 8004f7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f8a:	d003      	beq.n	8004f94 <HAL_I2S_Init+0x204>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d103      	bne.n	8004f9c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004f94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f98:	613b      	str	r3, [r7, #16]
 8004f9a:	e001      	b.n	8004fa0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004faa:	4313      	orrs	r3, r2
 8004fac:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	897b      	ldrh	r3, [r7, #10]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004fcc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a0d      	ldr	r2, [pc, #52]	@ (8005008 <HAL_I2S_Init+0x278>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d101      	bne.n	8004fdc <HAL_I2S_Init+0x24c>
 8004fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800500c <HAL_I2S_Init+0x27c>)
 8004fda:	e001      	b.n	8004fe0 <HAL_I2S_Init+0x250>
 8004fdc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fe0:	897a      	ldrh	r2, [r7, #10]
 8004fe2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3720      	adds	r7, #32
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	08005107 	.word	0x08005107
 8005000:	cccccccd 	.word	0xcccccccd
 8005004:	0800521d 	.word	0x0800521d
 8005008:	40003800 	.word	0x40003800
 800500c:	40003400 	.word	0x40003400

08005010 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005058:	881a      	ldrh	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005064:	1c9a      	adds	r2, r3, #2
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800506e:	b29b      	uxth	r3, r3
 8005070:	3b01      	subs	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10e      	bne.n	80050a0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005090:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7ff ffb8 	bl	8005010 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80050a0:	bf00      	nop
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ba:	b292      	uxth	r2, r2
 80050bc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c2:	1c9a      	adds	r2, r3, #2
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80050da:	b29b      	uxth	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10e      	bne.n	80050fe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80050ee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f7ff ff93 	bl	8005024 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80050fe:	bf00      	nop
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b086      	sub	sp, #24
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b04      	cmp	r3, #4
 8005120:	d13a      	bne.n	8005198 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b01      	cmp	r3, #1
 800512a:	d109      	bne.n	8005140 <I2S_IRQHandler+0x3a>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005136:	2b40      	cmp	r3, #64	@ 0x40
 8005138:	d102      	bne.n	8005140 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7ff ffb4 	bl	80050a8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005146:	2b40      	cmp	r3, #64	@ 0x40
 8005148:	d126      	bne.n	8005198 <I2S_IRQHandler+0x92>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b20      	cmp	r3, #32
 8005156:	d11f      	bne.n	8005198 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005166:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005168:	2300      	movs	r3, #0
 800516a:	613b      	str	r3, [r7, #16]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	613b      	str	r3, [r7, #16]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	613b      	str	r3, [r7, #16]
 800517c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800518a:	f043 0202 	orr.w	r2, r3, #2
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7ff ff50 	bl	8005038 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d136      	bne.n	8005212 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d109      	bne.n	80051c2 <I2S_IRQHandler+0xbc>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051b8:	2b80      	cmp	r3, #128	@ 0x80
 80051ba:	d102      	bne.n	80051c2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f7ff ff45 	bl	800504c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d122      	bne.n	8005212 <I2S_IRQHandler+0x10c>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b20      	cmp	r3, #32
 80051d8:	d11b      	bne.n	8005212 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80051e8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005204:	f043 0204 	orr.w	r2, r3, #4
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7ff ff13 	bl	8005038 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005212:	bf00      	nop
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a92      	ldr	r2, [pc, #584]	@ (800547c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d101      	bne.n	800523a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005236:	4b92      	ldr	r3, [pc, #584]	@ (8005480 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005238:	e001      	b.n	800523e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800523a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a8b      	ldr	r2, [pc, #556]	@ (800547c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d101      	bne.n	8005258 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005254:	4b8a      	ldr	r3, [pc, #552]	@ (8005480 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005256:	e001      	b.n	800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005258:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005268:	d004      	beq.n	8005274 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	f040 8099 	bne.w	80053a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b02      	cmp	r3, #2
 800527c:	d107      	bne.n	800528e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 f925 	bl	80054d8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b01      	cmp	r3, #1
 8005296:	d107      	bne.n	80052a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f9c8 	bl	8005638 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ae:	2b40      	cmp	r3, #64	@ 0x40
 80052b0:	d13a      	bne.n	8005328 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f003 0320 	and.w	r3, r3, #32
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d035      	beq.n	8005328 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a6e      	ldr	r2, [pc, #440]	@ (800547c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d101      	bne.n	80052ca <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80052c6:	4b6e      	ldr	r3, [pc, #440]	@ (8005480 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80052c8:	e001      	b.n	80052ce <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80052ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4969      	ldr	r1, [pc, #420]	@ (800547c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80052d6:	428b      	cmp	r3, r1
 80052d8:	d101      	bne.n	80052de <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80052da:	4b69      	ldr	r3, [pc, #420]	@ (8005480 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80052dc:	e001      	b.n	80052e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80052de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052e2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80052e6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80052f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80052f8:	2300      	movs	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531a:	f043 0202 	orr.w	r2, r3, #2
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7ff fe88 	bl	8005038 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f003 0308 	and.w	r3, r3, #8
 800532e:	2b08      	cmp	r3, #8
 8005330:	f040 80c3 	bne.w	80054ba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f003 0320 	and.w	r3, r3, #32
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 80bd 	beq.w	80054ba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800534e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a49      	ldr	r2, [pc, #292]	@ (800547c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d101      	bne.n	800535e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800535a:	4b49      	ldr	r3, [pc, #292]	@ (8005480 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800535c:	e001      	b.n	8005362 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800535e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4944      	ldr	r1, [pc, #272]	@ (800547c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800536a:	428b      	cmp	r3, r1
 800536c:	d101      	bne.n	8005372 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800536e:	4b44      	ldr	r3, [pc, #272]	@ (8005480 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005370:	e001      	b.n	8005376 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005372:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005376:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800537a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800537c:	2300      	movs	r3, #0
 800537e:	60bb      	str	r3, [r7, #8]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	60bb      	str	r3, [r7, #8]
 8005388:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005396:	f043 0204 	orr.w	r2, r3, #4
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7ff fe4a 	bl	8005038 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80053a4:	e089      	b.n	80054ba <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d107      	bne.n	80053c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f8be 	bl	800553c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d107      	bne.n	80053da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d002      	beq.n	80053da <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f8fd 	bl	80055d4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e0:	2b40      	cmp	r3, #64	@ 0x40
 80053e2:	d12f      	bne.n	8005444 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d02a      	beq.n	8005444 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80053fc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a1e      	ldr	r2, [pc, #120]	@ (800547c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d101      	bne.n	800540c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005408:	4b1d      	ldr	r3, [pc, #116]	@ (8005480 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800540a:	e001      	b.n	8005410 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800540c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4919      	ldr	r1, [pc, #100]	@ (800547c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005418:	428b      	cmp	r3, r1
 800541a:	d101      	bne.n	8005420 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800541c:	4b18      	ldr	r3, [pc, #96]	@ (8005480 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800541e:	e001      	b.n	8005424 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005420:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005424:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005428:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005436:	f043 0202 	orr.w	r2, r3, #2
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7ff fdfa 	bl	8005038 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b08      	cmp	r3, #8
 800544c:	d136      	bne.n	80054bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f003 0320 	and.w	r3, r3, #32
 8005454:	2b00      	cmp	r3, #0
 8005456:	d031      	beq.n	80054bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a07      	ldr	r2, [pc, #28]	@ (800547c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d101      	bne.n	8005466 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005462:	4b07      	ldr	r3, [pc, #28]	@ (8005480 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005464:	e001      	b.n	800546a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005466:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4902      	ldr	r1, [pc, #8]	@ (800547c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005472:	428b      	cmp	r3, r1
 8005474:	d106      	bne.n	8005484 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005476:	4b02      	ldr	r3, [pc, #8]	@ (8005480 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005478:	e006      	b.n	8005488 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800547a:	bf00      	nop
 800547c:	40003800 	.word	0x40003800
 8005480:	40003400 	.word	0x40003400
 8005484:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005488:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800548c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800549c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054aa:	f043 0204 	orr.w	r2, r3, #4
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7ff fdc0 	bl	8005038 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80054b8:	e000      	b.n	80054bc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80054ba:	bf00      	nop
}
 80054bc:	bf00      	nop
 80054be:	3720      	adds	r7, #32
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e4:	1c99      	adds	r1, r3, #2
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6251      	str	r1, [r2, #36]	@ 0x24
 80054ea:	881a      	ldrh	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	3b01      	subs	r3, #1
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005504:	b29b      	uxth	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d113      	bne.n	8005532 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005518:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800551e:	b29b      	uxth	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d106      	bne.n	8005532 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff ffc9 	bl	80054c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005532:	bf00      	nop
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005548:	1c99      	adds	r1, r3, #2
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6251      	str	r1, [r2, #36]	@ 0x24
 800554e:	8819      	ldrh	r1, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a1d      	ldr	r2, [pc, #116]	@ (80055cc <I2SEx_TxISR_I2SExt+0x90>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d101      	bne.n	800555e <I2SEx_TxISR_I2SExt+0x22>
 800555a:	4b1d      	ldr	r3, [pc, #116]	@ (80055d0 <I2SEx_TxISR_I2SExt+0x94>)
 800555c:	e001      	b.n	8005562 <I2SEx_TxISR_I2SExt+0x26>
 800555e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005562:	460a      	mov	r2, r1
 8005564:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b29a      	uxth	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005578:	b29b      	uxth	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d121      	bne.n	80055c2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a12      	ldr	r2, [pc, #72]	@ (80055cc <I2SEx_TxISR_I2SExt+0x90>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d101      	bne.n	800558c <I2SEx_TxISR_I2SExt+0x50>
 8005588:	4b11      	ldr	r3, [pc, #68]	@ (80055d0 <I2SEx_TxISR_I2SExt+0x94>)
 800558a:	e001      	b.n	8005590 <I2SEx_TxISR_I2SExt+0x54>
 800558c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	490d      	ldr	r1, [pc, #52]	@ (80055cc <I2SEx_TxISR_I2SExt+0x90>)
 8005598:	428b      	cmp	r3, r1
 800559a:	d101      	bne.n	80055a0 <I2SEx_TxISR_I2SExt+0x64>
 800559c:	4b0c      	ldr	r3, [pc, #48]	@ (80055d0 <I2SEx_TxISR_I2SExt+0x94>)
 800559e:	e001      	b.n	80055a4 <I2SEx_TxISR_I2SExt+0x68>
 80055a0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055a4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80055a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d106      	bne.n	80055c2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7ff ff81 	bl	80054c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80055c2:	bf00      	nop
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40003800 	.word	0x40003800
 80055d0:	40003400 	.word	0x40003400

080055d4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68d8      	ldr	r0, [r3, #12]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e6:	1c99      	adds	r1, r3, #2
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80055ec:	b282      	uxth	r2, r0
 80055ee:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d113      	bne.n	8005630 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005616:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7ff ff4a 	bl	80054c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005630:	bf00      	nop
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a20      	ldr	r2, [pc, #128]	@ (80056c8 <I2SEx_RxISR_I2SExt+0x90>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d101      	bne.n	800564e <I2SEx_RxISR_I2SExt+0x16>
 800564a:	4b20      	ldr	r3, [pc, #128]	@ (80056cc <I2SEx_RxISR_I2SExt+0x94>)
 800564c:	e001      	b.n	8005652 <I2SEx_RxISR_I2SExt+0x1a>
 800564e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005652:	68d8      	ldr	r0, [r3, #12]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005658:	1c99      	adds	r1, r3, #2
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800565e:	b282      	uxth	r2, r0
 8005660:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005666:	b29b      	uxth	r3, r3
 8005668:	3b01      	subs	r3, #1
 800566a:	b29a      	uxth	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005674:	b29b      	uxth	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d121      	bne.n	80056be <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a12      	ldr	r2, [pc, #72]	@ (80056c8 <I2SEx_RxISR_I2SExt+0x90>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d101      	bne.n	8005688 <I2SEx_RxISR_I2SExt+0x50>
 8005684:	4b11      	ldr	r3, [pc, #68]	@ (80056cc <I2SEx_RxISR_I2SExt+0x94>)
 8005686:	e001      	b.n	800568c <I2SEx_RxISR_I2SExt+0x54>
 8005688:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	490d      	ldr	r1, [pc, #52]	@ (80056c8 <I2SEx_RxISR_I2SExt+0x90>)
 8005694:	428b      	cmp	r3, r1
 8005696:	d101      	bne.n	800569c <I2SEx_RxISR_I2SExt+0x64>
 8005698:	4b0c      	ldr	r3, [pc, #48]	@ (80056cc <I2SEx_RxISR_I2SExt+0x94>)
 800569a:	e001      	b.n	80056a0 <I2SEx_RxISR_I2SExt+0x68>
 800569c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056a0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80056a4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d106      	bne.n	80056be <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff ff03 	bl	80054c4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80056be:	bf00      	nop
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	40003800 	.word	0x40003800
 80056cc:	40003400 	.word	0x40003400

080056d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e267      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d075      	beq.n	80057da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056ee:	4b88      	ldr	r3, [pc, #544]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 030c 	and.w	r3, r3, #12
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d00c      	beq.n	8005714 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056fa:	4b85      	ldr	r3, [pc, #532]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005702:	2b08      	cmp	r3, #8
 8005704:	d112      	bne.n	800572c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005706:	4b82      	ldr	r3, [pc, #520]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800570e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005712:	d10b      	bne.n	800572c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005714:	4b7e      	ldr	r3, [pc, #504]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d05b      	beq.n	80057d8 <HAL_RCC_OscConfig+0x108>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d157      	bne.n	80057d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e242      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005734:	d106      	bne.n	8005744 <HAL_RCC_OscConfig+0x74>
 8005736:	4b76      	ldr	r3, [pc, #472]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a75      	ldr	r2, [pc, #468]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 800573c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	e01d      	b.n	8005780 <HAL_RCC_OscConfig+0xb0>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800574c:	d10c      	bne.n	8005768 <HAL_RCC_OscConfig+0x98>
 800574e:	4b70      	ldr	r3, [pc, #448]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a6f      	ldr	r2, [pc, #444]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 8005754:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	4b6d      	ldr	r3, [pc, #436]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a6c      	ldr	r2, [pc, #432]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 8005760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	e00b      	b.n	8005780 <HAL_RCC_OscConfig+0xb0>
 8005768:	4b69      	ldr	r3, [pc, #420]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a68      	ldr	r2, [pc, #416]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 800576e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005772:	6013      	str	r3, [r2, #0]
 8005774:	4b66      	ldr	r3, [pc, #408]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a65      	ldr	r2, [pc, #404]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 800577a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800577e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d013      	beq.n	80057b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005788:	f7fc fd02 	bl	8002190 <HAL_GetTick>
 800578c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005790:	f7fc fcfe 	bl	8002190 <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b64      	cmp	r3, #100	@ 0x64
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e207      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057a2:	4b5b      	ldr	r3, [pc, #364]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0f0      	beq.n	8005790 <HAL_RCC_OscConfig+0xc0>
 80057ae:	e014      	b.n	80057da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b0:	f7fc fcee 	bl	8002190 <HAL_GetTick>
 80057b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057b8:	f7fc fcea 	bl	8002190 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b64      	cmp	r3, #100	@ 0x64
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e1f3      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ca:	4b51      	ldr	r3, [pc, #324]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1f0      	bne.n	80057b8 <HAL_RCC_OscConfig+0xe8>
 80057d6:	e000      	b.n	80057da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d063      	beq.n	80058ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 030c 	and.w	r3, r3, #12
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00b      	beq.n	800580a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057f2:	4b47      	ldr	r3, [pc, #284]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057fa:	2b08      	cmp	r3, #8
 80057fc:	d11c      	bne.n	8005838 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057fe:	4b44      	ldr	r3, [pc, #272]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d116      	bne.n	8005838 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800580a:	4b41      	ldr	r3, [pc, #260]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d005      	beq.n	8005822 <HAL_RCC_OscConfig+0x152>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d001      	beq.n	8005822 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e1c7      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005822:	4b3b      	ldr	r3, [pc, #236]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	4937      	ldr	r1, [pc, #220]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 8005832:	4313      	orrs	r3, r2
 8005834:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005836:	e03a      	b.n	80058ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d020      	beq.n	8005882 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005840:	4b34      	ldr	r3, [pc, #208]	@ (8005914 <HAL_RCC_OscConfig+0x244>)
 8005842:	2201      	movs	r2, #1
 8005844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005846:	f7fc fca3 	bl	8002190 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800584e:	f7fc fc9f 	bl	8002190 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e1a8      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005860:	4b2b      	ldr	r3, [pc, #172]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0f0      	beq.n	800584e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800586c:	4b28      	ldr	r3, [pc, #160]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	4925      	ldr	r1, [pc, #148]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 800587c:	4313      	orrs	r3, r2
 800587e:	600b      	str	r3, [r1, #0]
 8005880:	e015      	b.n	80058ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005882:	4b24      	ldr	r3, [pc, #144]	@ (8005914 <HAL_RCC_OscConfig+0x244>)
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005888:	f7fc fc82 	bl	8002190 <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005890:	f7fc fc7e 	bl	8002190 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e187      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1f0      	bne.n	8005890 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0308 	and.w	r3, r3, #8
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d036      	beq.n	8005928 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d016      	beq.n	80058f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058c2:	4b15      	ldr	r3, [pc, #84]	@ (8005918 <HAL_RCC_OscConfig+0x248>)
 80058c4:	2201      	movs	r2, #1
 80058c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c8:	f7fc fc62 	bl	8002190 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058d0:	f7fc fc5e 	bl	8002190 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e167      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005910 <HAL_RCC_OscConfig+0x240>)
 80058e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0f0      	beq.n	80058d0 <HAL_RCC_OscConfig+0x200>
 80058ee:	e01b      	b.n	8005928 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058f0:	4b09      	ldr	r3, [pc, #36]	@ (8005918 <HAL_RCC_OscConfig+0x248>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058f6:	f7fc fc4b 	bl	8002190 <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058fc:	e00e      	b.n	800591c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058fe:	f7fc fc47 	bl	8002190 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d907      	bls.n	800591c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e150      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
 8005910:	40023800 	.word	0x40023800
 8005914:	42470000 	.word	0x42470000
 8005918:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800591c:	4b88      	ldr	r3, [pc, #544]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 800591e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1ea      	bne.n	80058fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 8097 	beq.w	8005a64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005936:	2300      	movs	r3, #0
 8005938:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800593a:	4b81      	ldr	r3, [pc, #516]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 800593c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10f      	bne.n	8005966 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005946:	2300      	movs	r3, #0
 8005948:	60bb      	str	r3, [r7, #8]
 800594a:	4b7d      	ldr	r3, [pc, #500]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 800594c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594e:	4a7c      	ldr	r2, [pc, #496]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 8005950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005954:	6413      	str	r3, [r2, #64]	@ 0x40
 8005956:	4b7a      	ldr	r3, [pc, #488]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 8005958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800595e:	60bb      	str	r3, [r7, #8]
 8005960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005962:	2301      	movs	r3, #1
 8005964:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005966:	4b77      	ldr	r3, [pc, #476]	@ (8005b44 <HAL_RCC_OscConfig+0x474>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800596e:	2b00      	cmp	r3, #0
 8005970:	d118      	bne.n	80059a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005972:	4b74      	ldr	r3, [pc, #464]	@ (8005b44 <HAL_RCC_OscConfig+0x474>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a73      	ldr	r2, [pc, #460]	@ (8005b44 <HAL_RCC_OscConfig+0x474>)
 8005978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800597c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800597e:	f7fc fc07 	bl	8002190 <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005984:	e008      	b.n	8005998 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005986:	f7fc fc03 	bl	8002190 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e10c      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005998:	4b6a      	ldr	r3, [pc, #424]	@ (8005b44 <HAL_RCC_OscConfig+0x474>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d0f0      	beq.n	8005986 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d106      	bne.n	80059ba <HAL_RCC_OscConfig+0x2ea>
 80059ac:	4b64      	ldr	r3, [pc, #400]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 80059ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059b0:	4a63      	ldr	r2, [pc, #396]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 80059b2:	f043 0301 	orr.w	r3, r3, #1
 80059b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80059b8:	e01c      	b.n	80059f4 <HAL_RCC_OscConfig+0x324>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b05      	cmp	r3, #5
 80059c0:	d10c      	bne.n	80059dc <HAL_RCC_OscConfig+0x30c>
 80059c2:	4b5f      	ldr	r3, [pc, #380]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 80059c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059c6:	4a5e      	ldr	r2, [pc, #376]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 80059c8:	f043 0304 	orr.w	r3, r3, #4
 80059cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80059ce:	4b5c      	ldr	r3, [pc, #368]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 80059d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d2:	4a5b      	ldr	r2, [pc, #364]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 80059d4:	f043 0301 	orr.w	r3, r3, #1
 80059d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80059da:	e00b      	b.n	80059f4 <HAL_RCC_OscConfig+0x324>
 80059dc:	4b58      	ldr	r3, [pc, #352]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 80059de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059e0:	4a57      	ldr	r2, [pc, #348]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 80059e2:	f023 0301 	bic.w	r3, r3, #1
 80059e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80059e8:	4b55      	ldr	r3, [pc, #340]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 80059ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ec:	4a54      	ldr	r2, [pc, #336]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 80059ee:	f023 0304 	bic.w	r3, r3, #4
 80059f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d015      	beq.n	8005a28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059fc:	f7fc fbc8 	bl	8002190 <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a02:	e00a      	b.n	8005a1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a04:	f7fc fbc4 	bl	8002190 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e0cb      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a1a:	4b49      	ldr	r3, [pc, #292]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 8005a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0ee      	beq.n	8005a04 <HAL_RCC_OscConfig+0x334>
 8005a26:	e014      	b.n	8005a52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a28:	f7fc fbb2 	bl	8002190 <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a2e:	e00a      	b.n	8005a46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a30:	f7fc fbae 	bl	8002190 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e0b5      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a46:	4b3e      	ldr	r3, [pc, #248]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 8005a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1ee      	bne.n	8005a30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a52:	7dfb      	ldrb	r3, [r7, #23]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d105      	bne.n	8005a64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a58:	4b39      	ldr	r3, [pc, #228]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5c:	4a38      	ldr	r2, [pc, #224]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 8005a5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 80a1 	beq.w	8005bb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a6e:	4b34      	ldr	r3, [pc, #208]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 030c 	and.w	r3, r3, #12
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	d05c      	beq.n	8005b34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d141      	bne.n	8005b06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a82:	4b31      	ldr	r3, [pc, #196]	@ (8005b48 <HAL_RCC_OscConfig+0x478>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a88:	f7fc fb82 	bl	8002190 <HAL_GetTick>
 8005a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a8e:	e008      	b.n	8005aa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a90:	f7fc fb7e 	bl	8002190 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e087      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aa2:	4b27      	ldr	r3, [pc, #156]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1f0      	bne.n	8005a90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	69da      	ldr	r2, [r3, #28]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005abc:	019b      	lsls	r3, r3, #6
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac4:	085b      	lsrs	r3, r3, #1
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	041b      	lsls	r3, r3, #16
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad0:	061b      	lsls	r3, r3, #24
 8005ad2:	491b      	ldr	r1, [pc, #108]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b48 <HAL_RCC_OscConfig+0x478>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ade:	f7fc fb57 	bl	8002190 <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ae4:	e008      	b.n	8005af8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ae6:	f7fc fb53 	bl	8002190 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e05c      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005af8:	4b11      	ldr	r3, [pc, #68]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0f0      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x416>
 8005b04:	e054      	b.n	8005bb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b06:	4b10      	ldr	r3, [pc, #64]	@ (8005b48 <HAL_RCC_OscConfig+0x478>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b0c:	f7fc fb40 	bl	8002190 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b14:	f7fc fb3c 	bl	8002190 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e045      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b26:	4b06      	ldr	r3, [pc, #24]	@ (8005b40 <HAL_RCC_OscConfig+0x470>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1f0      	bne.n	8005b14 <HAL_RCC_OscConfig+0x444>
 8005b32:	e03d      	b.n	8005bb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d107      	bne.n	8005b4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e038      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
 8005b40:	40023800 	.word	0x40023800
 8005b44:	40007000 	.word	0x40007000
 8005b48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005bbc <HAL_RCC_OscConfig+0x4ec>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d028      	beq.n	8005bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d121      	bne.n	8005bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d11a      	bne.n	8005bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d111      	bne.n	8005bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	3b01      	subs	r3, #1
 8005b96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d107      	bne.n	8005bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d001      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e000      	b.n	8005bb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	40023800 	.word	0x40023800

08005bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e0cc      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bd4:	4b68      	ldr	r3, [pc, #416]	@ (8005d78 <HAL_RCC_ClockConfig+0x1b8>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d90c      	bls.n	8005bfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be2:	4b65      	ldr	r3, [pc, #404]	@ (8005d78 <HAL_RCC_ClockConfig+0x1b8>)
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bea:	4b63      	ldr	r3, [pc, #396]	@ (8005d78 <HAL_RCC_ClockConfig+0x1b8>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0307 	and.w	r3, r3, #7
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d001      	beq.n	8005bfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e0b8      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d020      	beq.n	8005c4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d005      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c14:	4b59      	ldr	r3, [pc, #356]	@ (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	4a58      	ldr	r2, [pc, #352]	@ (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0308 	and.w	r3, r3, #8
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d005      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c2c:	4b53      	ldr	r3, [pc, #332]	@ (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	4a52      	ldr	r2, [pc, #328]	@ (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c38:	4b50      	ldr	r3, [pc, #320]	@ (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	494d      	ldr	r1, [pc, #308]	@ (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d044      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d107      	bne.n	8005c6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c5e:	4b47      	ldr	r3, [pc, #284]	@ (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d119      	bne.n	8005c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e07f      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d003      	beq.n	8005c7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c7a:	2b03      	cmp	r3, #3
 8005c7c:	d107      	bne.n	8005c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c7e:	4b3f      	ldr	r3, [pc, #252]	@ (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d109      	bne.n	8005c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e06f      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c8e:	4b3b      	ldr	r3, [pc, #236]	@ (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e067      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c9e:	4b37      	ldr	r3, [pc, #220]	@ (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f023 0203 	bic.w	r2, r3, #3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	4934      	ldr	r1, [pc, #208]	@ (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cb0:	f7fc fa6e 	bl	8002190 <HAL_GetTick>
 8005cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cb6:	e00a      	b.n	8005cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cb8:	f7fc fa6a 	bl	8002190 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e04f      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cce:	4b2b      	ldr	r3, [pc, #172]	@ (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 020c 	and.w	r2, r3, #12
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d1eb      	bne.n	8005cb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ce0:	4b25      	ldr	r3, [pc, #148]	@ (8005d78 <HAL_RCC_ClockConfig+0x1b8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d20c      	bcs.n	8005d08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cee:	4b22      	ldr	r3, [pc, #136]	@ (8005d78 <HAL_RCC_ClockConfig+0x1b8>)
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	b2d2      	uxtb	r2, r2
 8005cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf6:	4b20      	ldr	r3, [pc, #128]	@ (8005d78 <HAL_RCC_ClockConfig+0x1b8>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0307 	and.w	r3, r3, #7
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d001      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e032      	b.n	8005d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d008      	beq.n	8005d26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d14:	4b19      	ldr	r3, [pc, #100]	@ (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	4916      	ldr	r1, [pc, #88]	@ (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d009      	beq.n	8005d46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d32:	4b12      	ldr	r3, [pc, #72]	@ (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	490e      	ldr	r1, [pc, #56]	@ (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d46:	f000 f821 	bl	8005d8c <HAL_RCC_GetSysClockFreq>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d7c <HAL_RCC_ClockConfig+0x1bc>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	091b      	lsrs	r3, r3, #4
 8005d52:	f003 030f 	and.w	r3, r3, #15
 8005d56:	490a      	ldr	r1, [pc, #40]	@ (8005d80 <HAL_RCC_ClockConfig+0x1c0>)
 8005d58:	5ccb      	ldrb	r3, [r1, r3]
 8005d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d5e:	4a09      	ldr	r2, [pc, #36]	@ (8005d84 <HAL_RCC_ClockConfig+0x1c4>)
 8005d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d62:	4b09      	ldr	r3, [pc, #36]	@ (8005d88 <HAL_RCC_ClockConfig+0x1c8>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fc f9ce 	bl	8002108 <HAL_InitTick>

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	40023c00 	.word	0x40023c00
 8005d7c:	40023800 	.word	0x40023800
 8005d80:	0800f190 	.word	0x0800f190
 8005d84:	20000008 	.word	0x20000008
 8005d88:	2000000c 	.word	0x2000000c

08005d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d90:	b094      	sub	sp, #80	@ 0x50
 8005d92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d98:	2300      	movs	r3, #0
 8005d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005da4:	4b79      	ldr	r3, [pc, #484]	@ (8005f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 030c 	and.w	r3, r3, #12
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d00d      	beq.n	8005dcc <HAL_RCC_GetSysClockFreq+0x40>
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	f200 80e1 	bhi.w	8005f78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d003      	beq.n	8005dc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005dbe:	e0db      	b.n	8005f78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005dc0:	4b73      	ldr	r3, [pc, #460]	@ (8005f90 <HAL_RCC_GetSysClockFreq+0x204>)
 8005dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005dc4:	e0db      	b.n	8005f7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005dc6:	4b73      	ldr	r3, [pc, #460]	@ (8005f94 <HAL_RCC_GetSysClockFreq+0x208>)
 8005dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005dca:	e0d8      	b.n	8005f7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005dcc:	4b6f      	ldr	r3, [pc, #444]	@ (8005f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005dd4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dd6:	4b6d      	ldr	r3, [pc, #436]	@ (8005f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d063      	beq.n	8005eaa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005de2:	4b6a      	ldr	r3, [pc, #424]	@ (8005f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	099b      	lsrs	r3, r3, #6
 8005de8:	2200      	movs	r2, #0
 8005dea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005df6:	2300      	movs	r3, #0
 8005df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dfa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005dfe:	4622      	mov	r2, r4
 8005e00:	462b      	mov	r3, r5
 8005e02:	f04f 0000 	mov.w	r0, #0
 8005e06:	f04f 0100 	mov.w	r1, #0
 8005e0a:	0159      	lsls	r1, r3, #5
 8005e0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e10:	0150      	lsls	r0, r2, #5
 8005e12:	4602      	mov	r2, r0
 8005e14:	460b      	mov	r3, r1
 8005e16:	4621      	mov	r1, r4
 8005e18:	1a51      	subs	r1, r2, r1
 8005e1a:	6139      	str	r1, [r7, #16]
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	eb63 0301 	sbc.w	r3, r3, r1
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	f04f 0300 	mov.w	r3, #0
 8005e2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e30:	4659      	mov	r1, fp
 8005e32:	018b      	lsls	r3, r1, #6
 8005e34:	4651      	mov	r1, sl
 8005e36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e3a:	4651      	mov	r1, sl
 8005e3c:	018a      	lsls	r2, r1, #6
 8005e3e:	4651      	mov	r1, sl
 8005e40:	ebb2 0801 	subs.w	r8, r2, r1
 8005e44:	4659      	mov	r1, fp
 8005e46:	eb63 0901 	sbc.w	r9, r3, r1
 8005e4a:	f04f 0200 	mov.w	r2, #0
 8005e4e:	f04f 0300 	mov.w	r3, #0
 8005e52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e5e:	4690      	mov	r8, r2
 8005e60:	4699      	mov	r9, r3
 8005e62:	4623      	mov	r3, r4
 8005e64:	eb18 0303 	adds.w	r3, r8, r3
 8005e68:	60bb      	str	r3, [r7, #8]
 8005e6a:	462b      	mov	r3, r5
 8005e6c:	eb49 0303 	adc.w	r3, r9, r3
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	f04f 0300 	mov.w	r3, #0
 8005e7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e7e:	4629      	mov	r1, r5
 8005e80:	024b      	lsls	r3, r1, #9
 8005e82:	4621      	mov	r1, r4
 8005e84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e88:	4621      	mov	r1, r4
 8005e8a:	024a      	lsls	r2, r1, #9
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	4619      	mov	r1, r3
 8005e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e92:	2200      	movs	r2, #0
 8005e94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e9c:	f7fa fe84 	bl	8000ba8 <__aeabi_uldivmod>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ea8:	e058      	b.n	8005f5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eaa:	4b38      	ldr	r3, [pc, #224]	@ (8005f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	099b      	lsrs	r3, r3, #6
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	4611      	mov	r1, r2
 8005eb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005eba:	623b      	str	r3, [r7, #32]
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ec0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ec4:	4642      	mov	r2, r8
 8005ec6:	464b      	mov	r3, r9
 8005ec8:	f04f 0000 	mov.w	r0, #0
 8005ecc:	f04f 0100 	mov.w	r1, #0
 8005ed0:	0159      	lsls	r1, r3, #5
 8005ed2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ed6:	0150      	lsls	r0, r2, #5
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4641      	mov	r1, r8
 8005ede:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	f04f 0300 	mov.w	r3, #0
 8005ef0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ef4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ef8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005efc:	ebb2 040a 	subs.w	r4, r2, sl
 8005f00:	eb63 050b 	sbc.w	r5, r3, fp
 8005f04:	f04f 0200 	mov.w	r2, #0
 8005f08:	f04f 0300 	mov.w	r3, #0
 8005f0c:	00eb      	lsls	r3, r5, #3
 8005f0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f12:	00e2      	lsls	r2, r4, #3
 8005f14:	4614      	mov	r4, r2
 8005f16:	461d      	mov	r5, r3
 8005f18:	4643      	mov	r3, r8
 8005f1a:	18e3      	adds	r3, r4, r3
 8005f1c:	603b      	str	r3, [r7, #0]
 8005f1e:	464b      	mov	r3, r9
 8005f20:	eb45 0303 	adc.w	r3, r5, r3
 8005f24:	607b      	str	r3, [r7, #4]
 8005f26:	f04f 0200 	mov.w	r2, #0
 8005f2a:	f04f 0300 	mov.w	r3, #0
 8005f2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f32:	4629      	mov	r1, r5
 8005f34:	028b      	lsls	r3, r1, #10
 8005f36:	4621      	mov	r1, r4
 8005f38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f3c:	4621      	mov	r1, r4
 8005f3e:	028a      	lsls	r2, r1, #10
 8005f40:	4610      	mov	r0, r2
 8005f42:	4619      	mov	r1, r3
 8005f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f46:	2200      	movs	r2, #0
 8005f48:	61bb      	str	r3, [r7, #24]
 8005f4a:	61fa      	str	r2, [r7, #28]
 8005f4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f50:	f7fa fe2a 	bl	8000ba8 <__aeabi_uldivmod>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4613      	mov	r3, r2
 8005f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	0c1b      	lsrs	r3, r3, #16
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	3301      	adds	r3, #1
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005f6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f76:	e002      	b.n	8005f7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f78:	4b05      	ldr	r3, [pc, #20]	@ (8005f90 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3750      	adds	r7, #80	@ 0x50
 8005f84:	46bd      	mov	sp, r7
 8005f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f8a:	bf00      	nop
 8005f8c:	40023800 	.word	0x40023800
 8005f90:	00f42400 	.word	0x00f42400
 8005f94:	007a1200 	.word	0x007a1200

08005f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f9c:	4b03      	ldr	r3, [pc, #12]	@ (8005fac <HAL_RCC_GetHCLKFreq+0x14>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	20000008 	.word	0x20000008

08005fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005fb4:	f7ff fff0 	bl	8005f98 <HAL_RCC_GetHCLKFreq>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	4b05      	ldr	r3, [pc, #20]	@ (8005fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	0a9b      	lsrs	r3, r3, #10
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	4903      	ldr	r1, [pc, #12]	@ (8005fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fc6:	5ccb      	ldrb	r3, [r1, r3]
 8005fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40023800 	.word	0x40023800
 8005fd4:	0800f1a0 	.word	0x0800f1a0

08005fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005fdc:	f7ff ffdc 	bl	8005f98 <HAL_RCC_GetHCLKFreq>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	4b05      	ldr	r3, [pc, #20]	@ (8005ff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	0b5b      	lsrs	r3, r3, #13
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	4903      	ldr	r1, [pc, #12]	@ (8005ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fee:	5ccb      	ldrb	r3, [r1, r3]
 8005ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	40023800 	.word	0x40023800
 8005ffc:	0800f1a0 	.word	0x0800f1a0

08006000 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006008:	2300      	movs	r3, #0
 800600a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b00      	cmp	r3, #0
 800601a:	d105      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006024:	2b00      	cmp	r3, #0
 8006026:	d035      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006028:	4b62      	ldr	r3, [pc, #392]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800602a:	2200      	movs	r2, #0
 800602c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800602e:	f7fc f8af 	bl	8002190 <HAL_GetTick>
 8006032:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006034:	e008      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006036:	f7fc f8ab 	bl	8002190 <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d901      	bls.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e0b0      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006048:	4b5b      	ldr	r3, [pc, #364]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1f0      	bne.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	019a      	lsls	r2, r3, #6
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	071b      	lsls	r3, r3, #28
 8006060:	4955      	ldr	r1, [pc, #340]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006062:	4313      	orrs	r3, r2
 8006064:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006068:	4b52      	ldr	r3, [pc, #328]	@ (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800606a:	2201      	movs	r2, #1
 800606c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800606e:	f7fc f88f 	bl	8002190 <HAL_GetTick>
 8006072:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006074:	e008      	b.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006076:	f7fc f88b 	bl	8002190 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d901      	bls.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e090      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006088:	4b4b      	ldr	r3, [pc, #300]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0f0      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 8083 	beq.w	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80060a2:	2300      	movs	r3, #0
 80060a4:	60fb      	str	r3, [r7, #12]
 80060a6:	4b44      	ldr	r3, [pc, #272]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060aa:	4a43      	ldr	r2, [pc, #268]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80060b2:	4b41      	ldr	r3, [pc, #260]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060ba:	60fb      	str	r3, [r7, #12]
 80060bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80060be:	4b3f      	ldr	r3, [pc, #252]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a3e      	ldr	r2, [pc, #248]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80060c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060ca:	f7fc f861 	bl	8002190 <HAL_GetTick>
 80060ce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060d0:	e008      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80060d2:	f7fc f85d 	bl	8002190 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d901      	bls.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e062      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060e4:	4b35      	ldr	r3, [pc, #212]	@ (80061bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d0f0      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060f0:	4b31      	ldr	r3, [pc, #196]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060f8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d02f      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	429a      	cmp	r2, r3
 800610c:	d028      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800610e:	4b2a      	ldr	r3, [pc, #168]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006112:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006116:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006118:	4b29      	ldr	r3, [pc, #164]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800611a:	2201      	movs	r2, #1
 800611c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800611e:	4b28      	ldr	r3, [pc, #160]	@ (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006120:	2200      	movs	r2, #0
 8006122:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006124:	4a24      	ldr	r2, [pc, #144]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800612a:	4b23      	ldr	r3, [pc, #140]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800612c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b01      	cmp	r3, #1
 8006134:	d114      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006136:	f7fc f82b 	bl	8002190 <HAL_GetTick>
 800613a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800613c:	e00a      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800613e:	f7fc f827 	bl	8002190 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	f241 3288 	movw	r2, #5000	@ 0x1388
 800614c:	4293      	cmp	r3, r2
 800614e:	d901      	bls.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e02a      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006154:	4b18      	ldr	r3, [pc, #96]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0ee      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006168:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800616c:	d10d      	bne.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800616e:	4b12      	ldr	r3, [pc, #72]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800617e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006182:	490d      	ldr	r1, [pc, #52]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006184:	4313      	orrs	r3, r2
 8006186:	608b      	str	r3, [r1, #8]
 8006188:	e005      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800618a:	4b0b      	ldr	r3, [pc, #44]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	4a0a      	ldr	r2, [pc, #40]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006190:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006194:	6093      	str	r3, [r2, #8]
 8006196:	4b08      	ldr	r3, [pc, #32]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006198:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061a2:	4905      	ldr	r1, [pc, #20]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	42470068 	.word	0x42470068
 80061b8:	40023800 	.word	0x40023800
 80061bc:	40007000 	.word	0x40007000
 80061c0:	42470e40 	.word	0x42470e40

080061c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80061d8:	2300      	movs	r3, #0
 80061da:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d13f      	bne.n	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80061e2:	4b24      	ldr	r3, [pc, #144]	@ (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d006      	beq.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061f8:	d12f      	bne.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80061fa:	4b1f      	ldr	r3, [pc, #124]	@ (8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80061fc:	617b      	str	r3, [r7, #20]
          break;
 80061fe:	e02f      	b.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006200:	4b1c      	ldr	r3, [pc, #112]	@ (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006208:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800620c:	d108      	bne.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800620e:	4b19      	ldr	r3, [pc, #100]	@ (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006216:	4a19      	ldr	r2, [pc, #100]	@ (800627c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006218:	fbb2 f3f3 	udiv	r3, r2, r3
 800621c:	613b      	str	r3, [r7, #16]
 800621e:	e007      	b.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006220:	4b14      	ldr	r3, [pc, #80]	@ (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006228:	4a15      	ldr	r2, [pc, #84]	@ (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800622a:	fbb2 f3f3 	udiv	r3, r2, r3
 800622e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006230:	4b10      	ldr	r3, [pc, #64]	@ (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006232:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006236:	099b      	lsrs	r3, r3, #6
 8006238:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	fb02 f303 	mul.w	r3, r2, r3
 8006242:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006244:	4b0b      	ldr	r3, [pc, #44]	@ (8006274 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006246:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800624a:	0f1b      	lsrs	r3, r3, #28
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	fbb2 f3f3 	udiv	r3, r2, r3
 8006256:	617b      	str	r3, [r7, #20]
          break;
 8006258:	e002      	b.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	617b      	str	r3, [r7, #20]
          break;
 800625e:	bf00      	nop
        }
      }
      break;
 8006260:	e000      	b.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8006262:	bf00      	nop
    }
  }
  return frequency;
 8006264:	697b      	ldr	r3, [r7, #20]
}
 8006266:	4618      	mov	r0, r3
 8006268:	371c      	adds	r7, #28
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40023800 	.word	0x40023800
 8006278:	00bb8000 	.word	0x00bb8000
 800627c:	007a1200 	.word	0x007a1200
 8006280:	00f42400 	.word	0x00f42400

08006284 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e01c      	b.n	80062d0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	795b      	ldrb	r3, [r3, #5]
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d105      	bne.n	80062ac <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7fb fce6 	bl	8001c78 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f042 0204 	orr.w	r2, r2, #4
 80062c0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	791b      	ldrb	r3, [r3, #4]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d101      	bne.n	80062f2 <HAL_RNG_GenerateRandomNumber+0x1a>
 80062ee:	2302      	movs	r3, #2
 80062f0:	e044      	b.n	800637c <HAL_RNG_GenerateRandomNumber+0xa4>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	795b      	ldrb	r3, [r3, #5]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d133      	bne.n	800636a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2202      	movs	r2, #2
 8006306:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006308:	f7fb ff42 	bl	8002190 <HAL_GetTick>
 800630c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800630e:	e018      	b.n	8006342 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006310:	f7fb ff3e 	bl	8002190 <HAL_GetTick>
 8006314:	4602      	mov	r2, r0
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	2b02      	cmp	r3, #2
 800631c:	d911      	bls.n	8006342 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b01      	cmp	r3, #1
 800632a:	d00a      	beq.n	8006342 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2202      	movs	r2, #2
 8006336:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e01c      	b.n	800637c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b01      	cmp	r3, #1
 800634e:	d1df      	bne.n	8006310 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	715a      	strb	r2, [r3, #5]
 8006368:	e004      	b.n	8006374 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2204      	movs	r2, #4
 800636e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	711a      	strb	r2, [r3, #4]

  return status;
 800637a:	7bfb      	ldrb	r3, [r7, #15]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e07b      	b.n	800648e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639a:	2b00      	cmp	r3, #0
 800639c:	d108      	bne.n	80063b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063a6:	d009      	beq.n	80063bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	61da      	str	r2, [r3, #28]
 80063ae:	e005      	b.n	80063bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d106      	bne.n	80063dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fb fc70 	bl	8001cbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800640e:	431a      	orrs	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	431a      	orrs	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	431a      	orrs	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800642c:	431a      	orrs	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006436:	431a      	orrs	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006440:	ea42 0103 	orr.w	r1, r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006448:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	0c1b      	lsrs	r3, r3, #16
 800645a:	f003 0104 	and.w	r1, r3, #4
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006462:	f003 0210 	and.w	r2, r3, #16
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800647c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b082      	sub	sp, #8
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e041      	b.n	800652c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d106      	bne.n	80064c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7fb fc45 	bl	8001d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2202      	movs	r2, #2
 80064c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	3304      	adds	r3, #4
 80064d2:	4619      	mov	r1, r3
 80064d4:	4610      	mov	r0, r2
 80064d6:	f000 f983 	bl	80067e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3708      	adds	r7, #8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b01      	cmp	r3, #1
 8006546:	d001      	beq.n	800654c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e046      	b.n	80065da <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a23      	ldr	r2, [pc, #140]	@ (80065e8 <HAL_TIM_Base_Start+0xb4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d022      	beq.n	80065a4 <HAL_TIM_Base_Start+0x70>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006566:	d01d      	beq.n	80065a4 <HAL_TIM_Base_Start+0x70>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a1f      	ldr	r2, [pc, #124]	@ (80065ec <HAL_TIM_Base_Start+0xb8>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d018      	beq.n	80065a4 <HAL_TIM_Base_Start+0x70>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a1e      	ldr	r2, [pc, #120]	@ (80065f0 <HAL_TIM_Base_Start+0xbc>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d013      	beq.n	80065a4 <HAL_TIM_Base_Start+0x70>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a1c      	ldr	r2, [pc, #112]	@ (80065f4 <HAL_TIM_Base_Start+0xc0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d00e      	beq.n	80065a4 <HAL_TIM_Base_Start+0x70>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a1b      	ldr	r2, [pc, #108]	@ (80065f8 <HAL_TIM_Base_Start+0xc4>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d009      	beq.n	80065a4 <HAL_TIM_Base_Start+0x70>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a19      	ldr	r2, [pc, #100]	@ (80065fc <HAL_TIM_Base_Start+0xc8>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d004      	beq.n	80065a4 <HAL_TIM_Base_Start+0x70>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a18      	ldr	r2, [pc, #96]	@ (8006600 <HAL_TIM_Base_Start+0xcc>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d111      	bne.n	80065c8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f003 0307 	and.w	r3, r3, #7
 80065ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2b06      	cmp	r3, #6
 80065b4:	d010      	beq.n	80065d8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0201 	orr.w	r2, r2, #1
 80065c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c6:	e007      	b.n	80065d8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0201 	orr.w	r2, r2, #1
 80065d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	40010000 	.word	0x40010000
 80065ec:	40000400 	.word	0x40000400
 80065f0:	40000800 	.word	0x40000800
 80065f4:	40000c00 	.word	0x40000c00
 80065f8:	40010400 	.word	0x40010400
 80065fc:	40014000 	.word	0x40014000
 8006600:	40001800 	.word	0x40001800

08006604 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6a1a      	ldr	r2, [r3, #32]
 8006612:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006616:	4013      	ands	r3, r2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10f      	bne.n	800663c <HAL_TIM_Base_Stop+0x38>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6a1a      	ldr	r2, [r3, #32]
 8006622:	f240 4344 	movw	r3, #1092	@ 0x444
 8006626:	4013      	ands	r3, r2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d107      	bne.n	800663c <HAL_TIM_Base_Stop+0x38>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 0201 	bic.w	r2, r2, #1
 800663a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b084      	sub	sp, #16
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006666:	2b01      	cmp	r3, #1
 8006668:	d101      	bne.n	800666e <HAL_TIM_ConfigClockSource+0x1c>
 800666a:	2302      	movs	r3, #2
 800666c:	e0b4      	b.n	80067d8 <HAL_TIM_ConfigClockSource+0x186>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2202      	movs	r2, #2
 800667a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800668c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006694:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066a6:	d03e      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0xd4>
 80066a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066ac:	f200 8087 	bhi.w	80067be <HAL_TIM_ConfigClockSource+0x16c>
 80066b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066b4:	f000 8086 	beq.w	80067c4 <HAL_TIM_ConfigClockSource+0x172>
 80066b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066bc:	d87f      	bhi.n	80067be <HAL_TIM_ConfigClockSource+0x16c>
 80066be:	2b70      	cmp	r3, #112	@ 0x70
 80066c0:	d01a      	beq.n	80066f8 <HAL_TIM_ConfigClockSource+0xa6>
 80066c2:	2b70      	cmp	r3, #112	@ 0x70
 80066c4:	d87b      	bhi.n	80067be <HAL_TIM_ConfigClockSource+0x16c>
 80066c6:	2b60      	cmp	r3, #96	@ 0x60
 80066c8:	d050      	beq.n	800676c <HAL_TIM_ConfigClockSource+0x11a>
 80066ca:	2b60      	cmp	r3, #96	@ 0x60
 80066cc:	d877      	bhi.n	80067be <HAL_TIM_ConfigClockSource+0x16c>
 80066ce:	2b50      	cmp	r3, #80	@ 0x50
 80066d0:	d03c      	beq.n	800674c <HAL_TIM_ConfigClockSource+0xfa>
 80066d2:	2b50      	cmp	r3, #80	@ 0x50
 80066d4:	d873      	bhi.n	80067be <HAL_TIM_ConfigClockSource+0x16c>
 80066d6:	2b40      	cmp	r3, #64	@ 0x40
 80066d8:	d058      	beq.n	800678c <HAL_TIM_ConfigClockSource+0x13a>
 80066da:	2b40      	cmp	r3, #64	@ 0x40
 80066dc:	d86f      	bhi.n	80067be <HAL_TIM_ConfigClockSource+0x16c>
 80066de:	2b30      	cmp	r3, #48	@ 0x30
 80066e0:	d064      	beq.n	80067ac <HAL_TIM_ConfigClockSource+0x15a>
 80066e2:	2b30      	cmp	r3, #48	@ 0x30
 80066e4:	d86b      	bhi.n	80067be <HAL_TIM_ConfigClockSource+0x16c>
 80066e6:	2b20      	cmp	r3, #32
 80066e8:	d060      	beq.n	80067ac <HAL_TIM_ConfigClockSource+0x15a>
 80066ea:	2b20      	cmp	r3, #32
 80066ec:	d867      	bhi.n	80067be <HAL_TIM_ConfigClockSource+0x16c>
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d05c      	beq.n	80067ac <HAL_TIM_ConfigClockSource+0x15a>
 80066f2:	2b10      	cmp	r3, #16
 80066f4:	d05a      	beq.n	80067ac <HAL_TIM_ConfigClockSource+0x15a>
 80066f6:	e062      	b.n	80067be <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006708:	f000 f990 	bl	8006a2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800671a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	609a      	str	r2, [r3, #8]
      break;
 8006724:	e04f      	b.n	80067c6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006736:	f000 f979 	bl	8006a2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006748:	609a      	str	r2, [r3, #8]
      break;
 800674a:	e03c      	b.n	80067c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006758:	461a      	mov	r2, r3
 800675a:	f000 f8ed 	bl	8006938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2150      	movs	r1, #80	@ 0x50
 8006764:	4618      	mov	r0, r3
 8006766:	f000 f946 	bl	80069f6 <TIM_ITRx_SetConfig>
      break;
 800676a:	e02c      	b.n	80067c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006778:	461a      	mov	r2, r3
 800677a:	f000 f90c 	bl	8006996 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2160      	movs	r1, #96	@ 0x60
 8006784:	4618      	mov	r0, r3
 8006786:	f000 f936 	bl	80069f6 <TIM_ITRx_SetConfig>
      break;
 800678a:	e01c      	b.n	80067c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006798:	461a      	mov	r2, r3
 800679a:	f000 f8cd 	bl	8006938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2140      	movs	r1, #64	@ 0x40
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 f926 	bl	80069f6 <TIM_ITRx_SetConfig>
      break;
 80067aa:	e00c      	b.n	80067c6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4619      	mov	r1, r3
 80067b6:	4610      	mov	r0, r2
 80067b8:	f000 f91d 	bl	80069f6 <TIM_ITRx_SetConfig>
      break;
 80067bc:	e003      	b.n	80067c6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	73fb      	strb	r3, [r7, #15]
      break;
 80067c2:	e000      	b.n	80067c6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a46      	ldr	r2, [pc, #280]	@ (800690c <TIM_Base_SetConfig+0x12c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d013      	beq.n	8006820 <TIM_Base_SetConfig+0x40>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067fe:	d00f      	beq.n	8006820 <TIM_Base_SetConfig+0x40>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a43      	ldr	r2, [pc, #268]	@ (8006910 <TIM_Base_SetConfig+0x130>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00b      	beq.n	8006820 <TIM_Base_SetConfig+0x40>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a42      	ldr	r2, [pc, #264]	@ (8006914 <TIM_Base_SetConfig+0x134>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d007      	beq.n	8006820 <TIM_Base_SetConfig+0x40>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a41      	ldr	r2, [pc, #260]	@ (8006918 <TIM_Base_SetConfig+0x138>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d003      	beq.n	8006820 <TIM_Base_SetConfig+0x40>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a40      	ldr	r2, [pc, #256]	@ (800691c <TIM_Base_SetConfig+0x13c>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d108      	bne.n	8006832 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a35      	ldr	r2, [pc, #212]	@ (800690c <TIM_Base_SetConfig+0x12c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d02b      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006840:	d027      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a32      	ldr	r2, [pc, #200]	@ (8006910 <TIM_Base_SetConfig+0x130>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d023      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a31      	ldr	r2, [pc, #196]	@ (8006914 <TIM_Base_SetConfig+0x134>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d01f      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a30      	ldr	r2, [pc, #192]	@ (8006918 <TIM_Base_SetConfig+0x138>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d01b      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a2f      	ldr	r2, [pc, #188]	@ (800691c <TIM_Base_SetConfig+0x13c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d017      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a2e      	ldr	r2, [pc, #184]	@ (8006920 <TIM_Base_SetConfig+0x140>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d013      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a2d      	ldr	r2, [pc, #180]	@ (8006924 <TIM_Base_SetConfig+0x144>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d00f      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a2c      	ldr	r2, [pc, #176]	@ (8006928 <TIM_Base_SetConfig+0x148>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d00b      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a2b      	ldr	r2, [pc, #172]	@ (800692c <TIM_Base_SetConfig+0x14c>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d007      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a2a      	ldr	r2, [pc, #168]	@ (8006930 <TIM_Base_SetConfig+0x150>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d003      	beq.n	8006892 <TIM_Base_SetConfig+0xb2>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a29      	ldr	r2, [pc, #164]	@ (8006934 <TIM_Base_SetConfig+0x154>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d108      	bne.n	80068a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a10      	ldr	r2, [pc, #64]	@ (800690c <TIM_Base_SetConfig+0x12c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d003      	beq.n	80068d8 <TIM_Base_SetConfig+0xf8>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a12      	ldr	r2, [pc, #72]	@ (800691c <TIM_Base_SetConfig+0x13c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d103      	bne.n	80068e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	691a      	ldr	r2, [r3, #16]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d105      	bne.n	80068fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	f023 0201 	bic.w	r2, r3, #1
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	611a      	str	r2, [r3, #16]
  }
}
 80068fe:	bf00      	nop
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	40010000 	.word	0x40010000
 8006910:	40000400 	.word	0x40000400
 8006914:	40000800 	.word	0x40000800
 8006918:	40000c00 	.word	0x40000c00
 800691c:	40010400 	.word	0x40010400
 8006920:	40014000 	.word	0x40014000
 8006924:	40014400 	.word	0x40014400
 8006928:	40014800 	.word	0x40014800
 800692c:	40001800 	.word	0x40001800
 8006930:	40001c00 	.word	0x40001c00
 8006934:	40002000 	.word	0x40002000

08006938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	f023 0201 	bic.w	r2, r3, #1
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	011b      	lsls	r3, r3, #4
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	4313      	orrs	r3, r2
 800696c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f023 030a 	bic.w	r3, r3, #10
 8006974:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	4313      	orrs	r3, r2
 800697c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	621a      	str	r2, [r3, #32]
}
 800698a:	bf00      	nop
 800698c:	371c      	adds	r7, #28
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006996:	b480      	push	{r7}
 8006998:	b087      	sub	sp, #28
 800699a:	af00      	add	r7, sp, #0
 800699c:	60f8      	str	r0, [r7, #12]
 800699e:	60b9      	str	r1, [r7, #8]
 80069a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	f023 0210 	bic.w	r2, r3, #16
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	031b      	lsls	r3, r3, #12
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80069d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	011b      	lsls	r3, r3, #4
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	4313      	orrs	r3, r2
 80069dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	621a      	str	r2, [r3, #32]
}
 80069ea:	bf00      	nop
 80069ec:	371c      	adds	r7, #28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b085      	sub	sp, #20
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	f043 0307 	orr.w	r3, r3, #7
 8006a18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	609a      	str	r2, [r3, #8]
}
 8006a20:	bf00      	nop
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
 8006a38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	021a      	lsls	r2, r3, #8
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	609a      	str	r2, [r3, #8]
}
 8006a60:	bf00      	nop
 8006a62:	371c      	adds	r7, #28
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e05a      	b.n	8006b3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a21      	ldr	r2, [pc, #132]	@ (8006b48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d022      	beq.n	8006b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ad0:	d01d      	beq.n	8006b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a1d      	ldr	r2, [pc, #116]	@ (8006b4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d018      	beq.n	8006b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8006b50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d013      	beq.n	8006b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a1a      	ldr	r2, [pc, #104]	@ (8006b54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d00e      	beq.n	8006b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a18      	ldr	r2, [pc, #96]	@ (8006b58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d009      	beq.n	8006b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a17      	ldr	r2, [pc, #92]	@ (8006b5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d004      	beq.n	8006b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a15      	ldr	r2, [pc, #84]	@ (8006b60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d10c      	bne.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	40010000 	.word	0x40010000
 8006b4c:	40000400 	.word	0x40000400
 8006b50:	40000800 	.word	0x40000800
 8006b54:	40000c00 	.word	0x40000c00
 8006b58:	40010400 	.word	0x40010400
 8006b5c:	40014000 	.word	0x40014000
 8006b60:	40001800 	.word	0x40001800

08006b64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e042      	b.n	8006bfc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d106      	bne.n	8006b90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7fb f8fe 	bl	8001d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2224      	movs	r2, #36	@ 0x24
 8006b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ba6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fd69 	bl	8007680 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	691a      	ldr	r2, [r3, #16]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006bbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	695a      	ldr	r2, [r3, #20]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68da      	ldr	r2, [r3, #12]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006bdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2220      	movs	r2, #32
 8006be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b08a      	sub	sp, #40	@ 0x28
 8006c08:	af02      	add	r7, sp, #8
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	603b      	str	r3, [r7, #0]
 8006c10:	4613      	mov	r3, r2
 8006c12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b20      	cmp	r3, #32
 8006c22:	d175      	bne.n	8006d10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d002      	beq.n	8006c30 <HAL_UART_Transmit+0x2c>
 8006c2a:	88fb      	ldrh	r3, [r7, #6]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e06e      	b.n	8006d12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2221      	movs	r2, #33	@ 0x21
 8006c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c42:	f7fb faa5 	bl	8002190 <HAL_GetTick>
 8006c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	88fa      	ldrh	r2, [r7, #6]
 8006c4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	88fa      	ldrh	r2, [r7, #6]
 8006c52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c5c:	d108      	bne.n	8006c70 <HAL_UART_Transmit+0x6c>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d104      	bne.n	8006c70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	61bb      	str	r3, [r7, #24]
 8006c6e:	e003      	b.n	8006c78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c74:	2300      	movs	r3, #0
 8006c76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c78:	e02e      	b.n	8006cd8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2200      	movs	r2, #0
 8006c82:	2180      	movs	r1, #128	@ 0x80
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 fb05 	bl	8007294 <UART_WaitOnFlagUntilTimeout>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d005      	beq.n	8006c9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2220      	movs	r2, #32
 8006c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e03a      	b.n	8006d12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10b      	bne.n	8006cba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	3302      	adds	r3, #2
 8006cb6:	61bb      	str	r3, [r7, #24]
 8006cb8:	e007      	b.n	8006cca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	781a      	ldrb	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1cb      	bne.n	8006c7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2140      	movs	r1, #64	@ 0x40
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f000 fad1 	bl	8007294 <UART_WaitOnFlagUntilTimeout>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d005      	beq.n	8006d04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e006      	b.n	8006d12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	e000      	b.n	8006d12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006d10:	2302      	movs	r3, #2
  }
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3720      	adds	r7, #32
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
	...

08006d1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b0ba      	sub	sp, #232	@ 0xe8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d52:	f003 030f 	and.w	r3, r3, #15
 8006d56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006d5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10f      	bne.n	8006d82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d66:	f003 0320 	and.w	r3, r3, #32
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d009      	beq.n	8006d82 <HAL_UART_IRQHandler+0x66>
 8006d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fbc2 	bl	8007504 <UART_Receive_IT>
      return;
 8006d80:	e25b      	b.n	800723a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f000 80de 	beq.w	8006f48 <HAL_UART_IRQHandler+0x22c>
 8006d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d90:	f003 0301 	and.w	r3, r3, #1
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d106      	bne.n	8006da6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d9c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 80d1 	beq.w	8006f48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00b      	beq.n	8006dca <HAL_UART_IRQHandler+0xae>
 8006db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d005      	beq.n	8006dca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dc2:	f043 0201 	orr.w	r2, r3, #1
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dce:	f003 0304 	and.w	r3, r3, #4
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00b      	beq.n	8006dee <HAL_UART_IRQHandler+0xd2>
 8006dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d005      	beq.n	8006dee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006de6:	f043 0202 	orr.w	r2, r3, #2
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00b      	beq.n	8006e12 <HAL_UART_IRQHandler+0xf6>
 8006dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d005      	beq.n	8006e12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e0a:	f043 0204 	orr.w	r2, r3, #4
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e16:	f003 0308 	and.w	r3, r3, #8
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d011      	beq.n	8006e42 <HAL_UART_IRQHandler+0x126>
 8006e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e22:	f003 0320 	and.w	r3, r3, #32
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d105      	bne.n	8006e36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d005      	beq.n	8006e42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e3a:	f043 0208 	orr.w	r2, r3, #8
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f000 81f2 	beq.w	8007230 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e50:	f003 0320 	and.w	r3, r3, #32
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d008      	beq.n	8006e6a <HAL_UART_IRQHandler+0x14e>
 8006e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e5c:	f003 0320 	and.w	r3, r3, #32
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fb4d 	bl	8007504 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e74:	2b40      	cmp	r3, #64	@ 0x40
 8006e76:	bf0c      	ite	eq
 8006e78:	2301      	moveq	r3, #1
 8006e7a:	2300      	movne	r3, #0
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e86:	f003 0308 	and.w	r3, r3, #8
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d103      	bne.n	8006e96 <HAL_UART_IRQHandler+0x17a>
 8006e8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d04f      	beq.n	8006f36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fa55 	bl	8007346 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ea6:	2b40      	cmp	r3, #64	@ 0x40
 8006ea8:	d141      	bne.n	8006f2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3314      	adds	r3, #20
 8006eb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006eb8:	e853 3f00 	ldrex	r3, [r3]
 8006ebc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006ec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ec4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3314      	adds	r3, #20
 8006ed2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ed6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006eda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ede:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006ee2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ee6:	e841 2300 	strex	r3, r2, [r1]
 8006eea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006eee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1d9      	bne.n	8006eaa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d013      	beq.n	8006f26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f02:	4a7e      	ldr	r2, [pc, #504]	@ (80070fc <HAL_UART_IRQHandler+0x3e0>)
 8006f04:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7fb faf1 	bl	80024f2 <HAL_DMA_Abort_IT>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d016      	beq.n	8006f44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006f20:	4610      	mov	r0, r2
 8006f22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f24:	e00e      	b.n	8006f44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f99e 	bl	8007268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f2c:	e00a      	b.n	8006f44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f99a 	bl	8007268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f34:	e006      	b.n	8006f44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f996 	bl	8007268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006f42:	e175      	b.n	8007230 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f44:	bf00      	nop
    return;
 8006f46:	e173      	b.n	8007230 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	f040 814f 	bne.w	80071f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f56:	f003 0310 	and.w	r3, r3, #16
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 8148 	beq.w	80071f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f64:	f003 0310 	and.w	r3, r3, #16
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 8141 	beq.w	80071f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60bb      	str	r3, [r7, #8]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	60bb      	str	r3, [r7, #8]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	60bb      	str	r3, [r7, #8]
 8006f82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f8e:	2b40      	cmp	r3, #64	@ 0x40
 8006f90:	f040 80b6 	bne.w	8007100 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006fa0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8145 	beq.w	8007234 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006fae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	f080 813e 	bcs.w	8007234 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006fbe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fca:	f000 8088 	beq.w	80070de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	330c      	adds	r3, #12
 8006fd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006fdc:	e853 3f00 	ldrex	r3, [r3]
 8006fe0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006fe4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006fe8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	330c      	adds	r3, #12
 8006ff6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006ffa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ffe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007002:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007006:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800700a:	e841 2300 	strex	r3, r2, [r1]
 800700e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007012:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1d9      	bne.n	8006fce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3314      	adds	r3, #20
 8007020:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007022:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007024:	e853 3f00 	ldrex	r3, [r3]
 8007028:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800702a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800702c:	f023 0301 	bic.w	r3, r3, #1
 8007030:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3314      	adds	r3, #20
 800703a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800703e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007042:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007044:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007046:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800704a:	e841 2300 	strex	r3, r2, [r1]
 800704e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007050:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1e1      	bne.n	800701a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3314      	adds	r3, #20
 800705c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007066:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007068:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800706c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3314      	adds	r3, #20
 8007076:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800707a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800707c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007080:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007088:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1e3      	bne.n	8007056 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2220      	movs	r2, #32
 8007092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	330c      	adds	r3, #12
 80070a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070a6:	e853 3f00 	ldrex	r3, [r3]
 80070aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80070ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070ae:	f023 0310 	bic.w	r3, r3, #16
 80070b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	330c      	adds	r3, #12
 80070bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80070c0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80070c2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80070c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80070ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e3      	bne.n	800709c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fb f99a 	bl	8002412 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2202      	movs	r2, #2
 80070e2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	4619      	mov	r1, r3
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f8c1 	bl	800727c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070fa:	e09b      	b.n	8007234 <HAL_UART_IRQHandler+0x518>
 80070fc:	0800740d 	.word	0x0800740d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007108:	b29b      	uxth	r3, r3
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007114:	b29b      	uxth	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	f000 808e 	beq.w	8007238 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800711c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 8089 	beq.w	8007238 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	330c      	adds	r3, #12
 800712c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007130:	e853 3f00 	ldrex	r3, [r3]
 8007134:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007138:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800713c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	330c      	adds	r3, #12
 8007146:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800714a:	647a      	str	r2, [r7, #68]	@ 0x44
 800714c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007150:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007152:	e841 2300 	strex	r3, r2, [r1]
 8007156:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1e3      	bne.n	8007126 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3314      	adds	r3, #20
 8007164:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007168:	e853 3f00 	ldrex	r3, [r3]
 800716c:	623b      	str	r3, [r7, #32]
   return(result);
 800716e:	6a3b      	ldr	r3, [r7, #32]
 8007170:	f023 0301 	bic.w	r3, r3, #1
 8007174:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3314      	adds	r3, #20
 800717e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007182:	633a      	str	r2, [r7, #48]	@ 0x30
 8007184:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007186:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007188:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800718a:	e841 2300 	strex	r3, r2, [r1]
 800718e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1e3      	bne.n	800715e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2220      	movs	r2, #32
 800719a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	330c      	adds	r3, #12
 80071aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	e853 3f00 	ldrex	r3, [r3]
 80071b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f023 0310 	bic.w	r3, r3, #16
 80071ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	330c      	adds	r3, #12
 80071c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80071c8:	61fa      	str	r2, [r7, #28]
 80071ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	69b9      	ldr	r1, [r7, #24]
 80071ce:	69fa      	ldr	r2, [r7, #28]
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	617b      	str	r3, [r7, #20]
   return(result);
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e3      	bne.n	80071a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80071e6:	4619      	mov	r1, r3
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f847 	bl	800727c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80071ee:	e023      	b.n	8007238 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d009      	beq.n	8007210 <HAL_UART_IRQHandler+0x4f4>
 80071fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f913 	bl	8007434 <UART_Transmit_IT>
    return;
 800720e:	e014      	b.n	800723a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00e      	beq.n	800723a <HAL_UART_IRQHandler+0x51e>
 800721c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007224:	2b00      	cmp	r3, #0
 8007226:	d008      	beq.n	800723a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f953 	bl	80074d4 <UART_EndTransmit_IT>
    return;
 800722e:	e004      	b.n	800723a <HAL_UART_IRQHandler+0x51e>
    return;
 8007230:	bf00      	nop
 8007232:	e002      	b.n	800723a <HAL_UART_IRQHandler+0x51e>
      return;
 8007234:	bf00      	nop
 8007236:	e000      	b.n	800723a <HAL_UART_IRQHandler+0x51e>
      return;
 8007238:	bf00      	nop
  }
}
 800723a:	37e8      	adds	r7, #232	@ 0xe8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	460b      	mov	r3, r1
 8007286:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	4613      	mov	r3, r2
 80072a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072a4:	e03b      	b.n	800731e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ac:	d037      	beq.n	800731e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ae:	f7fa ff6f 	bl	8002190 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	6a3a      	ldr	r2, [r7, #32]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d302      	bcc.n	80072c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d101      	bne.n	80072c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e03a      	b.n	800733e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f003 0304 	and.w	r3, r3, #4
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d023      	beq.n	800731e <UART_WaitOnFlagUntilTimeout+0x8a>
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2b80      	cmp	r3, #128	@ 0x80
 80072da:	d020      	beq.n	800731e <UART_WaitOnFlagUntilTimeout+0x8a>
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2b40      	cmp	r3, #64	@ 0x40
 80072e0:	d01d      	beq.n	800731e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0308 	and.w	r3, r3, #8
 80072ec:	2b08      	cmp	r3, #8
 80072ee:	d116      	bne.n	800731e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80072f0:	2300      	movs	r3, #0
 80072f2:	617b      	str	r3, [r7, #20]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	617b      	str	r3, [r7, #20]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f000 f81d 	bl	8007346 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2208      	movs	r2, #8
 8007310:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e00f      	b.n	800733e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	4013      	ands	r3, r2
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	429a      	cmp	r2, r3
 800732c:	bf0c      	ite	eq
 800732e:	2301      	moveq	r3, #1
 8007330:	2300      	movne	r3, #0
 8007332:	b2db      	uxtb	r3, r3
 8007334:	461a      	mov	r2, r3
 8007336:	79fb      	ldrb	r3, [r7, #7]
 8007338:	429a      	cmp	r2, r3
 800733a:	d0b4      	beq.n	80072a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3718      	adds	r7, #24
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007346:	b480      	push	{r7}
 8007348:	b095      	sub	sp, #84	@ 0x54
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	330c      	adds	r3, #12
 8007354:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007358:	e853 3f00 	ldrex	r3, [r3]
 800735c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800735e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007360:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007364:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	330c      	adds	r3, #12
 800736c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800736e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007370:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007372:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007374:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800737c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1e5      	bne.n	800734e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3314      	adds	r3, #20
 8007388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	61fb      	str	r3, [r7, #28]
   return(result);
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	f023 0301 	bic.w	r3, r3, #1
 8007398:	64bb      	str	r3, [r7, #72]	@ 0x48
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3314      	adds	r3, #20
 80073a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073aa:	e841 2300 	strex	r3, r2, [r1]
 80073ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1e5      	bne.n	8007382 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d119      	bne.n	80073f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	330c      	adds	r3, #12
 80073c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	e853 3f00 	ldrex	r3, [r3]
 80073cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	f023 0310 	bic.w	r3, r3, #16
 80073d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	330c      	adds	r3, #12
 80073dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073de:	61ba      	str	r2, [r7, #24]
 80073e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e2:	6979      	ldr	r1, [r7, #20]
 80073e4:	69ba      	ldr	r2, [r7, #24]
 80073e6:	e841 2300 	strex	r3, r2, [r1]
 80073ea:	613b      	str	r3, [r7, #16]
   return(result);
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1e5      	bne.n	80073be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2220      	movs	r2, #32
 80073f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007400:	bf00      	nop
 8007402:	3754      	adds	r7, #84	@ 0x54
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007418:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f7ff ff1e 	bl	8007268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800742c:	bf00      	nop
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b21      	cmp	r3, #33	@ 0x21
 8007446:	d13e      	bne.n	80074c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007450:	d114      	bne.n	800747c <UART_Transmit_IT+0x48>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d110      	bne.n	800747c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	461a      	mov	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800746e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	1c9a      	adds	r2, r3, #2
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	621a      	str	r2, [r3, #32]
 800747a:	e008      	b.n	800748e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a1b      	ldr	r3, [r3, #32]
 8007480:	1c59      	adds	r1, r3, #1
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6211      	str	r1, [r2, #32]
 8007486:	781a      	ldrb	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007492:	b29b      	uxth	r3, r3
 8007494:	3b01      	subs	r3, #1
 8007496:	b29b      	uxth	r3, r3
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	4619      	mov	r1, r3
 800749c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10f      	bne.n	80074c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68da      	ldr	r2, [r3, #12]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68da      	ldr	r2, [r3, #12]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	e000      	b.n	80074c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80074c6:	2302      	movs	r3, #2
  }
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2220      	movs	r2, #32
 80074f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7ff fea3 	bl	8007240 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b08c      	sub	sp, #48	@ 0x30
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b22      	cmp	r3, #34	@ 0x22
 8007516:	f040 80ae 	bne.w	8007676 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007522:	d117      	bne.n	8007554 <UART_Receive_IT+0x50>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d113      	bne.n	8007554 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800752c:	2300      	movs	r3, #0
 800752e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007534:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	b29b      	uxth	r3, r3
 800753e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007542:	b29a      	uxth	r2, r3
 8007544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007546:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754c:	1c9a      	adds	r2, r3, #2
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	629a      	str	r2, [r3, #40]	@ 0x28
 8007552:	e026      	b.n	80075a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007558:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800755a:	2300      	movs	r3, #0
 800755c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007566:	d007      	beq.n	8007578 <UART_Receive_IT+0x74>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10a      	bne.n	8007586 <UART_Receive_IT+0x82>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d106      	bne.n	8007586 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	b2da      	uxtb	r2, r3
 8007580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007582:	701a      	strb	r2, [r3, #0]
 8007584:	e008      	b.n	8007598 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	b2db      	uxtb	r3, r3
 800758e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007592:	b2da      	uxtb	r2, r3
 8007594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007596:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800759c:	1c5a      	adds	r2, r3, #1
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	3b01      	subs	r3, #1
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	4619      	mov	r1, r3
 80075b0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d15d      	bne.n	8007672 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68da      	ldr	r2, [r3, #12]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 0220 	bic.w	r2, r2, #32
 80075c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68da      	ldr	r2, [r3, #12]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80075d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	695a      	ldr	r2, [r3, #20]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f022 0201 	bic.w	r2, r2, #1
 80075e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2220      	movs	r2, #32
 80075ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d135      	bne.n	8007668 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	330c      	adds	r3, #12
 8007608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	e853 3f00 	ldrex	r3, [r3]
 8007610:	613b      	str	r3, [r7, #16]
   return(result);
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	f023 0310 	bic.w	r3, r3, #16
 8007618:	627b      	str	r3, [r7, #36]	@ 0x24
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	330c      	adds	r3, #12
 8007620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007622:	623a      	str	r2, [r7, #32]
 8007624:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007626:	69f9      	ldr	r1, [r7, #28]
 8007628:	6a3a      	ldr	r2, [r7, #32]
 800762a:	e841 2300 	strex	r3, r2, [r1]
 800762e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1e5      	bne.n	8007602 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0310 	and.w	r3, r3, #16
 8007640:	2b10      	cmp	r3, #16
 8007642:	d10a      	bne.n	800765a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007644:	2300      	movs	r3, #0
 8007646:	60fb      	str	r3, [r7, #12]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	60fb      	str	r3, [r7, #12]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	60fb      	str	r3, [r7, #12]
 8007658:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800765e:	4619      	mov	r1, r3
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7ff fe0b 	bl	800727c <HAL_UARTEx_RxEventCallback>
 8007666:	e002      	b.n	800766e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff fdf3 	bl	8007254 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	e002      	b.n	8007678 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	e000      	b.n	8007678 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007676:	2302      	movs	r3, #2
  }
}
 8007678:	4618      	mov	r0, r3
 800767a:	3730      	adds	r7, #48	@ 0x30
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007684:	b0c0      	sub	sp, #256	@ 0x100
 8007686:	af00      	add	r7, sp, #0
 8007688:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800768c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800769c:	68d9      	ldr	r1, [r3, #12]
 800769e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	ea40 0301 	orr.w	r3, r0, r1
 80076a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80076aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ae:	689a      	ldr	r2, [r3, #8]
 80076b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	431a      	orrs	r2, r3
 80076b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	431a      	orrs	r2, r3
 80076c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80076cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80076d8:	f021 010c 	bic.w	r1, r1, #12
 80076dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80076e6:	430b      	orrs	r3, r1
 80076e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80076f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076fa:	6999      	ldr	r1, [r3, #24]
 80076fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	ea40 0301 	orr.w	r3, r0, r1
 8007706:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	4b8f      	ldr	r3, [pc, #572]	@ (800794c <UART_SetConfig+0x2cc>)
 8007710:	429a      	cmp	r2, r3
 8007712:	d005      	beq.n	8007720 <UART_SetConfig+0xa0>
 8007714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	4b8d      	ldr	r3, [pc, #564]	@ (8007950 <UART_SetConfig+0x2d0>)
 800771c:	429a      	cmp	r2, r3
 800771e:	d104      	bne.n	800772a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007720:	f7fe fc5a 	bl	8005fd8 <HAL_RCC_GetPCLK2Freq>
 8007724:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007728:	e003      	b.n	8007732 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800772a:	f7fe fc41 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 800772e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800773c:	f040 810c 	bne.w	8007958 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007744:	2200      	movs	r2, #0
 8007746:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800774a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800774e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007752:	4622      	mov	r2, r4
 8007754:	462b      	mov	r3, r5
 8007756:	1891      	adds	r1, r2, r2
 8007758:	65b9      	str	r1, [r7, #88]	@ 0x58
 800775a:	415b      	adcs	r3, r3
 800775c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800775e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007762:	4621      	mov	r1, r4
 8007764:	eb12 0801 	adds.w	r8, r2, r1
 8007768:	4629      	mov	r1, r5
 800776a:	eb43 0901 	adc.w	r9, r3, r1
 800776e:	f04f 0200 	mov.w	r2, #0
 8007772:	f04f 0300 	mov.w	r3, #0
 8007776:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800777a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800777e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007782:	4690      	mov	r8, r2
 8007784:	4699      	mov	r9, r3
 8007786:	4623      	mov	r3, r4
 8007788:	eb18 0303 	adds.w	r3, r8, r3
 800778c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007790:	462b      	mov	r3, r5
 8007792:	eb49 0303 	adc.w	r3, r9, r3
 8007796:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800779a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80077aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80077ae:	460b      	mov	r3, r1
 80077b0:	18db      	adds	r3, r3, r3
 80077b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80077b4:	4613      	mov	r3, r2
 80077b6:	eb42 0303 	adc.w	r3, r2, r3
 80077ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80077bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80077c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80077c4:	f7f9 f9f0 	bl	8000ba8 <__aeabi_uldivmod>
 80077c8:	4602      	mov	r2, r0
 80077ca:	460b      	mov	r3, r1
 80077cc:	4b61      	ldr	r3, [pc, #388]	@ (8007954 <UART_SetConfig+0x2d4>)
 80077ce:	fba3 2302 	umull	r2, r3, r3, r2
 80077d2:	095b      	lsrs	r3, r3, #5
 80077d4:	011c      	lsls	r4, r3, #4
 80077d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077da:	2200      	movs	r2, #0
 80077dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80077e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80077e8:	4642      	mov	r2, r8
 80077ea:	464b      	mov	r3, r9
 80077ec:	1891      	adds	r1, r2, r2
 80077ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80077f0:	415b      	adcs	r3, r3
 80077f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80077f8:	4641      	mov	r1, r8
 80077fa:	eb12 0a01 	adds.w	sl, r2, r1
 80077fe:	4649      	mov	r1, r9
 8007800:	eb43 0b01 	adc.w	fp, r3, r1
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	f04f 0300 	mov.w	r3, #0
 800780c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007810:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007814:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007818:	4692      	mov	sl, r2
 800781a:	469b      	mov	fp, r3
 800781c:	4643      	mov	r3, r8
 800781e:	eb1a 0303 	adds.w	r3, sl, r3
 8007822:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007826:	464b      	mov	r3, r9
 8007828:	eb4b 0303 	adc.w	r3, fp, r3
 800782c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800783c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007840:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007844:	460b      	mov	r3, r1
 8007846:	18db      	adds	r3, r3, r3
 8007848:	643b      	str	r3, [r7, #64]	@ 0x40
 800784a:	4613      	mov	r3, r2
 800784c:	eb42 0303 	adc.w	r3, r2, r3
 8007850:	647b      	str	r3, [r7, #68]	@ 0x44
 8007852:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007856:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800785a:	f7f9 f9a5 	bl	8000ba8 <__aeabi_uldivmod>
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	4611      	mov	r1, r2
 8007864:	4b3b      	ldr	r3, [pc, #236]	@ (8007954 <UART_SetConfig+0x2d4>)
 8007866:	fba3 2301 	umull	r2, r3, r3, r1
 800786a:	095b      	lsrs	r3, r3, #5
 800786c:	2264      	movs	r2, #100	@ 0x64
 800786e:	fb02 f303 	mul.w	r3, r2, r3
 8007872:	1acb      	subs	r3, r1, r3
 8007874:	00db      	lsls	r3, r3, #3
 8007876:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800787a:	4b36      	ldr	r3, [pc, #216]	@ (8007954 <UART_SetConfig+0x2d4>)
 800787c:	fba3 2302 	umull	r2, r3, r3, r2
 8007880:	095b      	lsrs	r3, r3, #5
 8007882:	005b      	lsls	r3, r3, #1
 8007884:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007888:	441c      	add	r4, r3
 800788a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800788e:	2200      	movs	r2, #0
 8007890:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007894:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007898:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800789c:	4642      	mov	r2, r8
 800789e:	464b      	mov	r3, r9
 80078a0:	1891      	adds	r1, r2, r2
 80078a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80078a4:	415b      	adcs	r3, r3
 80078a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80078ac:	4641      	mov	r1, r8
 80078ae:	1851      	adds	r1, r2, r1
 80078b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80078b2:	4649      	mov	r1, r9
 80078b4:	414b      	adcs	r3, r1
 80078b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80078b8:	f04f 0200 	mov.w	r2, #0
 80078bc:	f04f 0300 	mov.w	r3, #0
 80078c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80078c4:	4659      	mov	r1, fp
 80078c6:	00cb      	lsls	r3, r1, #3
 80078c8:	4651      	mov	r1, sl
 80078ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078ce:	4651      	mov	r1, sl
 80078d0:	00ca      	lsls	r2, r1, #3
 80078d2:	4610      	mov	r0, r2
 80078d4:	4619      	mov	r1, r3
 80078d6:	4603      	mov	r3, r0
 80078d8:	4642      	mov	r2, r8
 80078da:	189b      	adds	r3, r3, r2
 80078dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80078e0:	464b      	mov	r3, r9
 80078e2:	460a      	mov	r2, r1
 80078e4:	eb42 0303 	adc.w	r3, r2, r3
 80078e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80078ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80078f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80078fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007900:	460b      	mov	r3, r1
 8007902:	18db      	adds	r3, r3, r3
 8007904:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007906:	4613      	mov	r3, r2
 8007908:	eb42 0303 	adc.w	r3, r2, r3
 800790c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800790e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007912:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007916:	f7f9 f947 	bl	8000ba8 <__aeabi_uldivmod>
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	4b0d      	ldr	r3, [pc, #52]	@ (8007954 <UART_SetConfig+0x2d4>)
 8007920:	fba3 1302 	umull	r1, r3, r3, r2
 8007924:	095b      	lsrs	r3, r3, #5
 8007926:	2164      	movs	r1, #100	@ 0x64
 8007928:	fb01 f303 	mul.w	r3, r1, r3
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	3332      	adds	r3, #50	@ 0x32
 8007932:	4a08      	ldr	r2, [pc, #32]	@ (8007954 <UART_SetConfig+0x2d4>)
 8007934:	fba2 2303 	umull	r2, r3, r2, r3
 8007938:	095b      	lsrs	r3, r3, #5
 800793a:	f003 0207 	and.w	r2, r3, #7
 800793e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4422      	add	r2, r4
 8007946:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007948:	e106      	b.n	8007b58 <UART_SetConfig+0x4d8>
 800794a:	bf00      	nop
 800794c:	40011000 	.word	0x40011000
 8007950:	40011400 	.word	0x40011400
 8007954:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800795c:	2200      	movs	r2, #0
 800795e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007962:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007966:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800796a:	4642      	mov	r2, r8
 800796c:	464b      	mov	r3, r9
 800796e:	1891      	adds	r1, r2, r2
 8007970:	6239      	str	r1, [r7, #32]
 8007972:	415b      	adcs	r3, r3
 8007974:	627b      	str	r3, [r7, #36]	@ 0x24
 8007976:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800797a:	4641      	mov	r1, r8
 800797c:	1854      	adds	r4, r2, r1
 800797e:	4649      	mov	r1, r9
 8007980:	eb43 0501 	adc.w	r5, r3, r1
 8007984:	f04f 0200 	mov.w	r2, #0
 8007988:	f04f 0300 	mov.w	r3, #0
 800798c:	00eb      	lsls	r3, r5, #3
 800798e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007992:	00e2      	lsls	r2, r4, #3
 8007994:	4614      	mov	r4, r2
 8007996:	461d      	mov	r5, r3
 8007998:	4643      	mov	r3, r8
 800799a:	18e3      	adds	r3, r4, r3
 800799c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80079a0:	464b      	mov	r3, r9
 80079a2:	eb45 0303 	adc.w	r3, r5, r3
 80079a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80079aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80079b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80079ba:	f04f 0200 	mov.w	r2, #0
 80079be:	f04f 0300 	mov.w	r3, #0
 80079c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80079c6:	4629      	mov	r1, r5
 80079c8:	008b      	lsls	r3, r1, #2
 80079ca:	4621      	mov	r1, r4
 80079cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079d0:	4621      	mov	r1, r4
 80079d2:	008a      	lsls	r2, r1, #2
 80079d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80079d8:	f7f9 f8e6 	bl	8000ba8 <__aeabi_uldivmod>
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	4b60      	ldr	r3, [pc, #384]	@ (8007b64 <UART_SetConfig+0x4e4>)
 80079e2:	fba3 2302 	umull	r2, r3, r3, r2
 80079e6:	095b      	lsrs	r3, r3, #5
 80079e8:	011c      	lsls	r4, r3, #4
 80079ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079ee:	2200      	movs	r2, #0
 80079f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80079f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80079f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80079fc:	4642      	mov	r2, r8
 80079fe:	464b      	mov	r3, r9
 8007a00:	1891      	adds	r1, r2, r2
 8007a02:	61b9      	str	r1, [r7, #24]
 8007a04:	415b      	adcs	r3, r3
 8007a06:	61fb      	str	r3, [r7, #28]
 8007a08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a0c:	4641      	mov	r1, r8
 8007a0e:	1851      	adds	r1, r2, r1
 8007a10:	6139      	str	r1, [r7, #16]
 8007a12:	4649      	mov	r1, r9
 8007a14:	414b      	adcs	r3, r1
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	f04f 0200 	mov.w	r2, #0
 8007a1c:	f04f 0300 	mov.w	r3, #0
 8007a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a24:	4659      	mov	r1, fp
 8007a26:	00cb      	lsls	r3, r1, #3
 8007a28:	4651      	mov	r1, sl
 8007a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a2e:	4651      	mov	r1, sl
 8007a30:	00ca      	lsls	r2, r1, #3
 8007a32:	4610      	mov	r0, r2
 8007a34:	4619      	mov	r1, r3
 8007a36:	4603      	mov	r3, r0
 8007a38:	4642      	mov	r2, r8
 8007a3a:	189b      	adds	r3, r3, r2
 8007a3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a40:	464b      	mov	r3, r9
 8007a42:	460a      	mov	r2, r1
 8007a44:	eb42 0303 	adc.w	r3, r2, r3
 8007a48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007a56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007a58:	f04f 0200 	mov.w	r2, #0
 8007a5c:	f04f 0300 	mov.w	r3, #0
 8007a60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007a64:	4649      	mov	r1, r9
 8007a66:	008b      	lsls	r3, r1, #2
 8007a68:	4641      	mov	r1, r8
 8007a6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a6e:	4641      	mov	r1, r8
 8007a70:	008a      	lsls	r2, r1, #2
 8007a72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007a76:	f7f9 f897 	bl	8000ba8 <__aeabi_uldivmod>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	4611      	mov	r1, r2
 8007a80:	4b38      	ldr	r3, [pc, #224]	@ (8007b64 <UART_SetConfig+0x4e4>)
 8007a82:	fba3 2301 	umull	r2, r3, r3, r1
 8007a86:	095b      	lsrs	r3, r3, #5
 8007a88:	2264      	movs	r2, #100	@ 0x64
 8007a8a:	fb02 f303 	mul.w	r3, r2, r3
 8007a8e:	1acb      	subs	r3, r1, r3
 8007a90:	011b      	lsls	r3, r3, #4
 8007a92:	3332      	adds	r3, #50	@ 0x32
 8007a94:	4a33      	ldr	r2, [pc, #204]	@ (8007b64 <UART_SetConfig+0x4e4>)
 8007a96:	fba2 2303 	umull	r2, r3, r2, r3
 8007a9a:	095b      	lsrs	r3, r3, #5
 8007a9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007aa0:	441c      	add	r4, r3
 8007aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	673b      	str	r3, [r7, #112]	@ 0x70
 8007aaa:	677a      	str	r2, [r7, #116]	@ 0x74
 8007aac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007ab0:	4642      	mov	r2, r8
 8007ab2:	464b      	mov	r3, r9
 8007ab4:	1891      	adds	r1, r2, r2
 8007ab6:	60b9      	str	r1, [r7, #8]
 8007ab8:	415b      	adcs	r3, r3
 8007aba:	60fb      	str	r3, [r7, #12]
 8007abc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ac0:	4641      	mov	r1, r8
 8007ac2:	1851      	adds	r1, r2, r1
 8007ac4:	6039      	str	r1, [r7, #0]
 8007ac6:	4649      	mov	r1, r9
 8007ac8:	414b      	adcs	r3, r1
 8007aca:	607b      	str	r3, [r7, #4]
 8007acc:	f04f 0200 	mov.w	r2, #0
 8007ad0:	f04f 0300 	mov.w	r3, #0
 8007ad4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007ad8:	4659      	mov	r1, fp
 8007ada:	00cb      	lsls	r3, r1, #3
 8007adc:	4651      	mov	r1, sl
 8007ade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ae2:	4651      	mov	r1, sl
 8007ae4:	00ca      	lsls	r2, r1, #3
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	4619      	mov	r1, r3
 8007aea:	4603      	mov	r3, r0
 8007aec:	4642      	mov	r2, r8
 8007aee:	189b      	adds	r3, r3, r2
 8007af0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007af2:	464b      	mov	r3, r9
 8007af4:	460a      	mov	r2, r1
 8007af6:	eb42 0303 	adc.w	r3, r2, r3
 8007afa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b06:	667a      	str	r2, [r7, #100]	@ 0x64
 8007b08:	f04f 0200 	mov.w	r2, #0
 8007b0c:	f04f 0300 	mov.w	r3, #0
 8007b10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007b14:	4649      	mov	r1, r9
 8007b16:	008b      	lsls	r3, r1, #2
 8007b18:	4641      	mov	r1, r8
 8007b1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b1e:	4641      	mov	r1, r8
 8007b20:	008a      	lsls	r2, r1, #2
 8007b22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007b26:	f7f9 f83f 	bl	8000ba8 <__aeabi_uldivmod>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b64 <UART_SetConfig+0x4e4>)
 8007b30:	fba3 1302 	umull	r1, r3, r3, r2
 8007b34:	095b      	lsrs	r3, r3, #5
 8007b36:	2164      	movs	r1, #100	@ 0x64
 8007b38:	fb01 f303 	mul.w	r3, r1, r3
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	011b      	lsls	r3, r3, #4
 8007b40:	3332      	adds	r3, #50	@ 0x32
 8007b42:	4a08      	ldr	r2, [pc, #32]	@ (8007b64 <UART_SetConfig+0x4e4>)
 8007b44:	fba2 2303 	umull	r2, r3, r2, r3
 8007b48:	095b      	lsrs	r3, r3, #5
 8007b4a:	f003 020f 	and.w	r2, r3, #15
 8007b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4422      	add	r2, r4
 8007b56:	609a      	str	r2, [r3, #8]
}
 8007b58:	bf00      	nop
 8007b5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b64:	51eb851f 	.word	0x51eb851f

08007b68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b68:	b084      	sub	sp, #16
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	f107 001c 	add.w	r0, r7, #28
 8007b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b7a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d123      	bne.n	8007bca <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007b96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007baa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d105      	bne.n	8007bbe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f9dc 	bl	8007f7c <USB_CoreReset>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	73fb      	strb	r3, [r7, #15]
 8007bc8:	e01b      	b.n	8007c02 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f9d0 	bl	8007f7c <USB_CoreReset>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007be0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d106      	bne.n	8007bf6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	639a      	str	r2, [r3, #56]	@ 0x38
 8007bf4:	e005      	b.n	8007c02 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bfa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007c02:	7fbb      	ldrb	r3, [r7, #30]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d10b      	bne.n	8007c20 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	f043 0206 	orr.w	r2, r3, #6
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f043 0220 	orr.w	r2, r3, #32
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c2c:	b004      	add	sp, #16
 8007c2e:	4770      	bx	lr

08007c30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f043 0201 	orr.w	r2, r3, #1
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b083      	sub	sp, #12
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f023 0201 	bic.w	r2, r3, #1
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c90:	78fb      	ldrb	r3, [r7, #3]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d115      	bne.n	8007cc2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ca2:	200a      	movs	r0, #10
 8007ca4:	f7fa fa80 	bl	80021a8 <HAL_Delay>
      ms += 10U;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	330a      	adds	r3, #10
 8007cac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f956 	bl	8007f60 <USB_GetMode>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d01e      	beq.n	8007cf8 <USB_SetCurrentMode+0x84>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2bc7      	cmp	r3, #199	@ 0xc7
 8007cbe:	d9f0      	bls.n	8007ca2 <USB_SetCurrentMode+0x2e>
 8007cc0:	e01a      	b.n	8007cf8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007cc2:	78fb      	ldrb	r3, [r7, #3]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d115      	bne.n	8007cf4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007cd4:	200a      	movs	r0, #10
 8007cd6:	f7fa fa67 	bl	80021a8 <HAL_Delay>
      ms += 10U;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	330a      	adds	r3, #10
 8007cde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f93d 	bl	8007f60 <USB_GetMode>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d005      	beq.n	8007cf8 <USB_SetCurrentMode+0x84>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2bc7      	cmp	r3, #199	@ 0xc7
 8007cf0:	d9f0      	bls.n	8007cd4 <USB_SetCurrentMode+0x60>
 8007cf2:	e001      	b.n	8007cf8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e005      	b.n	8007d04 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2bc8      	cmp	r3, #200	@ 0xc8
 8007cfc:	d101      	bne.n	8007d02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e000      	b.n	8007d04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d16:	2300      	movs	r3, #0
 8007d18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d26:	d901      	bls.n	8007d2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e01b      	b.n	8007d64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	daf2      	bge.n	8007d1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d34:	2300      	movs	r3, #0
 8007d36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	019b      	lsls	r3, r3, #6
 8007d3c:	f043 0220 	orr.w	r2, r3, #32
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	3301      	adds	r3, #1
 8007d48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d50:	d901      	bls.n	8007d56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e006      	b.n	8007d64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f003 0320 	and.w	r3, r3, #32
 8007d5e:	2b20      	cmp	r3, #32
 8007d60:	d0f0      	beq.n	8007d44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3714      	adds	r7, #20
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d88:	d901      	bls.n	8007d8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e018      	b.n	8007dc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	daf2      	bge.n	8007d7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2210      	movs	r2, #16
 8007d9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	3301      	adds	r3, #1
 8007da4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007dac:	d901      	bls.n	8007db2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e006      	b.n	8007dc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	f003 0310 	and.w	r3, r3, #16
 8007dba:	2b10      	cmp	r3, #16
 8007dbc:	d0f0      	beq.n	8007da0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b089      	sub	sp, #36	@ 0x24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	461a      	mov	r2, r3
 8007dda:	460b      	mov	r3, r1
 8007ddc:	71fb      	strb	r3, [r7, #7]
 8007dde:	4613      	mov	r3, r2
 8007de0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007dea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d123      	bne.n	8007e3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007df2:	88bb      	ldrh	r3, [r7, #4]
 8007df4:	3303      	adds	r3, #3
 8007df6:	089b      	lsrs	r3, r3, #2
 8007df8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	61bb      	str	r3, [r7, #24]
 8007dfe:	e018      	b.n	8007e32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e00:	79fb      	ldrb	r3, [r7, #7]
 8007e02:	031a      	lsls	r2, r3, #12
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	3301      	adds	r3, #1
 8007e18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	3301      	adds	r3, #1
 8007e24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	61bb      	str	r3, [r7, #24]
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d3e2      	bcc.n	8007e00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3724      	adds	r7, #36	@ 0x24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b08b      	sub	sp, #44	@ 0x2c
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	4613      	mov	r3, r2
 8007e54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007e5e:	88fb      	ldrh	r3, [r7, #6]
 8007e60:	089b      	lsrs	r3, r3, #2
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007e66:	88fb      	ldrh	r3, [r7, #6]
 8007e68:	f003 0303 	and.w	r3, r3, #3
 8007e6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007e6e:	2300      	movs	r3, #0
 8007e70:	623b      	str	r3, [r7, #32]
 8007e72:	e014      	b.n	8007e9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e82:	3301      	adds	r3, #1
 8007e84:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e88:	3301      	adds	r3, #1
 8007e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8e:	3301      	adds	r3, #1
 8007e90:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e94:	3301      	adds	r3, #1
 8007e96:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007e98:	6a3b      	ldr	r3, [r7, #32]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	623b      	str	r3, [r7, #32]
 8007e9e:	6a3a      	ldr	r2, [r7, #32]
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d3e6      	bcc.n	8007e74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007ea6:	8bfb      	ldrh	r3, [r7, #30]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d01e      	beq.n	8007eea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007eac:	2300      	movs	r3, #0
 8007eae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	f107 0310 	add.w	r3, r7, #16
 8007ebc:	6812      	ldr	r2, [r2, #0]
 8007ebe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	6a3b      	ldr	r3, [r7, #32]
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	00db      	lsls	r3, r3, #3
 8007ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed0:	701a      	strb	r2, [r3, #0]
      i++;
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	623b      	str	r3, [r7, #32]
      pDest++;
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eda:	3301      	adds	r3, #1
 8007edc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007ede:	8bfb      	ldrh	r3, [r7, #30]
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007ee4:	8bfb      	ldrh	r3, [r7, #30]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1ea      	bne.n	8007ec0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	372c      	adds	r7, #44	@ 0x2c
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	699b      	ldr	r3, [r3, #24]
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f10:	68fb      	ldr	r3, [r7, #12]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b085      	sub	sp, #20
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
 8007f26:	460b      	mov	r3, r1
 8007f28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007f2e:	78fb      	ldrb	r3, [r7, #3]
 8007f30:	015a      	lsls	r2, r3, #5
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	4413      	add	r3, r2
 8007f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007f3e:	78fb      	ldrb	r3, [r7, #3]
 8007f40:	015a      	lsls	r2, r3, #5
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	4413      	add	r3, r2
 8007f46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	4013      	ands	r3, r2
 8007f50:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f52:	68bb      	ldr	r3, [r7, #8]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3714      	adds	r7, #20
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	f003 0301 	and.w	r3, r3, #1
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f94:	d901      	bls.n	8007f9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e01b      	b.n	8007fd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	daf2      	bge.n	8007f88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	f043 0201 	orr.w	r2, r3, #1
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fbe:	d901      	bls.n	8007fc4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e006      	b.n	8007fd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d0f0      	beq.n	8007fb2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
	...

08007fe0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fe0:	b084      	sub	sp, #16
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b086      	sub	sp, #24
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007fee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008000:	461a      	mov	r2, r3
 8008002:	2300      	movs	r3, #0
 8008004:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800800a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008016:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008022:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008032:	2b00      	cmp	r3, #0
 8008034:	d119      	bne.n	800806a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008036:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800803a:	2b01      	cmp	r3, #1
 800803c:	d10a      	bne.n	8008054 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800804c:	f043 0304 	orr.w	r3, r3, #4
 8008050:	6013      	str	r3, [r2, #0]
 8008052:	e014      	b.n	800807e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008062:	f023 0304 	bic.w	r3, r3, #4
 8008066:	6013      	str	r3, [r2, #0]
 8008068:	e009      	b.n	800807e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008078:	f023 0304 	bic.w	r3, r3, #4
 800807c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800807e:	2110      	movs	r1, #16
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7ff fe43 	bl	8007d0c <USB_FlushTxFifo>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f7ff fe6d 	bl	8007d70 <USB_FlushRxFifo>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d001      	beq.n	80080a0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80080a0:	2300      	movs	r3, #0
 80080a2:	613b      	str	r3, [r7, #16]
 80080a4:	e015      	b.n	80080d2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080b2:	461a      	mov	r2, r3
 80080b4:	f04f 33ff 	mov.w	r3, #4294967295
 80080b8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	015a      	lsls	r2, r3, #5
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	4413      	add	r3, r2
 80080c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080c6:	461a      	mov	r2, r3
 80080c8:	2300      	movs	r3, #0
 80080ca:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	3301      	adds	r3, #1
 80080d0:	613b      	str	r3, [r7, #16]
 80080d2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80080d6:	461a      	mov	r2, r3
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	4293      	cmp	r3, r2
 80080dc:	d3e3      	bcc.n	80080a6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f04f 32ff 	mov.w	r2, #4294967295
 80080ea:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a18      	ldr	r2, [pc, #96]	@ (8008150 <USB_HostInit+0x170>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d10b      	bne.n	800810c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080fa:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a15      	ldr	r2, [pc, #84]	@ (8008154 <USB_HostInit+0x174>)
 8008100:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a14      	ldr	r2, [pc, #80]	@ (8008158 <USB_HostInit+0x178>)
 8008106:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800810a:	e009      	b.n	8008120 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2280      	movs	r2, #128	@ 0x80
 8008110:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a11      	ldr	r2, [pc, #68]	@ (800815c <USB_HostInit+0x17c>)
 8008116:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a11      	ldr	r2, [pc, #68]	@ (8008160 <USB_HostInit+0x180>)
 800811c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008120:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008124:	2b00      	cmp	r3, #0
 8008126:	d105      	bne.n	8008134 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	f043 0210 	orr.w	r2, r3, #16
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	699a      	ldr	r2, [r3, #24]
 8008138:	4b0a      	ldr	r3, [pc, #40]	@ (8008164 <USB_HostInit+0x184>)
 800813a:	4313      	orrs	r3, r2
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008140:	7dfb      	ldrb	r3, [r7, #23]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3718      	adds	r7, #24
 8008146:	46bd      	mov	sp, r7
 8008148:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800814c:	b004      	add	sp, #16
 800814e:	4770      	bx	lr
 8008150:	40040000 	.word	0x40040000
 8008154:	01000200 	.word	0x01000200
 8008158:	00e00300 	.word	0x00e00300
 800815c:	00600080 	.word	0x00600080
 8008160:	004000e0 	.word	0x004000e0
 8008164:	a3200008 	.word	0xa3200008

08008168 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	460b      	mov	r3, r1
 8008172:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008186:	f023 0303 	bic.w	r3, r3, #3
 800818a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	78fb      	ldrb	r3, [r7, #3]
 8008196:	f003 0303 	and.w	r3, r3, #3
 800819a:	68f9      	ldr	r1, [r7, #12]
 800819c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80081a0:	4313      	orrs	r3, r2
 80081a2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80081a4:	78fb      	ldrb	r3, [r7, #3]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d107      	bne.n	80081ba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081b0:	461a      	mov	r2, r3
 80081b2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80081b6:	6053      	str	r3, [r2, #4]
 80081b8:	e00c      	b.n	80081d4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80081ba:	78fb      	ldrb	r3, [r7, #3]
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d107      	bne.n	80081d0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081c6:	461a      	mov	r2, r3
 80081c8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80081cc:	6053      	str	r3, [r2, #4]
 80081ce:	e001      	b.n	80081d4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e000      	b.n	80081d6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3714      	adds	r7, #20
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b084      	sub	sp, #16
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008202:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800820c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008210:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008212:	2064      	movs	r0, #100	@ 0x64
 8008214:	f7f9 ffc8 	bl	80021a8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008220:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008224:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008226:	200a      	movs	r0, #10
 8008228:	f7f9 ffbe 	bl	80021a8 <HAL_Delay>

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008236:	b480      	push	{r7}
 8008238:	b085      	sub	sp, #20
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	460b      	mov	r3, r1
 8008240:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008246:	2300      	movs	r3, #0
 8008248:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800825a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d109      	bne.n	800827a <USB_DriveVbus+0x44>
 8008266:	78fb      	ldrb	r3, [r7, #3]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d106      	bne.n	800827a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008274:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008278:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008284:	d109      	bne.n	800829a <USB_DriveVbus+0x64>
 8008286:	78fb      	ldrb	r3, [r7, #3]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d106      	bne.n	800829a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008294:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008298:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3714      	adds	r7, #20
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80082b4:	2300      	movs	r3, #0
 80082b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	0c5b      	lsrs	r3, r3, #17
 80082c6:	f003 0303 	and.w	r3, r3, #3
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b085      	sub	sp, #20
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	b29b      	uxth	r3, r3
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	4608      	mov	r0, r1
 8008302:	4611      	mov	r1, r2
 8008304:	461a      	mov	r2, r3
 8008306:	4603      	mov	r3, r0
 8008308:	70fb      	strb	r3, [r7, #3]
 800830a:	460b      	mov	r3, r1
 800830c:	70bb      	strb	r3, [r7, #2]
 800830e:	4613      	mov	r3, r2
 8008310:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800831a:	78fb      	ldrb	r3, [r7, #3]
 800831c:	015a      	lsls	r2, r3, #5
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	4413      	add	r3, r2
 8008322:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008326:	461a      	mov	r2, r3
 8008328:	f04f 33ff 	mov.w	r3, #4294967295
 800832c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800832e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008332:	2b03      	cmp	r3, #3
 8008334:	d87c      	bhi.n	8008430 <USB_HC_Init+0x138>
 8008336:	a201      	add	r2, pc, #4	@ (adr r2, 800833c <USB_HC_Init+0x44>)
 8008338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833c:	0800834d 	.word	0x0800834d
 8008340:	080083f3 	.word	0x080083f3
 8008344:	0800834d 	.word	0x0800834d
 8008348:	080083b5 	.word	0x080083b5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800834c:	78fb      	ldrb	r3, [r7, #3]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	4413      	add	r3, r2
 8008354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008358:	461a      	mov	r2, r3
 800835a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800835e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008360:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008364:	2b00      	cmp	r3, #0
 8008366:	da10      	bge.n	800838a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008368:	78fb      	ldrb	r3, [r7, #3]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	4413      	add	r3, r2
 8008370:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	78fa      	ldrb	r2, [r7, #3]
 8008378:	0151      	lsls	r1, r2, #5
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	440a      	add	r2, r1
 800837e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008386:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008388:	e055      	b.n	8008436 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a6f      	ldr	r2, [pc, #444]	@ (800854c <USB_HC_Init+0x254>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d151      	bne.n	8008436 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008392:	78fb      	ldrb	r3, [r7, #3]
 8008394:	015a      	lsls	r2, r3, #5
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	4413      	add	r3, r2
 800839a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	78fa      	ldrb	r2, [r7, #3]
 80083a2:	0151      	lsls	r1, r2, #5
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	440a      	add	r2, r1
 80083a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083ac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80083b0:	60d3      	str	r3, [r2, #12]
      break;
 80083b2:	e040      	b.n	8008436 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80083b4:	78fb      	ldrb	r3, [r7, #3]
 80083b6:	015a      	lsls	r2, r3, #5
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	4413      	add	r3, r2
 80083bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083c0:	461a      	mov	r2, r3
 80083c2:	f240 639d 	movw	r3, #1693	@ 0x69d
 80083c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80083c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	da34      	bge.n	800843a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80083d0:	78fb      	ldrb	r3, [r7, #3]
 80083d2:	015a      	lsls	r2, r3, #5
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	4413      	add	r3, r2
 80083d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	78fa      	ldrb	r2, [r7, #3]
 80083e0:	0151      	lsls	r1, r2, #5
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	440a      	add	r2, r1
 80083e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083ee:	60d3      	str	r3, [r2, #12]
      }

      break;
 80083f0:	e023      	b.n	800843a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80083f2:	78fb      	ldrb	r3, [r7, #3]
 80083f4:	015a      	lsls	r2, r3, #5
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	4413      	add	r3, r2
 80083fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083fe:	461a      	mov	r2, r3
 8008400:	f240 2325 	movw	r3, #549	@ 0x225
 8008404:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008406:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800840a:	2b00      	cmp	r3, #0
 800840c:	da17      	bge.n	800843e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800840e:	78fb      	ldrb	r3, [r7, #3]
 8008410:	015a      	lsls	r2, r3, #5
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	4413      	add	r3, r2
 8008416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	78fa      	ldrb	r2, [r7, #3]
 800841e:	0151      	lsls	r1, r2, #5
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	440a      	add	r2, r1
 8008424:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008428:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800842c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800842e:	e006      	b.n	800843e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	77fb      	strb	r3, [r7, #31]
      break;
 8008434:	e004      	b.n	8008440 <USB_HC_Init+0x148>
      break;
 8008436:	bf00      	nop
 8008438:	e002      	b.n	8008440 <USB_HC_Init+0x148>
      break;
 800843a:	bf00      	nop
 800843c:	e000      	b.n	8008440 <USB_HC_Init+0x148>
      break;
 800843e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008440:	78fb      	ldrb	r3, [r7, #3]
 8008442:	015a      	lsls	r2, r3, #5
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	4413      	add	r3, r2
 8008448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800844c:	461a      	mov	r2, r3
 800844e:	2300      	movs	r3, #0
 8008450:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008452:	78fb      	ldrb	r3, [r7, #3]
 8008454:	015a      	lsls	r2, r3, #5
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	4413      	add	r3, r2
 800845a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	78fa      	ldrb	r2, [r7, #3]
 8008462:	0151      	lsls	r1, r2, #5
 8008464:	693a      	ldr	r2, [r7, #16]
 8008466:	440a      	add	r2, r1
 8008468:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800846c:	f043 0302 	orr.w	r3, r3, #2
 8008470:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008478:	699a      	ldr	r2, [r3, #24]
 800847a:	78fb      	ldrb	r3, [r7, #3]
 800847c:	f003 030f 	and.w	r3, r3, #15
 8008480:	2101      	movs	r1, #1
 8008482:	fa01 f303 	lsl.w	r3, r1, r3
 8008486:	6939      	ldr	r1, [r7, #16]
 8008488:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800848c:	4313      	orrs	r3, r2
 800848e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800849c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	da03      	bge.n	80084ac <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80084a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084a8:	61bb      	str	r3, [r7, #24]
 80084aa:	e001      	b.n	80084b0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80084ac:	2300      	movs	r3, #0
 80084ae:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7ff fef9 	bl	80082a8 <USB_GetHostSpeed>
 80084b6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80084b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d106      	bne.n	80084ce <USB_HC_Init+0x1d6>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d003      	beq.n	80084ce <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80084c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80084ca:	617b      	str	r3, [r7, #20]
 80084cc:	e001      	b.n	80084d2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80084ce:	2300      	movs	r3, #0
 80084d0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80084d2:	787b      	ldrb	r3, [r7, #1]
 80084d4:	059b      	lsls	r3, r3, #22
 80084d6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80084da:	78bb      	ldrb	r3, [r7, #2]
 80084dc:	02db      	lsls	r3, r3, #11
 80084de:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80084e2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80084e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80084e8:	049b      	lsls	r3, r3, #18
 80084ea:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80084ee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80084f0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80084f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80084f6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	431a      	orrs	r2, r3
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008500:	78fa      	ldrb	r2, [r7, #3]
 8008502:	0151      	lsls	r1, r2, #5
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	440a      	add	r2, r1
 8008508:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800850c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008510:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008512:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008516:	2b03      	cmp	r3, #3
 8008518:	d003      	beq.n	8008522 <USB_HC_Init+0x22a>
 800851a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800851e:	2b01      	cmp	r3, #1
 8008520:	d10f      	bne.n	8008542 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008522:	78fb      	ldrb	r3, [r7, #3]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	4413      	add	r3, r2
 800852a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	78fa      	ldrb	r2, [r7, #3]
 8008532:	0151      	lsls	r1, r2, #5
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	440a      	add	r2, r1
 8008538:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800853c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008540:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008542:	7ffb      	ldrb	r3, [r7, #31]
}
 8008544:	4618      	mov	r0, r3
 8008546:	3720      	adds	r7, #32
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	40040000 	.word	0x40040000

08008550 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b08c      	sub	sp, #48	@ 0x30
 8008554:	af02      	add	r7, sp, #8
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	4613      	mov	r3, r2
 800855c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	785b      	ldrb	r3, [r3, #1]
 8008566:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008568:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800856c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	4a5d      	ldr	r2, [pc, #372]	@ (80086e8 <USB_HC_StartXfer+0x198>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d12f      	bne.n	80085d6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008576:	79fb      	ldrb	r3, [r7, #7]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d11c      	bne.n	80085b6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	7c9b      	ldrb	r3, [r3, #18]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d003      	beq.n	800858c <USB_HC_StartXfer+0x3c>
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	7c9b      	ldrb	r3, [r3, #18]
 8008588:	2b02      	cmp	r3, #2
 800858a:	d124      	bne.n	80085d6 <USB_HC_StartXfer+0x86>
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	799b      	ldrb	r3, [r3, #6]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d120      	bne.n	80085d6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	6a3b      	ldr	r3, [r7, #32]
 800859a:	4413      	add	r3, r2
 800859c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	69fa      	ldr	r2, [r7, #28]
 80085a4:	0151      	lsls	r1, r2, #5
 80085a6:	6a3a      	ldr	r2, [r7, #32]
 80085a8:	440a      	add	r2, r1
 80085aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085b2:	60d3      	str	r3, [r2, #12]
 80085b4:	e00f      	b.n	80085d6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	791b      	ldrb	r3, [r3, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10b      	bne.n	80085d6 <USB_HC_StartXfer+0x86>
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	795b      	ldrb	r3, [r3, #5]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d107      	bne.n	80085d6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	785b      	ldrb	r3, [r3, #1]
 80085ca:	4619      	mov	r1, r3
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f000 fb6b 	bl	8008ca8 <USB_DoPing>
        return HAL_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	e232      	b.n	8008a3c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	799b      	ldrb	r3, [r3, #6]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d158      	bne.n	8008690 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80085de:	2301      	movs	r3, #1
 80085e0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	78db      	ldrb	r3, [r3, #3]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d007      	beq.n	80085fa <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80085ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	8a92      	ldrh	r2, [r2, #20]
 80085f0:	fb03 f202 	mul.w	r2, r3, r2
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	61da      	str	r2, [r3, #28]
 80085f8:	e07c      	b.n	80086f4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	7c9b      	ldrb	r3, [r3, #18]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d130      	bne.n	8008664 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	2bbc      	cmp	r3, #188	@ 0xbc
 8008608:	d918      	bls.n	800863c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	8a9b      	ldrh	r3, [r3, #20]
 800860e:	461a      	mov	r2, r3
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	69da      	ldr	r2, [r3, #28]
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d003      	beq.n	800862c <USB_HC_StartXfer+0xdc>
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	2b02      	cmp	r3, #2
 800862a:	d103      	bne.n	8008634 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	2202      	movs	r2, #2
 8008630:	60da      	str	r2, [r3, #12]
 8008632:	e05f      	b.n	80086f4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	2201      	movs	r2, #1
 8008638:	60da      	str	r2, [r3, #12]
 800863a:	e05b      	b.n	80086f4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	6a1a      	ldr	r2, [r3, #32]
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d007      	beq.n	800865c <USB_HC_StartXfer+0x10c>
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	2b02      	cmp	r3, #2
 8008652:	d003      	beq.n	800865c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2204      	movs	r2, #4
 8008658:	60da      	str	r2, [r3, #12]
 800865a:	e04b      	b.n	80086f4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	2203      	movs	r2, #3
 8008660:	60da      	str	r2, [r3, #12]
 8008662:	e047      	b.n	80086f4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008664:	79fb      	ldrb	r3, [r7, #7]
 8008666:	2b01      	cmp	r3, #1
 8008668:	d10d      	bne.n	8008686 <USB_HC_StartXfer+0x136>
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	8a92      	ldrh	r2, [r2, #20]
 8008672:	4293      	cmp	r3, r2
 8008674:	d907      	bls.n	8008686 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008676:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	8a92      	ldrh	r2, [r2, #20]
 800867c:	fb03 f202 	mul.w	r2, r3, r2
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	61da      	str	r2, [r3, #28]
 8008684:	e036      	b.n	80086f4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	6a1a      	ldr	r2, [r3, #32]
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	61da      	str	r2, [r3, #28]
 800868e:	e031      	b.n	80086f4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	6a1b      	ldr	r3, [r3, #32]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d018      	beq.n	80086ca <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	6a1b      	ldr	r3, [r3, #32]
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	8a92      	ldrh	r2, [r2, #20]
 80086a0:	4413      	add	r3, r2
 80086a2:	3b01      	subs	r3, #1
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	8a92      	ldrh	r2, [r2, #20]
 80086a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80086ac:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80086ae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80086b0:	8b7b      	ldrh	r3, [r7, #26]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d90b      	bls.n	80086ce <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80086b6:	8b7b      	ldrh	r3, [r7, #26]
 80086b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80086ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80086bc:	68ba      	ldr	r2, [r7, #8]
 80086be:	8a92      	ldrh	r2, [r2, #20]
 80086c0:	fb03 f202 	mul.w	r2, r3, r2
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	61da      	str	r2, [r3, #28]
 80086c8:	e001      	b.n	80086ce <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80086ca:	2301      	movs	r3, #1
 80086cc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	78db      	ldrb	r3, [r3, #3]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00a      	beq.n	80086ec <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80086d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	8a92      	ldrh	r2, [r2, #20]
 80086dc:	fb03 f202 	mul.w	r2, r3, r2
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	61da      	str	r2, [r3, #28]
 80086e4:	e006      	b.n	80086f4 <USB_HC_StartXfer+0x1a4>
 80086e6:	bf00      	nop
 80086e8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	6a1a      	ldr	r2, [r3, #32]
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	69db      	ldr	r3, [r3, #28]
 80086f8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80086fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80086fe:	04d9      	lsls	r1, r3, #19
 8008700:	4ba3      	ldr	r3, [pc, #652]	@ (8008990 <USB_HC_StartXfer+0x440>)
 8008702:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008704:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	7d9b      	ldrb	r3, [r3, #22]
 800870a:	075b      	lsls	r3, r3, #29
 800870c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008710:	69f9      	ldr	r1, [r7, #28]
 8008712:	0148      	lsls	r0, r1, #5
 8008714:	6a39      	ldr	r1, [r7, #32]
 8008716:	4401      	add	r1, r0
 8008718:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800871c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800871e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008720:	79fb      	ldrb	r3, [r7, #7]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d009      	beq.n	800873a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	6999      	ldr	r1, [r3, #24]
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	015a      	lsls	r2, r3, #5
 800872e:	6a3b      	ldr	r3, [r7, #32]
 8008730:	4413      	add	r3, r2
 8008732:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008736:	460a      	mov	r2, r1
 8008738:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800873a:	6a3b      	ldr	r3, [r7, #32]
 800873c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	2b00      	cmp	r3, #0
 8008748:	bf0c      	ite	eq
 800874a:	2301      	moveq	r3, #1
 800874c:	2300      	movne	r3, #0
 800874e:	b2db      	uxtb	r3, r3
 8008750:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008752:	69fb      	ldr	r3, [r7, #28]
 8008754:	015a      	lsls	r2, r3, #5
 8008756:	6a3b      	ldr	r3, [r7, #32]
 8008758:	4413      	add	r3, r2
 800875a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	69fa      	ldr	r2, [r7, #28]
 8008762:	0151      	lsls	r1, r2, #5
 8008764:	6a3a      	ldr	r2, [r7, #32]
 8008766:	440a      	add	r2, r1
 8008768:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800876c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008770:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	6a3b      	ldr	r3, [r7, #32]
 8008778:	4413      	add	r3, r2
 800877a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	7e7b      	ldrb	r3, [r7, #25]
 8008782:	075b      	lsls	r3, r3, #29
 8008784:	69f9      	ldr	r1, [r7, #28]
 8008786:	0148      	lsls	r0, r1, #5
 8008788:	6a39      	ldr	r1, [r7, #32]
 800878a:	4401      	add	r1, r0
 800878c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008790:	4313      	orrs	r3, r2
 8008792:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	799b      	ldrb	r3, [r3, #6]
 8008798:	2b01      	cmp	r3, #1
 800879a:	f040 80c3 	bne.w	8008924 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	7c5b      	ldrb	r3, [r3, #17]
 80087a2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80087a8:	4313      	orrs	r3, r2
 80087aa:	69fa      	ldr	r2, [r7, #28]
 80087ac:	0151      	lsls	r1, r2, #5
 80087ae:	6a3a      	ldr	r2, [r7, #32]
 80087b0:	440a      	add	r2, r1
 80087b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80087b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80087ba:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	015a      	lsls	r2, r3, #5
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	4413      	add	r3, r2
 80087c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	69fa      	ldr	r2, [r7, #28]
 80087cc:	0151      	lsls	r1, r2, #5
 80087ce:	6a3a      	ldr	r2, [r7, #32]
 80087d0:	440a      	add	r2, r1
 80087d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087d6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80087da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	79db      	ldrb	r3, [r3, #7]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d123      	bne.n	800882c <USB_HC_StartXfer+0x2dc>
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	78db      	ldrb	r3, [r3, #3]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d11f      	bne.n	800882c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	015a      	lsls	r2, r3, #5
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	4413      	add	r3, r2
 80087f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	69fa      	ldr	r2, [r7, #28]
 80087fc:	0151      	lsls	r1, r2, #5
 80087fe:	6a3a      	ldr	r2, [r7, #32]
 8008800:	440a      	add	r2, r1
 8008802:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008806:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800880a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	015a      	lsls	r2, r3, #5
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	4413      	add	r3, r2
 8008814:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	69fa      	ldr	r2, [r7, #28]
 800881c:	0151      	lsls	r1, r2, #5
 800881e:	6a3a      	ldr	r2, [r7, #32]
 8008820:	440a      	add	r2, r1
 8008822:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800882a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	7c9b      	ldrb	r3, [r3, #18]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d003      	beq.n	800883c <USB_HC_StartXfer+0x2ec>
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	7c9b      	ldrb	r3, [r3, #18]
 8008838:	2b03      	cmp	r3, #3
 800883a:	d117      	bne.n	800886c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008840:	2b01      	cmp	r3, #1
 8008842:	d113      	bne.n	800886c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	78db      	ldrb	r3, [r3, #3]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d10f      	bne.n	800886c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	4413      	add	r3, r2
 8008854:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	69fa      	ldr	r2, [r7, #28]
 800885c:	0151      	lsls	r1, r2, #5
 800885e:	6a3a      	ldr	r2, [r7, #32]
 8008860:	440a      	add	r2, r1
 8008862:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008866:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800886a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	7c9b      	ldrb	r3, [r3, #18]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d162      	bne.n	800893a <USB_HC_StartXfer+0x3ea>
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	78db      	ldrb	r3, [r3, #3]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d15e      	bne.n	800893a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	3b01      	subs	r3, #1
 8008882:	2b03      	cmp	r3, #3
 8008884:	d858      	bhi.n	8008938 <USB_HC_StartXfer+0x3e8>
 8008886:	a201      	add	r2, pc, #4	@ (adr r2, 800888c <USB_HC_StartXfer+0x33c>)
 8008888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888c:	0800889d 	.word	0x0800889d
 8008890:	080088bf 	.word	0x080088bf
 8008894:	080088e1 	.word	0x080088e1
 8008898:	08008903 	.word	0x08008903
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	015a      	lsls	r2, r3, #5
 80088a0:	6a3b      	ldr	r3, [r7, #32]
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	69fa      	ldr	r2, [r7, #28]
 80088ac:	0151      	lsls	r1, r2, #5
 80088ae:	6a3a      	ldr	r2, [r7, #32]
 80088b0:	440a      	add	r2, r1
 80088b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088ba:	6053      	str	r3, [r2, #4]
          break;
 80088bc:	e03d      	b.n	800893a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	015a      	lsls	r2, r3, #5
 80088c2:	6a3b      	ldr	r3, [r7, #32]
 80088c4:	4413      	add	r3, r2
 80088c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	69fa      	ldr	r2, [r7, #28]
 80088ce:	0151      	lsls	r1, r2, #5
 80088d0:	6a3a      	ldr	r2, [r7, #32]
 80088d2:	440a      	add	r2, r1
 80088d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088d8:	f043 030e 	orr.w	r3, r3, #14
 80088dc:	6053      	str	r3, [r2, #4]
          break;
 80088de:	e02c      	b.n	800893a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	015a      	lsls	r2, r3, #5
 80088e4:	6a3b      	ldr	r3, [r7, #32]
 80088e6:	4413      	add	r3, r2
 80088e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	69fa      	ldr	r2, [r7, #28]
 80088f0:	0151      	lsls	r1, r2, #5
 80088f2:	6a3a      	ldr	r2, [r7, #32]
 80088f4:	440a      	add	r2, r1
 80088f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80088fe:	6053      	str	r3, [r2, #4]
          break;
 8008900:	e01b      	b.n	800893a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	015a      	lsls	r2, r3, #5
 8008906:	6a3b      	ldr	r3, [r7, #32]
 8008908:	4413      	add	r3, r2
 800890a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	69fa      	ldr	r2, [r7, #28]
 8008912:	0151      	lsls	r1, r2, #5
 8008914:	6a3a      	ldr	r2, [r7, #32]
 8008916:	440a      	add	r2, r1
 8008918:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800891c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008920:	6053      	str	r3, [r2, #4]
          break;
 8008922:	e00a      	b.n	800893a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	6a3b      	ldr	r3, [r7, #32]
 800892a:	4413      	add	r3, r2
 800892c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008930:	461a      	mov	r2, r3
 8008932:	2300      	movs	r3, #0
 8008934:	6053      	str	r3, [r2, #4]
 8008936:	e000      	b.n	800893a <USB_HC_StartXfer+0x3ea>
          break;
 8008938:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	6a3b      	ldr	r3, [r7, #32]
 8008940:	4413      	add	r3, r2
 8008942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008950:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	78db      	ldrb	r3, [r3, #3]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d004      	beq.n	8008964 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008960:	613b      	str	r3, [r7, #16]
 8008962:	e003      	b.n	800896c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800896a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008972:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	015a      	lsls	r2, r3, #5
 8008978:	6a3b      	ldr	r3, [r7, #32]
 800897a:	4413      	add	r3, r2
 800897c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008980:	461a      	mov	r2, r3
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008986:	79fb      	ldrb	r3, [r7, #7]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d003      	beq.n	8008994 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800898c:	2300      	movs	r3, #0
 800898e:	e055      	b.n	8008a3c <USB_HC_StartXfer+0x4ec>
 8008990:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	78db      	ldrb	r3, [r3, #3]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d14e      	bne.n	8008a3a <USB_HC_StartXfer+0x4ea>
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	6a1b      	ldr	r3, [r3, #32]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d04a      	beq.n	8008a3a <USB_HC_StartXfer+0x4ea>
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	79db      	ldrb	r3, [r3, #7]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d146      	bne.n	8008a3a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	7c9b      	ldrb	r3, [r3, #18]
 80089b0:	2b03      	cmp	r3, #3
 80089b2:	d831      	bhi.n	8008a18 <USB_HC_StartXfer+0x4c8>
 80089b4:	a201      	add	r2, pc, #4	@ (adr r2, 80089bc <USB_HC_StartXfer+0x46c>)
 80089b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ba:	bf00      	nop
 80089bc:	080089cd 	.word	0x080089cd
 80089c0:	080089f1 	.word	0x080089f1
 80089c4:	080089cd 	.word	0x080089cd
 80089c8:	080089f1 	.word	0x080089f1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	6a1b      	ldr	r3, [r3, #32]
 80089d0:	3303      	adds	r3, #3
 80089d2:	089b      	lsrs	r3, r3, #2
 80089d4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80089d6:	8afa      	ldrh	r2, [r7, #22]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089dc:	b29b      	uxth	r3, r3
 80089de:	429a      	cmp	r2, r3
 80089e0:	d91c      	bls.n	8008a1c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	f043 0220 	orr.w	r2, r3, #32
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80089ee:	e015      	b.n	8008a1c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	6a1b      	ldr	r3, [r3, #32]
 80089f4:	3303      	adds	r3, #3
 80089f6:	089b      	lsrs	r3, r3, #2
 80089f8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80089fa:	8afa      	ldrh	r2, [r7, #22]
 80089fc:	6a3b      	ldr	r3, [r7, #32]
 80089fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a02:	691b      	ldr	r3, [r3, #16]
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d90a      	bls.n	8008a20 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	619a      	str	r2, [r3, #24]
        }
        break;
 8008a16:	e003      	b.n	8008a20 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008a18:	bf00      	nop
 8008a1a:	e002      	b.n	8008a22 <USB_HC_StartXfer+0x4d2>
        break;
 8008a1c:	bf00      	nop
 8008a1e:	e000      	b.n	8008a22 <USB_HC_StartXfer+0x4d2>
        break;
 8008a20:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	6999      	ldr	r1, [r3, #24]
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	785a      	ldrb	r2, [r3, #1]
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	2000      	movs	r0, #0
 8008a32:	9000      	str	r0, [sp, #0]
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f7ff f9c9 	bl	8007dcc <USB_WritePacket>
  }

  return HAL_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3728      	adds	r7, #40	@ 0x28
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	b29b      	uxth	r3, r3
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b089      	sub	sp, #36	@ 0x24
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008a76:	78fb      	ldrb	r3, [r7, #3]
 8008a78:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	0c9b      	lsrs	r3, r3, #18
 8008a8e:	f003 0303 	and.w	r3, r3, #3
 8008a92:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	015a      	lsls	r2, r3, #5
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	0fdb      	lsrs	r3, r3, #31
 8008aa4:	f003 0301 	and.w	r3, r3, #1
 8008aa8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	015a      	lsls	r2, r3, #5
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	0fdb      	lsrs	r3, r3, #31
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f003 0320 	and.w	r3, r3, #32
 8008ac8:	2b20      	cmp	r3, #32
 8008aca:	d10d      	bne.n	8008ae8 <USB_HC_Halt+0x82>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10a      	bne.n	8008ae8 <USB_HC_Halt+0x82>
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d005      	beq.n	8008ae4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d002      	beq.n	8008ae4 <USB_HC_Halt+0x7e>
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	d101      	bne.n	8008ae8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	e0d8      	b.n	8008c9a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d002      	beq.n	8008af4 <USB_HC_Halt+0x8e>
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d173      	bne.n	8008bdc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	69ba      	ldr	r2, [r7, #24]
 8008b04:	0151      	lsls	r1, r2, #5
 8008b06:	69fa      	ldr	r2, [r7, #28]
 8008b08:	440a      	add	r2, r1
 8008b0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008b12:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	f003 0320 	and.w	r3, r3, #32
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d14a      	bne.n	8008bb6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d133      	bne.n	8008b94 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	015a      	lsls	r2, r3, #5
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	69ba      	ldr	r2, [r7, #24]
 8008b3c:	0151      	lsls	r1, r2, #5
 8008b3e:	69fa      	ldr	r2, [r7, #28]
 8008b40:	440a      	add	r2, r1
 8008b42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b46:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b4a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	015a      	lsls	r2, r3, #5
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	4413      	add	r3, r2
 8008b54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	69ba      	ldr	r2, [r7, #24]
 8008b5c:	0151      	lsls	r1, r2, #5
 8008b5e:	69fa      	ldr	r2, [r7, #28]
 8008b60:	440a      	add	r2, r1
 8008b62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008b6a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008b78:	d82e      	bhi.n	8008bd8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	015a      	lsls	r2, r3, #5
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	4413      	add	r3, r2
 8008b82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b90:	d0ec      	beq.n	8008b6c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008b92:	e081      	b.n	8008c98 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	69ba      	ldr	r2, [r7, #24]
 8008ba4:	0151      	lsls	r1, r2, #5
 8008ba6:	69fa      	ldr	r2, [r7, #28]
 8008ba8:	440a      	add	r2, r1
 8008baa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bb2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008bb4:	e070      	b.n	8008c98 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	015a      	lsls	r2, r3, #5
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	69ba      	ldr	r2, [r7, #24]
 8008bc6:	0151      	lsls	r1, r2, #5
 8008bc8:	69fa      	ldr	r2, [r7, #28]
 8008bca:	440a      	add	r2, r1
 8008bcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bd0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bd4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008bd6:	e05f      	b.n	8008c98 <USB_HC_Halt+0x232>
            break;
 8008bd8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008bda:	e05d      	b.n	8008c98 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	015a      	lsls	r2, r3, #5
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	4413      	add	r3, r2
 8008be4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	69ba      	ldr	r2, [r7, #24]
 8008bec:	0151      	lsls	r1, r2, #5
 8008bee:	69fa      	ldr	r2, [r7, #28]
 8008bf0:	440a      	add	r2, r1
 8008bf2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bf6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008bfa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d133      	bne.n	8008c74 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	015a      	lsls	r2, r3, #5
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	4413      	add	r3, r2
 8008c14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	69ba      	ldr	r2, [r7, #24]
 8008c1c:	0151      	lsls	r1, r2, #5
 8008c1e:	69fa      	ldr	r2, [r7, #28]
 8008c20:	440a      	add	r2, r1
 8008c22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c2a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	015a      	lsls	r2, r3, #5
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	4413      	add	r3, r2
 8008c34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	69ba      	ldr	r2, [r7, #24]
 8008c3c:	0151      	lsls	r1, r2, #5
 8008c3e:	69fa      	ldr	r2, [r7, #28]
 8008c40:	440a      	add	r2, r1
 8008c42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c4a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008c58:	d81d      	bhi.n	8008c96 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	015a      	lsls	r2, r3, #5
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	4413      	add	r3, r2
 8008c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c70:	d0ec      	beq.n	8008c4c <USB_HC_Halt+0x1e6>
 8008c72:	e011      	b.n	8008c98 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	015a      	lsls	r2, r3, #5
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	69ba      	ldr	r2, [r7, #24]
 8008c84:	0151      	lsls	r1, r2, #5
 8008c86:	69fa      	ldr	r2, [r7, #28]
 8008c88:	440a      	add	r2, r1
 8008c8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	e000      	b.n	8008c98 <USB_HC_Halt+0x232>
          break;
 8008c96:	bf00      	nop
    }
  }

  return HAL_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3724      	adds	r7, #36	@ 0x24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
	...

08008ca8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b087      	sub	sp, #28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008cb8:	78fb      	ldrb	r3, [r7, #3]
 8008cba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	04da      	lsls	r2, r3, #19
 8008cc4:	4b15      	ldr	r3, [pc, #84]	@ (8008d1c <USB_DoPing+0x74>)
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	0151      	lsls	r1, r2, #5
 8008ccc:	697a      	ldr	r2, [r7, #20]
 8008cce:	440a      	add	r2, r1
 8008cd0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cd4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008cd8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	015a      	lsls	r2, r3, #5
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008cf0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008cf8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	015a      	lsls	r2, r3, #5
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d06:	461a      	mov	r2, r3
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	371c      	adds	r7, #28
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	1ff80000 	.word	0x1ff80000

08008d20 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b088      	sub	sp, #32
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008d30:	2300      	movs	r3, #0
 8008d32:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7fe ff8c 	bl	8007c52 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d3a:	2110      	movs	r1, #16
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f7fe ffe5 	bl	8007d0c <USB_FlushTxFifo>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f7ff f80f 	bl	8007d70 <USB_FlushRxFifo>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	61bb      	str	r3, [r7, #24]
 8008d60:	e01f      	b.n	8008da2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	015a      	lsls	r2, r3, #5
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	4413      	add	r3, r2
 8008d6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d78:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d80:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008d88:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	015a      	lsls	r2, r3, #5
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	4413      	add	r3, r2
 8008d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d96:	461a      	mov	r2, r3
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	61bb      	str	r3, [r7, #24]
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	2b0f      	cmp	r3, #15
 8008da6:	d9dc      	bls.n	8008d62 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008da8:	2300      	movs	r3, #0
 8008daa:	61bb      	str	r3, [r7, #24]
 8008dac:	e034      	b.n	8008e18 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	015a      	lsls	r2, r3, #5
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	4413      	add	r3, r2
 8008db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008dc4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008dcc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008dd4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	015a      	lsls	r2, r3, #5
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008de2:	461a      	mov	r2, r3
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	3301      	adds	r3, #1
 8008dec:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008df4:	d80c      	bhi.n	8008e10 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	015a      	lsls	r2, r3, #5
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e0c:	d0ec      	beq.n	8008de8 <USB_StopHost+0xc8>
 8008e0e:	e000      	b.n	8008e12 <USB_StopHost+0xf2>
        break;
 8008e10:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	3301      	adds	r3, #1
 8008e16:	61bb      	str	r3, [r7, #24]
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	2b0f      	cmp	r3, #15
 8008e1c:	d9c7      	bls.n	8008dae <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e24:	461a      	mov	r2, r3
 8008e26:	f04f 33ff 	mov.w	r3, #4294967295
 8008e2a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e32:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7fe fefb 	bl	8007c30 <USB_EnableGlobalInt>

  return ret;
 8008e3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3720      	adds	r7, #32
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008e44:	b590      	push	{r4, r7, lr}
 8008e46:	b089      	sub	sp, #36	@ 0x24
 8008e48:	af04      	add	r7, sp, #16
 8008e4a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	2202      	movs	r2, #2
 8008e50:	2102      	movs	r1, #2
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fc85 	bl	8009762 <USBH_FindInterface>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
 8008e5e:	2bff      	cmp	r3, #255	@ 0xff
 8008e60:	d002      	beq.n	8008e68 <USBH_CDC_InterfaceInit+0x24>
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d901      	bls.n	8008e6c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008e68:	2302      	movs	r3, #2
 8008e6a:	e13d      	b.n	80090e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
 8008e6e:	4619      	mov	r1, r3
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fc5a 	bl	800972a <USBH_SelectInterface>
 8008e76:	4603      	mov	r3, r0
 8008e78:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008e7a:	7bbb      	ldrb	r3, [r7, #14]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008e80:	2302      	movs	r3, #2
 8008e82:	e131      	b.n	80090e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008e8a:	2050      	movs	r0, #80	@ 0x50
 8008e8c:	f002 fb64 	bl	800b558 <malloc>
 8008e90:	4603      	mov	r3, r0
 8008e92:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e9a:	69db      	ldr	r3, [r3, #28]
 8008e9c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d101      	bne.n	8008ea8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	e11f      	b.n	80090e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008ea8:	2250      	movs	r2, #80	@ 0x50
 8008eaa:	2100      	movs	r1, #0
 8008eac:	68b8      	ldr	r0, [r7, #8]
 8008eae:	f003 f98e 	bl	800c1ce <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008eb2:	7bfb      	ldrb	r3, [r7, #15]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	211a      	movs	r1, #26
 8008eb8:	fb01 f303 	mul.w	r3, r1, r3
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	b25b      	sxtb	r3, r3
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	da15      	bge.n	8008ef6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	211a      	movs	r1, #26
 8008ed0:	fb01 f303 	mul.w	r3, r1, r3
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008eda:	781a      	ldrb	r2, [r3, #0]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	211a      	movs	r1, #26
 8008ee6:	fb01 f303 	mul.w	r3, r1, r3
 8008eea:	4413      	add	r3, r2
 8008eec:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008ef0:	881a      	ldrh	r2, [r3, #0]
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	785b      	ldrb	r3, [r3, #1]
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f001 ffbe 	bl	800ae7e <USBH_AllocPipe>
 8008f02:	4603      	mov	r3, r0
 8008f04:	461a      	mov	r2, r3
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	7819      	ldrb	r1, [r3, #0]
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	7858      	ldrb	r0, [r3, #1]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	8952      	ldrh	r2, [r2, #10]
 8008f22:	9202      	str	r2, [sp, #8]
 8008f24:	2203      	movs	r2, #3
 8008f26:	9201      	str	r2, [sp, #4]
 8008f28:	9300      	str	r3, [sp, #0]
 8008f2a:	4623      	mov	r3, r4
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f001 ff76 	bl	800ae20 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f002 fa85 	bl	800b44c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008f42:	2300      	movs	r3, #0
 8008f44:	2200      	movs	r2, #0
 8008f46:	210a      	movs	r1, #10
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fc0a 	bl	8009762 <USBH_FindInterface>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
 8008f54:	2bff      	cmp	r3, #255	@ 0xff
 8008f56:	d002      	beq.n	8008f5e <USBH_CDC_InterfaceInit+0x11a>
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d901      	bls.n	8008f62 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008f5e:	2302      	movs	r3, #2
 8008f60:	e0c2      	b.n	80090e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	211a      	movs	r1, #26
 8008f68:	fb01 f303 	mul.w	r3, r1, r3
 8008f6c:	4413      	add	r3, r2
 8008f6e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	b25b      	sxtb	r3, r3
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	da16      	bge.n	8008fa8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	211a      	movs	r1, #26
 8008f80:	fb01 f303 	mul.w	r3, r1, r3
 8008f84:	4413      	add	r3, r2
 8008f86:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008f8a:	781a      	ldrb	r2, [r3, #0]
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	211a      	movs	r1, #26
 8008f96:	fb01 f303 	mul.w	r3, r1, r3
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008fa0:	881a      	ldrh	r2, [r3, #0]
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	835a      	strh	r2, [r3, #26]
 8008fa6:	e015      	b.n	8008fd4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	211a      	movs	r1, #26
 8008fae:	fb01 f303 	mul.w	r3, r1, r3
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008fb8:	781a      	ldrb	r2, [r3, #0]
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	211a      	movs	r1, #26
 8008fc4:	fb01 f303 	mul.w	r3, r1, r3
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008fce:	881a      	ldrh	r2, [r3, #0]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	211a      	movs	r1, #26
 8008fda:	fb01 f303 	mul.w	r3, r1, r3
 8008fde:	4413      	add	r3, r2
 8008fe0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	b25b      	sxtb	r3, r3
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	da16      	bge.n	800901a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008fec:	7bfb      	ldrb	r3, [r7, #15]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	211a      	movs	r1, #26
 8008ff2:	fb01 f303 	mul.w	r3, r1, r3
 8008ff6:	4413      	add	r3, r2
 8008ff8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008ffc:	781a      	ldrb	r2, [r3, #0]
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009002:	7bfb      	ldrb	r3, [r7, #15]
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	211a      	movs	r1, #26
 8009008:	fb01 f303 	mul.w	r3, r1, r3
 800900c:	4413      	add	r3, r2
 800900e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009012:	881a      	ldrh	r2, [r3, #0]
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	835a      	strh	r2, [r3, #26]
 8009018:	e015      	b.n	8009046 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800901a:	7bfb      	ldrb	r3, [r7, #15]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	211a      	movs	r1, #26
 8009020:	fb01 f303 	mul.w	r3, r1, r3
 8009024:	4413      	add	r3, r2
 8009026:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800902a:	781a      	ldrb	r2, [r3, #0]
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009030:	7bfb      	ldrb	r3, [r7, #15]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	211a      	movs	r1, #26
 8009036:	fb01 f303 	mul.w	r3, r1, r3
 800903a:	4413      	add	r3, r2
 800903c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009040:	881a      	ldrh	r2, [r3, #0]
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	7b9b      	ldrb	r3, [r3, #14]
 800904a:	4619      	mov	r1, r3
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f001 ff16 	bl	800ae7e <USBH_AllocPipe>
 8009052:	4603      	mov	r3, r0
 8009054:	461a      	mov	r2, r3
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	7bdb      	ldrb	r3, [r3, #15]
 800905e:	4619      	mov	r1, r3
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f001 ff0c 	bl	800ae7e <USBH_AllocPipe>
 8009066:	4603      	mov	r3, r0
 8009068:	461a      	mov	r2, r3
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	7b59      	ldrb	r1, [r3, #13]
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	7b98      	ldrb	r0, [r3, #14]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	8b12      	ldrh	r2, [r2, #24]
 8009086:	9202      	str	r2, [sp, #8]
 8009088:	2202      	movs	r2, #2
 800908a:	9201      	str	r2, [sp, #4]
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	4623      	mov	r3, r4
 8009090:	4602      	mov	r2, r0
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f001 fec4 	bl	800ae20 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	7b19      	ldrb	r1, [r3, #12]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	7bd8      	ldrb	r0, [r3, #15]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	8b52      	ldrh	r2, [r2, #26]
 80090b0:	9202      	str	r2, [sp, #8]
 80090b2:	2202      	movs	r2, #2
 80090b4:	9201      	str	r2, [sp, #4]
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	4623      	mov	r3, r4
 80090ba:	4602      	mov	r2, r0
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f001 feaf 	bl	800ae20 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	7b5b      	ldrb	r3, [r3, #13]
 80090ce:	2200      	movs	r2, #0
 80090d0:	4619      	mov	r1, r3
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f002 f9ba 	bl	800b44c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	7b1b      	ldrb	r3, [r3, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	4619      	mov	r1, r3
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f002 f9b3 	bl	800b44c <USBH_LL_SetToggle>

  return USBH_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3714      	adds	r7, #20
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd90      	pop	{r4, r7, pc}

080090f0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090fe:	69db      	ldr	r3, [r3, #28]
 8009100:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00e      	beq.n	8009128 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	4619      	mov	r1, r3
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f001 fea4 	bl	800ae5e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	4619      	mov	r1, r3
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f001 fecf 	bl	800aec0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	7b1b      	ldrb	r3, [r3, #12]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00e      	beq.n	800914e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	7b1b      	ldrb	r3, [r3, #12]
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f001 fe91 	bl	800ae5e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	7b1b      	ldrb	r3, [r3, #12]
 8009140:	4619      	mov	r1, r3
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f001 febc 	bl	800aec0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	7b5b      	ldrb	r3, [r3, #13]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00e      	beq.n	8009174 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	7b5b      	ldrb	r3, [r3, #13]
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f001 fe7e 	bl	800ae5e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	7b5b      	ldrb	r3, [r3, #13]
 8009166:	4619      	mov	r1, r3
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f001 fea9 	bl	800aec0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2200      	movs	r2, #0
 8009172:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800917a:	69db      	ldr	r3, [r3, #28]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00b      	beq.n	8009198 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009186:	69db      	ldr	r3, [r3, #28]
 8009188:	4618      	mov	r0, r3
 800918a:	f002 f9ed 	bl	800b568 <free>
    phost->pActiveClass->pData = 0U;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009194:	2200      	movs	r2, #0
 8009196:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b084      	sub	sp, #16
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091b0:	69db      	ldr	r3, [r3, #28]
 80091b2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	3340      	adds	r3, #64	@ 0x40
 80091b8:	4619      	mov	r1, r3
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f8b1 	bl	8009322 <GetLineCoding>
 80091c0:	4603      	mov	r3, r0
 80091c2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80091c4:	7afb      	ldrb	r3, [r7, #11]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d105      	bne.n	80091d6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80091d0:	2102      	movs	r1, #2
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80091d6:	7afb      	ldrb	r3, [r7, #11]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80091e8:	2301      	movs	r3, #1
 80091ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80091ec:	2300      	movs	r3, #0
 80091ee:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80091f6:	69db      	ldr	r3, [r3, #28]
 80091f8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009200:	2b04      	cmp	r3, #4
 8009202:	d877      	bhi.n	80092f4 <USBH_CDC_Process+0x114>
 8009204:	a201      	add	r2, pc, #4	@ (adr r2, 800920c <USBH_CDC_Process+0x2c>)
 8009206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920a:	bf00      	nop
 800920c:	08009221 	.word	0x08009221
 8009210:	08009227 	.word	0x08009227
 8009214:	08009257 	.word	0x08009257
 8009218:	080092cb 	.word	0x080092cb
 800921c:	080092d9 	.word	0x080092d9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009220:	2300      	movs	r3, #0
 8009222:	73fb      	strb	r3, [r7, #15]
      break;
 8009224:	e06d      	b.n	8009302 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f897 	bl	8009360 <SetLineCoding>
 8009232:	4603      	mov	r3, r0
 8009234:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009236:	7bbb      	ldrb	r3, [r7, #14]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d104      	bne.n	8009246 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2202      	movs	r2, #2
 8009240:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009244:	e058      	b.n	80092f8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009246:	7bbb      	ldrb	r3, [r7, #14]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d055      	beq.n	80092f8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	2204      	movs	r2, #4
 8009250:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009254:	e050      	b.n	80092f8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	3340      	adds	r3, #64	@ 0x40
 800925a:	4619      	mov	r1, r3
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f860 	bl	8009322 <GetLineCoding>
 8009262:	4603      	mov	r3, r0
 8009264:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009266:	7bbb      	ldrb	r3, [r7, #14]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d126      	bne.n	80092ba <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	2200      	movs	r2, #0
 8009270:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800927e:	791b      	ldrb	r3, [r3, #4]
 8009280:	429a      	cmp	r2, r3
 8009282:	d13b      	bne.n	80092fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800928e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009290:	429a      	cmp	r2, r3
 8009292:	d133      	bne.n	80092fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800929e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d12b      	bne.n	80092fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092ac:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d124      	bne.n	80092fc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f958 	bl	8009568 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80092b8:	e020      	b.n	80092fc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80092ba:	7bbb      	ldrb	r3, [r7, #14]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d01d      	beq.n	80092fc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	2204      	movs	r2, #4
 80092c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80092c8:	e018      	b.n	80092fc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f867 	bl	800939e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f8da 	bl	800948a <CDC_ProcessReception>
      break;
 80092d6:	e014      	b.n	8009302 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80092d8:	2100      	movs	r1, #0
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f001 f81a 	bl	800a314 <USBH_ClrFeature>
 80092e0:	4603      	mov	r3, r0
 80092e2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80092e4:	7bbb      	ldrb	r3, [r7, #14]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d10a      	bne.n	8009300 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80092f2:	e005      	b.n	8009300 <USBH_CDC_Process+0x120>

    default:
      break;
 80092f4:	bf00      	nop
 80092f6:	e004      	b.n	8009302 <USBH_CDC_Process+0x122>
      break;
 80092f8:	bf00      	nop
 80092fa:	e002      	b.n	8009302 <USBH_CDC_Process+0x122>
      break;
 80092fc:	bf00      	nop
 80092fe:	e000      	b.n	8009302 <USBH_CDC_Process+0x122>
      break;
 8009300:	bf00      	nop

  }

  return status;
 8009302:	7bfb      	ldrb	r3, [r7, #15]
}
 8009304:	4618      	mov	r0, r3
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	370c      	adds	r7, #12
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr

08009322 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b082      	sub	sp, #8
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	22a1      	movs	r2, #161	@ 0xa1
 8009330:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2221      	movs	r2, #33	@ 0x21
 8009336:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2207      	movs	r2, #7
 8009348:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	2207      	movs	r2, #7
 800934e:	4619      	mov	r1, r3
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f001 fb14 	bl	800a97e <USBH_CtlReq>
 8009356:	4603      	mov	r3, r0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2221      	movs	r2, #33	@ 0x21
 800936e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2220      	movs	r2, #32
 8009374:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2207      	movs	r2, #7
 8009386:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	2207      	movs	r2, #7
 800938c:	4619      	mov	r1, r3
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f001 faf5 	bl	800a97e <USBH_CtlReq>
 8009394:	4603      	mov	r3, r0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}

0800939e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b086      	sub	sp, #24
 80093a2:	af02      	add	r7, sp, #8
 80093a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093ac:	69db      	ldr	r3, [r3, #28]
 80093ae:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80093b0:	2300      	movs	r3, #0
 80093b2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d002      	beq.n	80093c4 <CDC_ProcessTransmission+0x26>
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d023      	beq.n	800940a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80093c2:	e05e      	b.n	8009482 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	8b12      	ldrh	r2, [r2, #24]
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d90b      	bls.n	80093e8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	69d9      	ldr	r1, [r3, #28]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	8b1a      	ldrh	r2, [r3, #24]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	7b5b      	ldrb	r3, [r3, #13]
 80093dc:	2001      	movs	r0, #1
 80093de:	9000      	str	r0, [sp, #0]
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f001 fcda 	bl	800ad9a <USBH_BulkSendData>
 80093e6:	e00b      	b.n	8009400 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	7b5b      	ldrb	r3, [r3, #13]
 80093f6:	2001      	movs	r0, #1
 80093f8:	9000      	str	r0, [sp, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f001 fccd 	bl	800ad9a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2202      	movs	r2, #2
 8009404:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009408:	e03b      	b.n	8009482 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	7b5b      	ldrb	r3, [r3, #13]
 800940e:	4619      	mov	r1, r3
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f001 fff1 	bl	800b3f8 <USBH_LL_GetURBState>
 8009416:	4603      	mov	r3, r0
 8009418:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800941a:	7afb      	ldrb	r3, [r7, #11]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d128      	bne.n	8009472 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009424:	68fa      	ldr	r2, [r7, #12]
 8009426:	8b12      	ldrh	r2, [r2, #24]
 8009428:	4293      	cmp	r3, r2
 800942a:	d90e      	bls.n	800944a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	8b12      	ldrh	r2, [r2, #24]
 8009434:	1a9a      	subs	r2, r3, r2
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	68fa      	ldr	r2, [r7, #12]
 8009440:	8b12      	ldrh	r2, [r2, #24]
 8009442:	441a      	add	r2, r3
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	61da      	str	r2, [r3, #28]
 8009448:	e002      	b.n	8009450 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2200      	movs	r2, #0
 800944e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009454:	2b00      	cmp	r3, #0
 8009456:	d004      	beq.n	8009462 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009460:	e00e      	b.n	8009480 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f868 	bl	8009540 <USBH_CDC_TransmitCallback>
      break;
 8009470:	e006      	b.n	8009480 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009472:	7afb      	ldrb	r3, [r7, #11]
 8009474:	2b02      	cmp	r3, #2
 8009476:	d103      	bne.n	8009480 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009480:	bf00      	nop
  }
}
 8009482:	bf00      	nop
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b086      	sub	sp, #24
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009498:	69db      	ldr	r3, [r3, #28]
 800949a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800949c:	2300      	movs	r3, #0
 800949e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d002      	beq.n	80094b0 <CDC_ProcessReception+0x26>
 80094aa:	2b04      	cmp	r3, #4
 80094ac:	d00e      	beq.n	80094cc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80094ae:	e043      	b.n	8009538 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	6a19      	ldr	r1, [r3, #32]
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	8b5a      	ldrh	r2, [r3, #26]
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	7b1b      	ldrb	r3, [r3, #12]
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f001 fc91 	bl	800ade4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	2204      	movs	r2, #4
 80094c6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80094ca:	e035      	b.n	8009538 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	7b1b      	ldrb	r3, [r3, #12]
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f001 ff90 	bl	800b3f8 <USBH_LL_GetURBState>
 80094d8:	4603      	mov	r3, r0
 80094da:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80094dc:	7cfb      	ldrb	r3, [r7, #19]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d129      	bne.n	8009536 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	7b1b      	ldrb	r3, [r3, #12]
 80094e6:	4619      	mov	r1, r3
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f001 fef3 	bl	800b2d4 <USBH_LL_GetLastXferSize>
 80094ee:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d016      	beq.n	8009528 <CDC_ProcessReception+0x9e>
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	8b5b      	ldrh	r3, [r3, #26]
 80094fe:	461a      	mov	r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	4293      	cmp	r3, r2
 8009504:	d910      	bls.n	8009528 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	1ad2      	subs	r2, r2, r3
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	6a1a      	ldr	r2, [r3, #32]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	441a      	add	r2, r3
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	2203      	movs	r2, #3
 8009522:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009526:	e006      	b.n	8009536 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	2200      	movs	r2, #0
 800952c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 f80f 	bl	8009554 <USBH_CDC_ReceiveCallback>
      break;
 8009536:	bf00      	nop
  }
}
 8009538:	bf00      	nop
 800953a:	3718      	adds	r7, #24
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	4613      	mov	r3, r2
 8009588:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d101      	bne.n	8009594 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009590:	2302      	movs	r3, #2
 8009592:	e029      	b.n	80095e8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	79fa      	ldrb	r2, [r7, #7]
 8009598:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2200      	movs	r2, #0
 80095a0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f000 f81f 	bl	80095f0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d003      	beq.n	80095e0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f001 fdc3 	bl	800b16c <USBH_LL_Init>

  return USBH_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80095f8:	2300      	movs	r3, #0
 80095fa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80095fc:	2300      	movs	r3, #0
 80095fe:	60fb      	str	r3, [r7, #12]
 8009600:	e009      	b.n	8009616 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	33e0      	adds	r3, #224	@ 0xe0
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	2200      	movs	r2, #0
 800960e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	3301      	adds	r3, #1
 8009614:	60fb      	str	r3, [r7, #12]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2b0f      	cmp	r3, #15
 800961a:	d9f2      	bls.n	8009602 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800961c:	2300      	movs	r3, #0
 800961e:	60fb      	str	r3, [r7, #12]
 8009620:	e009      	b.n	8009636 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	4413      	add	r3, r2
 8009628:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800962c:	2200      	movs	r2, #0
 800962e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	3301      	adds	r3, #1
 8009634:	60fb      	str	r3, [r7, #12]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800963c:	d3f1      	bcc.n	8009622 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2201      	movs	r2, #1
 800964e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2240      	movs	r2, #64	@ 0x40
 8009662:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	331c      	adds	r3, #28
 800968e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009692:	2100      	movs	r1, #0
 8009694:	4618      	mov	r0, r3
 8009696:	f002 fd9a 	bl	800c1ce <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80096a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80096a4:	2100      	movs	r1, #0
 80096a6:	4618      	mov	r0, r3
 80096a8:	f002 fd91 	bl	800c1ce <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80096b2:	2212      	movs	r2, #18
 80096b4:	2100      	movs	r1, #0
 80096b6:	4618      	mov	r0, r3
 80096b8:	f002 fd89 	bl	800c1ce <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80096c2:	223e      	movs	r2, #62	@ 0x3e
 80096c4:	2100      	movs	r1, #0
 80096c6:	4618      	mov	r0, r3
 80096c8:	f002 fd81 	bl	800c1ce <memset>

  return USBH_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80096d6:	b480      	push	{r7}
 80096d8:	b085      	sub	sp, #20
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d016      	beq.n	8009718 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10e      	bne.n	8009712 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80096fa:	1c59      	adds	r1, r3, #1
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	33de      	adds	r3, #222	@ 0xde
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	73fb      	strb	r3, [r7, #15]
 8009710:	e004      	b.n	800971c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009712:	2302      	movs	r3, #2
 8009714:	73fb      	strb	r3, [r7, #15]
 8009716:	e001      	b.n	800971c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009718:	2302      	movs	r3, #2
 800971a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800971c:	7bfb      	ldrb	r3, [r7, #15]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3714      	adds	r7, #20
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800972a:	b480      	push	{r7}
 800972c:	b085      	sub	sp, #20
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
 8009732:	460b      	mov	r3, r1
 8009734:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009736:	2300      	movs	r3, #0
 8009738:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009740:	78fa      	ldrb	r2, [r7, #3]
 8009742:	429a      	cmp	r2, r3
 8009744:	d204      	bcs.n	8009750 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	78fa      	ldrb	r2, [r7, #3]
 800974a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800974e:	e001      	b.n	8009754 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009750:	2302      	movs	r3, #2
 8009752:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009754:	7bfb      	ldrb	r3, [r7, #15]
}
 8009756:	4618      	mov	r0, r3
 8009758:	3714      	adds	r7, #20
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009762:	b480      	push	{r7}
 8009764:	b087      	sub	sp, #28
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	4608      	mov	r0, r1
 800976c:	4611      	mov	r1, r2
 800976e:	461a      	mov	r2, r3
 8009770:	4603      	mov	r3, r0
 8009772:	70fb      	strb	r3, [r7, #3]
 8009774:	460b      	mov	r3, r1
 8009776:	70bb      	strb	r3, [r7, #2]
 8009778:	4613      	mov	r3, r2
 800977a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800977c:	2300      	movs	r3, #0
 800977e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009780:	2300      	movs	r3, #0
 8009782:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800978a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800978c:	e025      	b.n	80097da <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800978e:	7dfb      	ldrb	r3, [r7, #23]
 8009790:	221a      	movs	r2, #26
 8009792:	fb02 f303 	mul.w	r3, r2, r3
 8009796:	3308      	adds	r3, #8
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	4413      	add	r3, r2
 800979c:	3302      	adds	r3, #2
 800979e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	795b      	ldrb	r3, [r3, #5]
 80097a4:	78fa      	ldrb	r2, [r7, #3]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d002      	beq.n	80097b0 <USBH_FindInterface+0x4e>
 80097aa:	78fb      	ldrb	r3, [r7, #3]
 80097ac:	2bff      	cmp	r3, #255	@ 0xff
 80097ae:	d111      	bne.n	80097d4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80097b4:	78ba      	ldrb	r2, [r7, #2]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d002      	beq.n	80097c0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80097ba:	78bb      	ldrb	r3, [r7, #2]
 80097bc:	2bff      	cmp	r3, #255	@ 0xff
 80097be:	d109      	bne.n	80097d4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80097c4:	787a      	ldrb	r2, [r7, #1]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d002      	beq.n	80097d0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80097ca:	787b      	ldrb	r3, [r7, #1]
 80097cc:	2bff      	cmp	r3, #255	@ 0xff
 80097ce:	d101      	bne.n	80097d4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80097d0:	7dfb      	ldrb	r3, [r7, #23]
 80097d2:	e006      	b.n	80097e2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80097d4:	7dfb      	ldrb	r3, [r7, #23]
 80097d6:	3301      	adds	r3, #1
 80097d8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80097da:	7dfb      	ldrb	r3, [r7, #23]
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d9d6      	bls.n	800978e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80097e0:	23ff      	movs	r3, #255	@ 0xff
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	371c      	adds	r7, #28
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b082      	sub	sp, #8
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f001 fcf4 	bl	800b1e4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80097fc:	2101      	movs	r1, #1
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f001 fe0d 	bl	800b41e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
	...

08009810 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b088      	sub	sp, #32
 8009814:	af04      	add	r7, sp, #16
 8009816:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009818:	2302      	movs	r3, #2
 800981a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800981c:	2300      	movs	r3, #0
 800981e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009826:	b2db      	uxtb	r3, r3
 8009828:	2b01      	cmp	r3, #1
 800982a:	d102      	bne.n	8009832 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2203      	movs	r2, #3
 8009830:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b0b      	cmp	r3, #11
 800983a:	f200 81bb 	bhi.w	8009bb4 <USBH_Process+0x3a4>
 800983e:	a201      	add	r2, pc, #4	@ (adr r2, 8009844 <USBH_Process+0x34>)
 8009840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009844:	08009875 	.word	0x08009875
 8009848:	080098a7 	.word	0x080098a7
 800984c:	0800990f 	.word	0x0800990f
 8009850:	08009b4f 	.word	0x08009b4f
 8009854:	08009bb5 	.word	0x08009bb5
 8009858:	080099af 	.word	0x080099af
 800985c:	08009af5 	.word	0x08009af5
 8009860:	080099e5 	.word	0x080099e5
 8009864:	08009a05 	.word	0x08009a05
 8009868:	08009a23 	.word	0x08009a23
 800986c:	08009a67 	.word	0x08009a67
 8009870:	08009b37 	.word	0x08009b37
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2b00      	cmp	r3, #0
 800987e:	f000 819b 	beq.w	8009bb8 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2201      	movs	r2, #1
 8009886:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009888:	20c8      	movs	r0, #200	@ 0xc8
 800988a:	f001 fe12 	bl	800b4b2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f001 fd05 	bl	800b29e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80098a4:	e188      	b.n	8009bb8 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d107      	bne.n	80098c0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2202      	movs	r2, #2
 80098bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80098be:	e18a      	b.n	8009bd6 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80098c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80098ca:	d914      	bls.n	80098f6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80098d2:	3301      	adds	r3, #1
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80098e2:	2b03      	cmp	r3, #3
 80098e4:	d903      	bls.n	80098ee <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	220d      	movs	r2, #13
 80098ea:	701a      	strb	r2, [r3, #0]
      break;
 80098ec:	e173      	b.n	8009bd6 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	701a      	strb	r2, [r3, #0]
      break;
 80098f4:	e16f      	b.n	8009bd6 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80098fc:	f103 020a 	add.w	r2, r3, #10
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009906:	200a      	movs	r0, #10
 8009908:	f001 fdd3 	bl	800b4b2 <USBH_Delay>
      break;
 800990c:	e163      	b.n	8009bd6 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009914:	2b00      	cmp	r3, #0
 8009916:	d005      	beq.n	8009924 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800991e:	2104      	movs	r1, #4
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009924:	2064      	movs	r0, #100	@ 0x64
 8009926:	f001 fdc4 	bl	800b4b2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f001 fc90 	bl	800b250 <USBH_LL_GetSpeed>
 8009930:	4603      	mov	r3, r0
 8009932:	461a      	mov	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2205      	movs	r2, #5
 800993e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009940:	2100      	movs	r1, #0
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f001 fa9b 	bl	800ae7e <USBH_AllocPipe>
 8009948:	4603      	mov	r3, r0
 800994a:	461a      	mov	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009950:	2180      	movs	r1, #128	@ 0x80
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f001 fa93 	bl	800ae7e <USBH_AllocPipe>
 8009958:	4603      	mov	r3, r0
 800995a:	461a      	mov	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	7919      	ldrb	r1, [r3, #4]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009974:	9202      	str	r2, [sp, #8]
 8009976:	2200      	movs	r2, #0
 8009978:	9201      	str	r2, [sp, #4]
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	4603      	mov	r3, r0
 800997e:	2280      	movs	r2, #128	@ 0x80
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f001 fa4d 	bl	800ae20 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	7959      	ldrb	r1, [r3, #5]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800999a:	9202      	str	r2, [sp, #8]
 800999c:	2200      	movs	r2, #0
 800999e:	9201      	str	r2, [sp, #4]
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	4603      	mov	r3, r0
 80099a4:	2200      	movs	r2, #0
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f001 fa3a 	bl	800ae20 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80099ac:	e113      	b.n	8009bd6 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f916 	bl	8009be0 <USBH_HandleEnum>
 80099b4:	4603      	mov	r3, r0
 80099b6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80099b8:	7bbb      	ldrb	r3, [r7, #14]
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f040 80fd 	bne.w	8009bbc <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d103      	bne.n	80099dc <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2208      	movs	r2, #8
 80099d8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80099da:	e0ef      	b.n	8009bbc <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2207      	movs	r2, #7
 80099e0:	701a      	strb	r2, [r3, #0]
      break;
 80099e2:	e0eb      	b.n	8009bbc <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	f000 80e8 	beq.w	8009bc0 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80099f6:	2101      	movs	r1, #1
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2208      	movs	r2, #8
 8009a00:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009a02:	e0dd      	b.n	8009bc0 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 fc3a 	bl	800a286 <USBH_SetCfg>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f040 80d5 	bne.w	8009bc4 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2209      	movs	r2, #9
 8009a1e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a20:	e0d0      	b.n	8009bc4 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009a28:	f003 0320 	and.w	r3, r3, #32
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d016      	beq.n	8009a5e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009a30:	2101      	movs	r1, #1
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fc4a 	bl	800a2cc <USBH_SetFeature>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009a3c:	7bbb      	ldrb	r3, [r7, #14]
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d103      	bne.n	8009a4c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	220a      	movs	r2, #10
 8009a48:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a4a:	e0bd      	b.n	8009bc8 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009a4c:	7bbb      	ldrb	r3, [r7, #14]
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	2b03      	cmp	r3, #3
 8009a52:	f040 80b9 	bne.w	8009bc8 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	220a      	movs	r2, #10
 8009a5a:	701a      	strb	r2, [r3, #0]
      break;
 8009a5c:	e0b4      	b.n	8009bc8 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	220a      	movs	r2, #10
 8009a62:	701a      	strb	r2, [r3, #0]
      break;
 8009a64:	e0b0      	b.n	8009bc8 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 80ad 	beq.w	8009bcc <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	73fb      	strb	r3, [r7, #15]
 8009a7e:	e016      	b.n	8009aae <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009a80:	7bfa      	ldrb	r2, [r7, #15]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	32de      	adds	r2, #222	@ 0xde
 8009a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a8a:	791a      	ldrb	r2, [r3, #4]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d108      	bne.n	8009aa8 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009a96:	7bfa      	ldrb	r2, [r7, #15]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	32de      	adds	r2, #222	@ 0xde
 8009a9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009aa6:	e005      	b.n	8009ab4 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009aa8:	7bfb      	ldrb	r3, [r7, #15]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	73fb      	strb	r3, [r7, #15]
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d0e5      	beq.n	8009a80 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d016      	beq.n	8009aec <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	4798      	blx	r3
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d109      	bne.n	8009ae4 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2206      	movs	r2, #6
 8009ad4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009adc:	2103      	movs	r1, #3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009ae2:	e073      	b.n	8009bcc <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	220d      	movs	r2, #13
 8009ae8:	701a      	strb	r2, [r3, #0]
      break;
 8009aea:	e06f      	b.n	8009bcc <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	220d      	movs	r2, #13
 8009af0:	701a      	strb	r2, [r3, #0]
      break;
 8009af2:	e06b      	b.n	8009bcc <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d017      	beq.n	8009b2e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b04:	691b      	ldr	r3, [r3, #16]
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	4798      	blx	r3
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009b0e:	7bbb      	ldrb	r3, [r7, #14]
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d103      	bne.n	8009b1e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	220b      	movs	r2, #11
 8009b1a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009b1c:	e058      	b.n	8009bd0 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009b1e:	7bbb      	ldrb	r3, [r7, #14]
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	2b02      	cmp	r3, #2
 8009b24:	d154      	bne.n	8009bd0 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	220d      	movs	r2, #13
 8009b2a:	701a      	strb	r2, [r3, #0]
      break;
 8009b2c:	e050      	b.n	8009bd0 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	220d      	movs	r2, #13
 8009b32:	701a      	strb	r2, [r3, #0]
      break;
 8009b34:	e04c      	b.n	8009bd0 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d049      	beq.n	8009bd4 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b46:	695b      	ldr	r3, [r3, #20]
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	4798      	blx	r3
      }
      break;
 8009b4c:	e042      	b.n	8009bd4 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f7ff fd4a 	bl	80095f0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d009      	beq.n	8009b7a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009b6c:	68db      	ldr	r3, [r3, #12]
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d005      	beq.n	8009b90 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b8a:	2105      	movs	r1, #5
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d107      	bne.n	8009bac <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f7ff fe22 	bl	80097ee <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009baa:	e014      	b.n	8009bd6 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f001 fb19 	bl	800b1e4 <USBH_LL_Start>
      break;
 8009bb2:	e010      	b.n	8009bd6 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009bb4:	bf00      	nop
 8009bb6:	e00e      	b.n	8009bd6 <USBH_Process+0x3c6>
      break;
 8009bb8:	bf00      	nop
 8009bba:	e00c      	b.n	8009bd6 <USBH_Process+0x3c6>
      break;
 8009bbc:	bf00      	nop
 8009bbe:	e00a      	b.n	8009bd6 <USBH_Process+0x3c6>
    break;
 8009bc0:	bf00      	nop
 8009bc2:	e008      	b.n	8009bd6 <USBH_Process+0x3c6>
      break;
 8009bc4:	bf00      	nop
 8009bc6:	e006      	b.n	8009bd6 <USBH_Process+0x3c6>
      break;
 8009bc8:	bf00      	nop
 8009bca:	e004      	b.n	8009bd6 <USBH_Process+0x3c6>
      break;
 8009bcc:	bf00      	nop
 8009bce:	e002      	b.n	8009bd6 <USBH_Process+0x3c6>
      break;
 8009bd0:	bf00      	nop
 8009bd2:	e000      	b.n	8009bd6 <USBH_Process+0x3c6>
      break;
 8009bd4:	bf00      	nop
  }
  return USBH_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b088      	sub	sp, #32
 8009be4:	af04      	add	r7, sp, #16
 8009be6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009be8:	2301      	movs	r3, #1
 8009bea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009bec:	2301      	movs	r3, #1
 8009bee:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	785b      	ldrb	r3, [r3, #1]
 8009bf4:	2b07      	cmp	r3, #7
 8009bf6:	f200 81bd 	bhi.w	8009f74 <USBH_HandleEnum+0x394>
 8009bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8009c00 <USBH_HandleEnum+0x20>)
 8009bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c00:	08009c21 	.word	0x08009c21
 8009c04:	08009cdb 	.word	0x08009cdb
 8009c08:	08009d45 	.word	0x08009d45
 8009c0c:	08009dcf 	.word	0x08009dcf
 8009c10:	08009e39 	.word	0x08009e39
 8009c14:	08009ea9 	.word	0x08009ea9
 8009c18:	08009eef 	.word	0x08009eef
 8009c1c:	08009f35 	.word	0x08009f35
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009c20:	2108      	movs	r1, #8
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fa4c 	bl	800a0c0 <USBH_Get_DevDesc>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009c2c:	7bbb      	ldrb	r3, [r7, #14]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d12e      	bne.n	8009c90 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	7919      	ldrb	r1, [r3, #4]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009c56:	9202      	str	r2, [sp, #8]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	9201      	str	r2, [sp, #4]
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2280      	movs	r2, #128	@ 0x80
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f001 f8dc 	bl	800ae20 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	7959      	ldrb	r1, [r3, #5]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c7c:	9202      	str	r2, [sp, #8]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	9201      	str	r2, [sp, #4]
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	4603      	mov	r3, r0
 8009c86:	2200      	movs	r2, #0
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f001 f8c9 	bl	800ae20 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009c8e:	e173      	b.n	8009f78 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c90:	7bbb      	ldrb	r3, [r7, #14]
 8009c92:	2b03      	cmp	r3, #3
 8009c94:	f040 8170 	bne.w	8009f78 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	b2da      	uxtb	r2, r3
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009cae:	2b03      	cmp	r3, #3
 8009cb0:	d903      	bls.n	8009cba <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	220d      	movs	r2, #13
 8009cb6:	701a      	strb	r2, [r3, #0]
      break;
 8009cb8:	e15e      	b.n	8009f78 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	795b      	ldrb	r3, [r3, #5]
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f001 f8fd 	bl	800aec0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	791b      	ldrb	r3, [r3, #4]
 8009cca:	4619      	mov	r1, r3
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f001 f8f7 	bl	800aec0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	701a      	strb	r2, [r3, #0]
      break;
 8009cd8:	e14e      	b.n	8009f78 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009cda:	2112      	movs	r1, #18
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f9ef 	bl	800a0c0 <USBH_Get_DevDesc>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ce6:	7bbb      	ldrb	r3, [r7, #14]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d103      	bne.n	8009cf4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2202      	movs	r2, #2
 8009cf0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009cf2:	e143      	b.n	8009f7c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009cf4:	7bbb      	ldrb	r3, [r7, #14]
 8009cf6:	2b03      	cmp	r3, #3
 8009cf8:	f040 8140 	bne.w	8009f7c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d02:	3301      	adds	r3, #1
 8009d04:	b2da      	uxtb	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d12:	2b03      	cmp	r3, #3
 8009d14:	d903      	bls.n	8009d1e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	220d      	movs	r2, #13
 8009d1a:	701a      	strb	r2, [r3, #0]
      break;
 8009d1c:	e12e      	b.n	8009f7c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	795b      	ldrb	r3, [r3, #5]
 8009d22:	4619      	mov	r1, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f001 f8cb 	bl	800aec0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	791b      	ldrb	r3, [r3, #4]
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f001 f8c5 	bl	800aec0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	701a      	strb	r2, [r3, #0]
      break;
 8009d42:	e11b      	b.n	8009f7c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009d44:	2101      	movs	r1, #1
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fa79 	bl	800a23e <USBH_SetAddress>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d50:	7bbb      	ldrb	r3, [r7, #14]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d130      	bne.n	8009db8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009d56:	2002      	movs	r0, #2
 8009d58:	f001 fbab 	bl	800b4b2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2203      	movs	r2, #3
 8009d68:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	7919      	ldrb	r1, [r3, #4]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009d7e:	9202      	str	r2, [sp, #8]
 8009d80:	2200      	movs	r2, #0
 8009d82:	9201      	str	r2, [sp, #4]
 8009d84:	9300      	str	r3, [sp, #0]
 8009d86:	4603      	mov	r3, r0
 8009d88:	2280      	movs	r2, #128	@ 0x80
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f001 f848 	bl	800ae20 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	7959      	ldrb	r1, [r3, #5]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009da4:	9202      	str	r2, [sp, #8]
 8009da6:	2200      	movs	r2, #0
 8009da8:	9201      	str	r2, [sp, #4]
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	4603      	mov	r3, r0
 8009dae:	2200      	movs	r2, #0
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f001 f835 	bl	800ae20 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009db6:	e0e3      	b.n	8009f80 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009db8:	7bbb      	ldrb	r3, [r7, #14]
 8009dba:	2b03      	cmp	r3, #3
 8009dbc:	f040 80e0 	bne.w	8009f80 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	220d      	movs	r2, #13
 8009dc4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	705a      	strb	r2, [r3, #1]
      break;
 8009dcc:	e0d8      	b.n	8009f80 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009dce:	2109      	movs	r1, #9
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 f9a1 	bl	800a118 <USBH_Get_CfgDesc>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009dda:	7bbb      	ldrb	r3, [r7, #14]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d103      	bne.n	8009de8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2204      	movs	r2, #4
 8009de4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009de6:	e0cd      	b.n	8009f84 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009de8:	7bbb      	ldrb	r3, [r7, #14]
 8009dea:	2b03      	cmp	r3, #3
 8009dec:	f040 80ca 	bne.w	8009f84 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009df6:	3301      	adds	r3, #1
 8009df8:	b2da      	uxtb	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009e06:	2b03      	cmp	r3, #3
 8009e08:	d903      	bls.n	8009e12 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	220d      	movs	r2, #13
 8009e0e:	701a      	strb	r2, [r3, #0]
      break;
 8009e10:	e0b8      	b.n	8009f84 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	795b      	ldrb	r3, [r3, #5]
 8009e16:	4619      	mov	r1, r3
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f001 f851 	bl	800aec0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	791b      	ldrb	r3, [r3, #4]
 8009e22:	4619      	mov	r1, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f001 f84b 	bl	800aec0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	701a      	strb	r2, [r3, #0]
      break;
 8009e36:	e0a5      	b.n	8009f84 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009e3e:	4619      	mov	r1, r3
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 f969 	bl	800a118 <USBH_Get_CfgDesc>
 8009e46:	4603      	mov	r3, r0
 8009e48:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e4a:	7bbb      	ldrb	r3, [r7, #14]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d103      	bne.n	8009e58 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2205      	movs	r2, #5
 8009e54:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009e56:	e097      	b.n	8009f88 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e58:	7bbb      	ldrb	r3, [r7, #14]
 8009e5a:	2b03      	cmp	r3, #3
 8009e5c:	f040 8094 	bne.w	8009f88 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009e66:	3301      	adds	r3, #1
 8009e68:	b2da      	uxtb	r2, r3
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009e76:	2b03      	cmp	r3, #3
 8009e78:	d903      	bls.n	8009e82 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	220d      	movs	r2, #13
 8009e7e:	701a      	strb	r2, [r3, #0]
      break;
 8009e80:	e082      	b.n	8009f88 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	795b      	ldrb	r3, [r3, #5]
 8009e86:	4619      	mov	r1, r3
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f001 f819 	bl	800aec0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	791b      	ldrb	r3, [r3, #4]
 8009e92:	4619      	mov	r1, r3
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f001 f813 	bl	800aec0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	701a      	strb	r2, [r3, #0]
      break;
 8009ea6:	e06f      	b.n	8009f88 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d019      	beq.n	8009ee6 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009ebe:	23ff      	movs	r3, #255	@ 0xff
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 f953 	bl	800a16c <USBH_Get_StringDesc>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009eca:	7bbb      	ldrb	r3, [r7, #14]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d103      	bne.n	8009ed8 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2206      	movs	r2, #6
 8009ed4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009ed6:	e059      	b.n	8009f8c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ed8:	7bbb      	ldrb	r3, [r7, #14]
 8009eda:	2b03      	cmp	r3, #3
 8009edc:	d156      	bne.n	8009f8c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2206      	movs	r2, #6
 8009ee2:	705a      	strb	r2, [r3, #1]
      break;
 8009ee4:	e052      	b.n	8009f8c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2206      	movs	r2, #6
 8009eea:	705a      	strb	r2, [r3, #1]
      break;
 8009eec:	e04e      	b.n	8009f8c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d019      	beq.n	8009f2c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009f04:	23ff      	movs	r3, #255	@ 0xff
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f930 	bl	800a16c <USBH_Get_StringDesc>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009f10:	7bbb      	ldrb	r3, [r7, #14]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d103      	bne.n	8009f1e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2207      	movs	r2, #7
 8009f1a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009f1c:	e038      	b.n	8009f90 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f1e:	7bbb      	ldrb	r3, [r7, #14]
 8009f20:	2b03      	cmp	r3, #3
 8009f22:	d135      	bne.n	8009f90 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2207      	movs	r2, #7
 8009f28:	705a      	strb	r2, [r3, #1]
      break;
 8009f2a:	e031      	b.n	8009f90 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2207      	movs	r2, #7
 8009f30:	705a      	strb	r2, [r3, #1]
      break;
 8009f32:	e02d      	b.n	8009f90 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d017      	beq.n	8009f6e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009f4a:	23ff      	movs	r3, #255	@ 0xff
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 f90d 	bl	800a16c <USBH_Get_StringDesc>
 8009f52:	4603      	mov	r3, r0
 8009f54:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009f56:	7bbb      	ldrb	r3, [r7, #14]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d102      	bne.n	8009f62 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009f60:	e018      	b.n	8009f94 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f62:	7bbb      	ldrb	r3, [r7, #14]
 8009f64:	2b03      	cmp	r3, #3
 8009f66:	d115      	bne.n	8009f94 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8009f6c:	e012      	b.n	8009f94 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	73fb      	strb	r3, [r7, #15]
      break;
 8009f72:	e00f      	b.n	8009f94 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009f74:	bf00      	nop
 8009f76:	e00e      	b.n	8009f96 <USBH_HandleEnum+0x3b6>
      break;
 8009f78:	bf00      	nop
 8009f7a:	e00c      	b.n	8009f96 <USBH_HandleEnum+0x3b6>
      break;
 8009f7c:	bf00      	nop
 8009f7e:	e00a      	b.n	8009f96 <USBH_HandleEnum+0x3b6>
      break;
 8009f80:	bf00      	nop
 8009f82:	e008      	b.n	8009f96 <USBH_HandleEnum+0x3b6>
      break;
 8009f84:	bf00      	nop
 8009f86:	e006      	b.n	8009f96 <USBH_HandleEnum+0x3b6>
      break;
 8009f88:	bf00      	nop
 8009f8a:	e004      	b.n	8009f96 <USBH_HandleEnum+0x3b6>
      break;
 8009f8c:	bf00      	nop
 8009f8e:	e002      	b.n	8009f96 <USBH_HandleEnum+0x3b6>
      break;
 8009f90:	bf00      	nop
 8009f92:	e000      	b.n	8009f96 <USBH_HandleEnum+0x3b6>
      break;
 8009f94:	bf00      	nop
  }
  return Status;
 8009f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	683a      	ldr	r2, [r7, #0]
 8009fae:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009fb2:	bf00      	nop
 8009fb4:	370c      	adds	r7, #12
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr

08009fbe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b082      	sub	sp, #8
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009fcc:	1c5a      	adds	r2, r3, #1
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f804 	bl	8009fe2 <USBH_HandleSof>
}
 8009fda:	bf00      	nop
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b082      	sub	sp, #8
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	2b0b      	cmp	r3, #11
 8009ff2:	d10a      	bne.n	800a00a <USBH_HandleSof+0x28>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d005      	beq.n	800a00a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a004:	699b      	ldr	r3, [r3, #24]
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	4798      	blx	r3
  }
}
 800a00a:	bf00      	nop
 800a00c:	3708      	adds	r7, #8
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a012:	b480      	push	{r7}
 800a014:	b083      	sub	sp, #12
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2201      	movs	r2, #1
 800a01e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a022:	bf00      	nop
}
 800a024:	370c      	adds	r7, #12
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr

0800a02e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a02e:	b480      	push	{r7}
 800a030:	b083      	sub	sp, #12
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800a03e:	bf00      	nop
}
 800a040:	370c      	adds	r7, #12
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr

0800a04a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a04a:	b480      	push	{r7}
 800a04c:	b083      	sub	sp, #12
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2201      	movs	r2, #1
 800a056:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f001 f8be 	bl	800b21a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	791b      	ldrb	r3, [r3, #4]
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 ff0b 	bl	800aec0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	795b      	ldrb	r3, [r3, #5]
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 ff05 	bl	800aec0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af02      	add	r7, sp, #8
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a0cc:	887b      	ldrh	r3, [r7, #2]
 800a0ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0d2:	d901      	bls.n	800a0d8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a0d4:	2303      	movs	r3, #3
 800a0d6:	e01b      	b.n	800a110 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a0de:	887b      	ldrh	r3, [r7, #2]
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 f872 	bl	800a1d4 <USBH_GetDescriptor>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d109      	bne.n	800a10e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a100:	887a      	ldrh	r2, [r7, #2]
 800a102:	4619      	mov	r1, r3
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 f929 	bl	800a35c <USBH_ParseDevDesc>
 800a10a:	4603      	mov	r3, r0
 800a10c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a10e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a110:	4618      	mov	r0, r3
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af02      	add	r7, sp, #8
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	460b      	mov	r3, r1
 800a122:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	331c      	adds	r3, #28
 800a128:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a12a:	887b      	ldrh	r3, [r7, #2]
 800a12c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a130:	d901      	bls.n	800a136 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a132:	2303      	movs	r3, #3
 800a134:	e016      	b.n	800a164 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a136:	887b      	ldrh	r3, [r7, #2]
 800a138:	9300      	str	r3, [sp, #0]
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a140:	2100      	movs	r1, #0
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f846 	bl	800a1d4 <USBH_GetDescriptor>
 800a148:	4603      	mov	r3, r0
 800a14a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a14c:	7bfb      	ldrb	r3, [r7, #15]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d107      	bne.n	800a162 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a152:	887b      	ldrh	r3, [r7, #2]
 800a154:	461a      	mov	r2, r3
 800a156:	68b9      	ldr	r1, [r7, #8]
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 f9af 	bl	800a4bc <USBH_ParseCfgDesc>
 800a15e:	4603      	mov	r3, r0
 800a160:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a162:	7bfb      	ldrb	r3, [r7, #15]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b088      	sub	sp, #32
 800a170:	af02      	add	r7, sp, #8
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	607a      	str	r2, [r7, #4]
 800a176:	461a      	mov	r2, r3
 800a178:	460b      	mov	r3, r1
 800a17a:	72fb      	strb	r3, [r7, #11]
 800a17c:	4613      	mov	r3, r2
 800a17e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a180:	893b      	ldrh	r3, [r7, #8]
 800a182:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a186:	d802      	bhi.n	800a18e <USBH_Get_StringDesc+0x22>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d101      	bne.n	800a192 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a18e:	2303      	movs	r3, #3
 800a190:	e01c      	b.n	800a1cc <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a192:	7afb      	ldrb	r3, [r7, #11]
 800a194:	b29b      	uxth	r3, r3
 800a196:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a19a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a1a2:	893b      	ldrh	r3, [r7, #8]
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f000 f812 	bl	800a1d4 <USBH_GetDescriptor>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a1b4:	7dfb      	ldrb	r3, [r7, #23]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d107      	bne.n	800a1ca <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a1c0:	893a      	ldrh	r2, [r7, #8]
 800a1c2:	6879      	ldr	r1, [r7, #4]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f000 fb8d 	bl	800a8e4 <USBH_ParseStringDesc>
  }

  return status;
 800a1ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3718      	adds	r7, #24
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	607b      	str	r3, [r7, #4]
 800a1de:	460b      	mov	r3, r1
 800a1e0:	72fb      	strb	r3, [r7, #11]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	789b      	ldrb	r3, [r3, #2]
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d11c      	bne.n	800a228 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a1ee:	7afb      	ldrb	r3, [r7, #11]
 800a1f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a1f4:	b2da      	uxtb	r2, r3
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2206      	movs	r2, #6
 800a1fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	893a      	ldrh	r2, [r7, #8]
 800a204:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a206:	893b      	ldrh	r3, [r7, #8]
 800a208:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a20c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a210:	d104      	bne.n	800a21c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f240 4209 	movw	r2, #1033	@ 0x409
 800a218:	829a      	strh	r2, [r3, #20]
 800a21a:	e002      	b.n	800a222 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	8b3a      	ldrh	r2, [r7, #24]
 800a226:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a228:	8b3b      	ldrh	r3, [r7, #24]
 800a22a:	461a      	mov	r2, r3
 800a22c:	6879      	ldr	r1, [r7, #4]
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f000 fba5 	bl	800a97e <USBH_CtlReq>
 800a234:	4603      	mov	r3, r0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b082      	sub	sp, #8
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
 800a246:	460b      	mov	r3, r1
 800a248:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	789b      	ldrb	r3, [r3, #2]
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d10f      	bne.n	800a272 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2205      	movs	r2, #5
 800a25c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a25e:	78fb      	ldrb	r3, [r7, #3]
 800a260:	b29a      	uxth	r2, r3
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a272:	2200      	movs	r2, #0
 800a274:	2100      	movs	r1, #0
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 fb81 	bl	800a97e <USBH_CtlReq>
 800a27c:	4603      	mov	r3, r0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3708      	adds	r7, #8
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b082      	sub	sp, #8
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
 800a28e:	460b      	mov	r3, r1
 800a290:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	789b      	ldrb	r3, [r3, #2]
 800a296:	2b01      	cmp	r3, #1
 800a298:	d10e      	bne.n	800a2b8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2209      	movs	r2, #9
 800a2a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	887a      	ldrh	r2, [r7, #2]
 800a2aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	2100      	movs	r1, #0
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fb5e 	bl	800a97e <USBH_CtlReq>
 800a2c2:	4603      	mov	r3, r0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	789b      	ldrb	r3, [r3, #2]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d10f      	bne.n	800a300 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2203      	movs	r2, #3
 800a2ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a2ec:	78fb      	ldrb	r3, [r7, #3]
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a300:	2200      	movs	r2, #0
 800a302:	2100      	movs	r1, #0
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fb3a 	bl	800a97e <USBH_CtlReq>
 800a30a:	4603      	mov	r3, r0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	460b      	mov	r3, r1
 800a31e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	789b      	ldrb	r3, [r3, #2]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d10f      	bne.n	800a348 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2202      	movs	r2, #2
 800a32c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a33a:	78fb      	ldrb	r3, [r7, #3]
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a348:	2200      	movs	r2, #0
 800a34a:	2100      	movs	r1, #0
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 fb16 	bl	800a97e <USBH_CtlReq>
 800a352:	4603      	mov	r3, r0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3708      	adds	r7, #8
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b087      	sub	sp, #28
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	4613      	mov	r3, r2
 800a368:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a370:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a372:	2300      	movs	r3, #0
 800a374:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d101      	bne.n	800a380 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a37c:	2302      	movs	r3, #2
 800a37e:	e094      	b.n	800a4aa <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	781a      	ldrb	r2, [r3, #0]
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	785a      	ldrb	r2, [r3, #1]
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	3302      	adds	r3, #2
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	461a      	mov	r2, r3
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	3303      	adds	r3, #3
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	021b      	lsls	r3, r3, #8
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	791a      	ldrb	r2, [r3, #4]
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	795a      	ldrb	r2, [r3, #5]
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	799a      	ldrb	r2, [r3, #6]
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	79da      	ldrb	r2, [r3, #7]
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d004      	beq.n	800a3de <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d11b      	bne.n	800a416 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	79db      	ldrb	r3, [r3, #7]
 800a3e2:	2b20      	cmp	r3, #32
 800a3e4:	dc0f      	bgt.n	800a406 <USBH_ParseDevDesc+0xaa>
 800a3e6:	2b08      	cmp	r3, #8
 800a3e8:	db0f      	blt.n	800a40a <USBH_ParseDevDesc+0xae>
 800a3ea:	3b08      	subs	r3, #8
 800a3ec:	4a32      	ldr	r2, [pc, #200]	@ (800a4b8 <USBH_ParseDevDesc+0x15c>)
 800a3ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a3f2:	f003 0301 	and.w	r3, r3, #1
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	bf14      	ite	ne
 800a3fa:	2301      	movne	r3, #1
 800a3fc:	2300      	moveq	r3, #0
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	2b00      	cmp	r3, #0
 800a402:	d106      	bne.n	800a412 <USBH_ParseDevDesc+0xb6>
 800a404:	e001      	b.n	800a40a <USBH_ParseDevDesc+0xae>
 800a406:	2b40      	cmp	r3, #64	@ 0x40
 800a408:	d003      	beq.n	800a412 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	2208      	movs	r2, #8
 800a40e:	71da      	strb	r2, [r3, #7]
        break;
 800a410:	e000      	b.n	800a414 <USBH_ParseDevDesc+0xb8>
        break;
 800a412:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a414:	e00e      	b.n	800a434 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	d107      	bne.n	800a430 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	79db      	ldrb	r3, [r3, #7]
 800a424:	2b08      	cmp	r3, #8
 800a426:	d005      	beq.n	800a434 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	2208      	movs	r2, #8
 800a42c:	71da      	strb	r2, [r3, #7]
 800a42e:	e001      	b.n	800a434 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a430:	2303      	movs	r3, #3
 800a432:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a434:	88fb      	ldrh	r3, [r7, #6]
 800a436:	2b08      	cmp	r3, #8
 800a438:	d936      	bls.n	800a4a8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	3308      	adds	r3, #8
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	461a      	mov	r2, r3
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	3309      	adds	r3, #9
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	021b      	lsls	r3, r3, #8
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	4313      	orrs	r3, r2
 800a44e:	b29a      	uxth	r2, r3
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	330a      	adds	r3, #10
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	461a      	mov	r2, r3
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	330b      	adds	r3, #11
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	021b      	lsls	r3, r3, #8
 800a464:	b29b      	uxth	r3, r3
 800a466:	4313      	orrs	r3, r2
 800a468:	b29a      	uxth	r2, r3
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	330c      	adds	r3, #12
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	461a      	mov	r2, r3
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	330d      	adds	r3, #13
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	021b      	lsls	r3, r3, #8
 800a47e:	b29b      	uxth	r3, r3
 800a480:	4313      	orrs	r3, r2
 800a482:	b29a      	uxth	r2, r3
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	7b9a      	ldrb	r2, [r3, #14]
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	7bda      	ldrb	r2, [r3, #15]
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	7c1a      	ldrb	r2, [r3, #16]
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	7c5a      	ldrb	r2, [r3, #17]
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a4a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	371c      	adds	r7, #28
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	01000101 	.word	0x01000101

0800a4bc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b08c      	sub	sp, #48	@ 0x30
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	4613      	mov	r3, r2
 800a4c8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a4d0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d101      	bne.n	800a4ee <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a4ea:	2302      	movs	r3, #2
 800a4ec:	e0da      	b.n	800a6a4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	781a      	ldrb	r2, [r3, #0]
 800a4f6:	6a3b      	ldr	r3, [r7, #32]
 800a4f8:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	785a      	ldrb	r2, [r3, #1]
 800a4fe:	6a3b      	ldr	r3, [r7, #32]
 800a500:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	3302      	adds	r3, #2
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	461a      	mov	r2, r3
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	3303      	adds	r3, #3
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	021b      	lsls	r3, r3, #8
 800a512:	b29b      	uxth	r3, r3
 800a514:	4313      	orrs	r3, r2
 800a516:	b29b      	uxth	r3, r3
 800a518:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a51c:	bf28      	it	cs
 800a51e:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a522:	b29a      	uxth	r2, r3
 800a524:	6a3b      	ldr	r3, [r7, #32]
 800a526:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	791a      	ldrb	r2, [r3, #4]
 800a52c:	6a3b      	ldr	r3, [r7, #32]
 800a52e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	795a      	ldrb	r2, [r3, #5]
 800a534:	6a3b      	ldr	r3, [r7, #32]
 800a536:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	799a      	ldrb	r2, [r3, #6]
 800a53c:	6a3b      	ldr	r3, [r7, #32]
 800a53e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	79da      	ldrb	r2, [r3, #7]
 800a544:	6a3b      	ldr	r3, [r7, #32]
 800a546:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	7a1a      	ldrb	r2, [r3, #8]
 800a54c:	6a3b      	ldr	r3, [r7, #32]
 800a54e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a550:	6a3b      	ldr	r3, [r7, #32]
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	2b09      	cmp	r3, #9
 800a556:	d002      	beq.n	800a55e <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a558:	6a3b      	ldr	r3, [r7, #32]
 800a55a:	2209      	movs	r2, #9
 800a55c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a55e:	88fb      	ldrh	r3, [r7, #6]
 800a560:	2b09      	cmp	r3, #9
 800a562:	f240 809d 	bls.w	800a6a0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a566:	2309      	movs	r3, #9
 800a568:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a56a:	2300      	movs	r3, #0
 800a56c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a56e:	e081      	b.n	800a674 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a570:	f107 0316 	add.w	r3, r7, #22
 800a574:	4619      	mov	r1, r3
 800a576:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a578:	f000 f9e7 	bl	800a94a <USBH_GetNextDesc>
 800a57c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a580:	785b      	ldrb	r3, [r3, #1]
 800a582:	2b04      	cmp	r3, #4
 800a584:	d176      	bne.n	800a674 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	2b09      	cmp	r3, #9
 800a58c:	d002      	beq.n	800a594 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a590:	2209      	movs	r2, #9
 800a592:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a594:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a598:	221a      	movs	r2, #26
 800a59a:	fb02 f303 	mul.w	r3, r2, r3
 800a59e:	3308      	adds	r3, #8
 800a5a0:	6a3a      	ldr	r2, [r7, #32]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	3302      	adds	r3, #2
 800a5a6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a5a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a5aa:	69f8      	ldr	r0, [r7, #28]
 800a5ac:	f000 f87e 	bl	800a6ac <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a5ba:	e043      	b.n	800a644 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a5bc:	f107 0316 	add.w	r3, r7, #22
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5c4:	f000 f9c1 	bl	800a94a <USBH_GetNextDesc>
 800a5c8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5cc:	785b      	ldrb	r3, [r3, #1]
 800a5ce:	2b05      	cmp	r3, #5
 800a5d0:	d138      	bne.n	800a644 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	795b      	ldrb	r3, [r3, #5]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d113      	bne.n	800a602 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d003      	beq.n	800a5ea <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	799b      	ldrb	r3, [r3, #6]
 800a5e6:	2b03      	cmp	r3, #3
 800a5e8:	d10b      	bne.n	800a602 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	79db      	ldrb	r3, [r3, #7]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d10b      	bne.n	800a60a <USBH_ParseCfgDesc+0x14e>
 800a5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	2b09      	cmp	r3, #9
 800a5f8:	d007      	beq.n	800a60a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5fc:	2209      	movs	r2, #9
 800a5fe:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a600:	e003      	b.n	800a60a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a604:	2207      	movs	r2, #7
 800a606:	701a      	strb	r2, [r3, #0]
 800a608:	e000      	b.n	800a60c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a60a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a60c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a610:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a614:	3201      	adds	r2, #1
 800a616:	00d2      	lsls	r2, r2, #3
 800a618:	211a      	movs	r1, #26
 800a61a:	fb01 f303 	mul.w	r3, r1, r3
 800a61e:	4413      	add	r3, r2
 800a620:	3308      	adds	r3, #8
 800a622:	6a3a      	ldr	r2, [r7, #32]
 800a624:	4413      	add	r3, r2
 800a626:	3304      	adds	r3, #4
 800a628:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a62a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a62c:	69b9      	ldr	r1, [r7, #24]
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	f000 f870 	bl	800a714 <USBH_ParseEPDesc>
 800a634:	4603      	mov	r3, r0
 800a636:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a63a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a63e:	3301      	adds	r3, #1
 800a640:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a644:	69fb      	ldr	r3, [r7, #28]
 800a646:	791b      	ldrb	r3, [r3, #4]
 800a648:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d204      	bcs.n	800a65a <USBH_ParseCfgDesc+0x19e>
 800a650:	6a3b      	ldr	r3, [r7, #32]
 800a652:	885a      	ldrh	r2, [r3, #2]
 800a654:	8afb      	ldrh	r3, [r7, #22]
 800a656:	429a      	cmp	r2, r3
 800a658:	d8b0      	bhi.n	800a5bc <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	791b      	ldrb	r3, [r3, #4]
 800a65e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a662:	429a      	cmp	r2, r3
 800a664:	d201      	bcs.n	800a66a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a666:	2303      	movs	r3, #3
 800a668:	e01c      	b.n	800a6a4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a66a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a66e:	3301      	adds	r3, #1
 800a670:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a674:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d805      	bhi.n	800a688 <USBH_ParseCfgDesc+0x1cc>
 800a67c:	6a3b      	ldr	r3, [r7, #32]
 800a67e:	885a      	ldrh	r2, [r3, #2]
 800a680:	8afb      	ldrh	r3, [r7, #22]
 800a682:	429a      	cmp	r2, r3
 800a684:	f63f af74 	bhi.w	800a570 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a688:	6a3b      	ldr	r3, [r7, #32]
 800a68a:	791b      	ldrb	r3, [r3, #4]
 800a68c:	2b02      	cmp	r3, #2
 800a68e:	bf28      	it	cs
 800a690:	2302      	movcs	r3, #2
 800a692:	b2db      	uxtb	r3, r3
 800a694:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a698:	429a      	cmp	r2, r3
 800a69a:	d201      	bcs.n	800a6a0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a69c:	2303      	movs	r3, #3
 800a69e:	e001      	b.n	800a6a4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a6a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3730      	adds	r7, #48	@ 0x30
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	781a      	ldrb	r2, [r3, #0]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	785a      	ldrb	r2, [r3, #1]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	789a      	ldrb	r2, [r3, #2]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	78da      	ldrb	r2, [r3, #3]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	3304      	adds	r3, #4
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	bf28      	it	cs
 800a6e0:	2302      	movcs	r3, #2
 800a6e2:	b2da      	uxtb	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	795a      	ldrb	r2, [r3, #5]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	799a      	ldrb	r2, [r3, #6]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	79da      	ldrb	r2, [r3, #7]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	7a1a      	ldrb	r2, [r3, #8]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	721a      	strb	r2, [r3, #8]
}
 800a708:	bf00      	nop
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a714:	b480      	push	{r7}
 800a716:	b087      	sub	sp, #28
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a720:	2300      	movs	r3, #0
 800a722:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	781a      	ldrb	r2, [r3, #0]
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	785a      	ldrb	r2, [r3, #1]
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	789a      	ldrb	r2, [r3, #2]
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	78da      	ldrb	r2, [r3, #3]
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	3304      	adds	r3, #4
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	461a      	mov	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	3305      	adds	r3, #5
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	021b      	lsls	r3, r3, #8
 800a754:	b29b      	uxth	r3, r3
 800a756:	4313      	orrs	r3, r2
 800a758:	b29a      	uxth	r2, r3
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	799a      	ldrb	r2, [r3, #6]
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	889b      	ldrh	r3, [r3, #4]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d009      	beq.n	800a782 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a776:	d804      	bhi.n	800a782 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a77c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a780:	d901      	bls.n	800a786 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a782:	2303      	movs	r3, #3
 800a784:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d136      	bne.n	800a7fe <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	78db      	ldrb	r3, [r3, #3]
 800a794:	f003 0303 	and.w	r3, r3, #3
 800a798:	2b02      	cmp	r3, #2
 800a79a:	d108      	bne.n	800a7ae <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	889b      	ldrh	r3, [r3, #4]
 800a7a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7a4:	f240 8097 	bls.w	800a8d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a7a8:	2303      	movs	r3, #3
 800a7aa:	75fb      	strb	r3, [r7, #23]
 800a7ac:	e093      	b.n	800a8d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	78db      	ldrb	r3, [r3, #3]
 800a7b2:	f003 0303 	and.w	r3, r3, #3
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d107      	bne.n	800a7ca <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	889b      	ldrh	r3, [r3, #4]
 800a7be:	2b40      	cmp	r3, #64	@ 0x40
 800a7c0:	f240 8089 	bls.w	800a8d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a7c4:	2303      	movs	r3, #3
 800a7c6:	75fb      	strb	r3, [r7, #23]
 800a7c8:	e085      	b.n	800a8d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	78db      	ldrb	r3, [r3, #3]
 800a7ce:	f003 0303 	and.w	r3, r3, #3
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d005      	beq.n	800a7e2 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	78db      	ldrb	r3, [r3, #3]
 800a7da:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a7de:	2b03      	cmp	r3, #3
 800a7e0:	d10a      	bne.n	800a7f8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	799b      	ldrb	r3, [r3, #6]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d003      	beq.n	800a7f2 <USBH_ParseEPDesc+0xde>
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	799b      	ldrb	r3, [r3, #6]
 800a7ee:	2b10      	cmp	r3, #16
 800a7f0:	d970      	bls.n	800a8d4 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a7f2:	2303      	movs	r3, #3
 800a7f4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a7f6:	e06d      	b.n	800a8d4 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	75fb      	strb	r3, [r7, #23]
 800a7fc:	e06b      	b.n	800a8d6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a804:	2b01      	cmp	r3, #1
 800a806:	d13c      	bne.n	800a882 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	78db      	ldrb	r3, [r3, #3]
 800a80c:	f003 0303 	and.w	r3, r3, #3
 800a810:	2b02      	cmp	r3, #2
 800a812:	d005      	beq.n	800a820 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	78db      	ldrb	r3, [r3, #3]
 800a818:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d106      	bne.n	800a82e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	889b      	ldrh	r3, [r3, #4]
 800a824:	2b40      	cmp	r3, #64	@ 0x40
 800a826:	d956      	bls.n	800a8d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a828:	2303      	movs	r3, #3
 800a82a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a82c:	e053      	b.n	800a8d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	78db      	ldrb	r3, [r3, #3]
 800a832:	f003 0303 	and.w	r3, r3, #3
 800a836:	2b01      	cmp	r3, #1
 800a838:	d10e      	bne.n	800a858 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	799b      	ldrb	r3, [r3, #6]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d007      	beq.n	800a852 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a846:	2b10      	cmp	r3, #16
 800a848:	d803      	bhi.n	800a852 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a84e:	2b40      	cmp	r3, #64	@ 0x40
 800a850:	d941      	bls.n	800a8d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a852:	2303      	movs	r3, #3
 800a854:	75fb      	strb	r3, [r7, #23]
 800a856:	e03e      	b.n	800a8d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	78db      	ldrb	r3, [r3, #3]
 800a85c:	f003 0303 	and.w	r3, r3, #3
 800a860:	2b03      	cmp	r3, #3
 800a862:	d10b      	bne.n	800a87c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	799b      	ldrb	r3, [r3, #6]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d004      	beq.n	800a876 <USBH_ParseEPDesc+0x162>
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	889b      	ldrh	r3, [r3, #4]
 800a870:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a874:	d32f      	bcc.n	800a8d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a876:	2303      	movs	r3, #3
 800a878:	75fb      	strb	r3, [r7, #23]
 800a87a:	e02c      	b.n	800a8d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a87c:	2303      	movs	r3, #3
 800a87e:	75fb      	strb	r3, [r7, #23]
 800a880:	e029      	b.n	800a8d6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a888:	2b02      	cmp	r3, #2
 800a88a:	d120      	bne.n	800a8ce <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	78db      	ldrb	r3, [r3, #3]
 800a890:	f003 0303 	and.w	r3, r3, #3
 800a894:	2b00      	cmp	r3, #0
 800a896:	d106      	bne.n	800a8a6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	889b      	ldrh	r3, [r3, #4]
 800a89c:	2b08      	cmp	r3, #8
 800a89e:	d01a      	beq.n	800a8d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	75fb      	strb	r3, [r7, #23]
 800a8a4:	e017      	b.n	800a8d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	78db      	ldrb	r3, [r3, #3]
 800a8aa:	f003 0303 	and.w	r3, r3, #3
 800a8ae:	2b03      	cmp	r3, #3
 800a8b0:	d10a      	bne.n	800a8c8 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	799b      	ldrb	r3, [r3, #6]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d003      	beq.n	800a8c2 <USBH_ParseEPDesc+0x1ae>
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	889b      	ldrh	r3, [r3, #4]
 800a8be:	2b08      	cmp	r3, #8
 800a8c0:	d909      	bls.n	800a8d6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a8c2:	2303      	movs	r3, #3
 800a8c4:	75fb      	strb	r3, [r7, #23]
 800a8c6:	e006      	b.n	800a8d6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a8c8:	2303      	movs	r3, #3
 800a8ca:	75fb      	strb	r3, [r7, #23]
 800a8cc:	e003      	b.n	800a8d6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a8ce:	2303      	movs	r3, #3
 800a8d0:	75fb      	strb	r3, [r7, #23]
 800a8d2:	e000      	b.n	800a8d6 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a8d4:	bf00      	nop
  }

  return status;
 800a8d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	371c      	adds	r7, #28
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b087      	sub	sp, #28
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	2b03      	cmp	r3, #3
 800a8fa:	d120      	bne.n	800a93e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	1e9a      	subs	r2, r3, #2
 800a902:	88fb      	ldrh	r3, [r7, #6]
 800a904:	4293      	cmp	r3, r2
 800a906:	bf28      	it	cs
 800a908:	4613      	movcs	r3, r2
 800a90a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	3302      	adds	r3, #2
 800a910:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a912:	2300      	movs	r3, #0
 800a914:	82fb      	strh	r3, [r7, #22]
 800a916:	e00b      	b.n	800a930 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a918:	8afb      	ldrh	r3, [r7, #22]
 800a91a:	68fa      	ldr	r2, [r7, #12]
 800a91c:	4413      	add	r3, r2
 800a91e:	781a      	ldrb	r2, [r3, #0]
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	3301      	adds	r3, #1
 800a928:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a92a:	8afb      	ldrh	r3, [r7, #22]
 800a92c:	3302      	adds	r3, #2
 800a92e:	82fb      	strh	r3, [r7, #22]
 800a930:	8afa      	ldrh	r2, [r7, #22]
 800a932:	8abb      	ldrh	r3, [r7, #20]
 800a934:	429a      	cmp	r2, r3
 800a936:	d3ef      	bcc.n	800a918 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	2200      	movs	r2, #0
 800a93c:	701a      	strb	r2, [r3, #0]
  }
}
 800a93e:	bf00      	nop
 800a940:	371c      	adds	r7, #28
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a94a:	b480      	push	{r7}
 800a94c:	b085      	sub	sp, #20
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
 800a952:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	881b      	ldrh	r3, [r3, #0]
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	7812      	ldrb	r2, [r2, #0]
 800a95c:	4413      	add	r3, r2
 800a95e:	b29a      	uxth	r2, r3
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4413      	add	r3, r2
 800a96e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a970:	68fb      	ldr	r3, [r7, #12]
}
 800a972:	4618      	mov	r0, r3
 800a974:	3714      	adds	r7, #20
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a97e:	b580      	push	{r7, lr}
 800a980:	b086      	sub	sp, #24
 800a982:	af00      	add	r7, sp, #0
 800a984:	60f8      	str	r0, [r7, #12]
 800a986:	60b9      	str	r1, [r7, #8]
 800a988:	4613      	mov	r3, r2
 800a98a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a98c:	2301      	movs	r3, #1
 800a98e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	789b      	ldrb	r3, [r3, #2]
 800a994:	2b01      	cmp	r3, #1
 800a996:	d002      	beq.n	800a99e <USBH_CtlReq+0x20>
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d00f      	beq.n	800a9bc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a99c:	e027      	b.n	800a9ee <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	68ba      	ldr	r2, [r7, #8]
 800a9a2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	88fa      	ldrh	r2, [r7, #6]
 800a9a8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2202      	movs	r2, #2
 800a9b4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	75fb      	strb	r3, [r7, #23]
      break;
 800a9ba:	e018      	b.n	800a9ee <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a9bc:	68f8      	ldr	r0, [r7, #12]
 800a9be:	f000 f81b 	bl	800a9f8 <USBH_HandleControl>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a9c6:	7dfb      	ldrb	r3, [r7, #23]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d002      	beq.n	800a9d2 <USBH_CtlReq+0x54>
 800a9cc:	7dfb      	ldrb	r3, [r7, #23]
 800a9ce:	2b03      	cmp	r3, #3
 800a9d0:	d106      	bne.n	800a9e0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	761a      	strb	r2, [r3, #24]
      break;
 800a9de:	e005      	b.n	800a9ec <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a9e0:	7dfb      	ldrb	r3, [r7, #23]
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	d102      	bne.n	800a9ec <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	709a      	strb	r2, [r3, #2]
      break;
 800a9ec:	bf00      	nop
  }
  return status;
 800a9ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3718      	adds	r7, #24
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b086      	sub	sp, #24
 800a9fc:	af02      	add	r7, sp, #8
 800a9fe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800aa00:	2301      	movs	r3, #1
 800aa02:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aa04:	2300      	movs	r3, #0
 800aa06:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	7e1b      	ldrb	r3, [r3, #24]
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	2b0a      	cmp	r3, #10
 800aa10:	f200 8156 	bhi.w	800acc0 <USBH_HandleControl+0x2c8>
 800aa14:	a201      	add	r2, pc, #4	@ (adr r2, 800aa1c <USBH_HandleControl+0x24>)
 800aa16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa1a:	bf00      	nop
 800aa1c:	0800aa49 	.word	0x0800aa49
 800aa20:	0800aa63 	.word	0x0800aa63
 800aa24:	0800aacd 	.word	0x0800aacd
 800aa28:	0800aaf3 	.word	0x0800aaf3
 800aa2c:	0800ab2b 	.word	0x0800ab2b
 800aa30:	0800ab55 	.word	0x0800ab55
 800aa34:	0800aba7 	.word	0x0800aba7
 800aa38:	0800abc9 	.word	0x0800abc9
 800aa3c:	0800ac05 	.word	0x0800ac05
 800aa40:	0800ac2b 	.word	0x0800ac2b
 800aa44:	0800ac69 	.word	0x0800ac69
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f103 0110 	add.w	r1, r3, #16
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	795b      	ldrb	r3, [r3, #5]
 800aa52:	461a      	mov	r2, r3
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 f943 	bl	800ace0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2202      	movs	r2, #2
 800aa5e:	761a      	strb	r2, [r3, #24]
      break;
 800aa60:	e139      	b.n	800acd6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	795b      	ldrb	r3, [r3, #5]
 800aa66:	4619      	mov	r1, r3
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 fcc5 	bl	800b3f8 <USBH_LL_GetURBState>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800aa72:	7bbb      	ldrb	r3, [r7, #14]
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d11e      	bne.n	800aab6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	7c1b      	ldrb	r3, [r3, #16]
 800aa7c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800aa80:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	8adb      	ldrh	r3, [r3, #22]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d00a      	beq.n	800aaa0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800aa8a:	7b7b      	ldrb	r3, [r7, #13]
 800aa8c:	2b80      	cmp	r3, #128	@ 0x80
 800aa8e:	d103      	bne.n	800aa98 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2203      	movs	r2, #3
 800aa94:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aa96:	e115      	b.n	800acc4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2205      	movs	r2, #5
 800aa9c:	761a      	strb	r2, [r3, #24]
      break;
 800aa9e:	e111      	b.n	800acc4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800aaa0:	7b7b      	ldrb	r3, [r7, #13]
 800aaa2:	2b80      	cmp	r3, #128	@ 0x80
 800aaa4:	d103      	bne.n	800aaae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2209      	movs	r2, #9
 800aaaa:	761a      	strb	r2, [r3, #24]
      break;
 800aaac:	e10a      	b.n	800acc4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2207      	movs	r2, #7
 800aab2:	761a      	strb	r2, [r3, #24]
      break;
 800aab4:	e106      	b.n	800acc4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800aab6:	7bbb      	ldrb	r3, [r7, #14]
 800aab8:	2b04      	cmp	r3, #4
 800aaba:	d003      	beq.n	800aac4 <USBH_HandleControl+0xcc>
 800aabc:	7bbb      	ldrb	r3, [r7, #14]
 800aabe:	2b02      	cmp	r3, #2
 800aac0:	f040 8100 	bne.w	800acc4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	220b      	movs	r2, #11
 800aac8:	761a      	strb	r2, [r3, #24]
      break;
 800aaca:	e0fb      	b.n	800acc4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800aad2:	b29a      	uxth	r2, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6899      	ldr	r1, [r3, #8]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	899a      	ldrh	r2, [r3, #12]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	791b      	ldrb	r3, [r3, #4]
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f93a 	bl	800ad5e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2204      	movs	r2, #4
 800aaee:	761a      	strb	r2, [r3, #24]
      break;
 800aaf0:	e0f1      	b.n	800acd6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	791b      	ldrb	r3, [r3, #4]
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 fc7d 	bl	800b3f8 <USBH_LL_GetURBState>
 800aafe:	4603      	mov	r3, r0
 800ab00:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ab02:	7bbb      	ldrb	r3, [r7, #14]
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d102      	bne.n	800ab0e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2209      	movs	r2, #9
 800ab0c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ab0e:	7bbb      	ldrb	r3, [r7, #14]
 800ab10:	2b05      	cmp	r3, #5
 800ab12:	d102      	bne.n	800ab1a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ab14:	2303      	movs	r3, #3
 800ab16:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ab18:	e0d6      	b.n	800acc8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ab1a:	7bbb      	ldrb	r3, [r7, #14]
 800ab1c:	2b04      	cmp	r3, #4
 800ab1e:	f040 80d3 	bne.w	800acc8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	220b      	movs	r2, #11
 800ab26:	761a      	strb	r2, [r3, #24]
      break;
 800ab28:	e0ce      	b.n	800acc8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6899      	ldr	r1, [r3, #8]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	899a      	ldrh	r2, [r3, #12]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	795b      	ldrb	r3, [r3, #5]
 800ab36:	2001      	movs	r0, #1
 800ab38:	9000      	str	r0, [sp, #0]
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 f8ea 	bl	800ad14 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2206      	movs	r2, #6
 800ab50:	761a      	strb	r2, [r3, #24]
      break;
 800ab52:	e0c0      	b.n	800acd6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	795b      	ldrb	r3, [r3, #5]
 800ab58:	4619      	mov	r1, r3
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fc4c 	bl	800b3f8 <USBH_LL_GetURBState>
 800ab60:	4603      	mov	r3, r0
 800ab62:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ab64:	7bbb      	ldrb	r3, [r7, #14]
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d103      	bne.n	800ab72 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2207      	movs	r2, #7
 800ab6e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ab70:	e0ac      	b.n	800accc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ab72:	7bbb      	ldrb	r3, [r7, #14]
 800ab74:	2b05      	cmp	r3, #5
 800ab76:	d105      	bne.n	800ab84 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	220c      	movs	r2, #12
 800ab7c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ab7e:	2303      	movs	r3, #3
 800ab80:	73fb      	strb	r3, [r7, #15]
      break;
 800ab82:	e0a3      	b.n	800accc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ab84:	7bbb      	ldrb	r3, [r7, #14]
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d103      	bne.n	800ab92 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2205      	movs	r2, #5
 800ab8e:	761a      	strb	r2, [r3, #24]
      break;
 800ab90:	e09c      	b.n	800accc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ab92:	7bbb      	ldrb	r3, [r7, #14]
 800ab94:	2b04      	cmp	r3, #4
 800ab96:	f040 8099 	bne.w	800accc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	220b      	movs	r2, #11
 800ab9e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800aba0:	2302      	movs	r3, #2
 800aba2:	73fb      	strb	r3, [r7, #15]
      break;
 800aba4:	e092      	b.n	800accc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	791b      	ldrb	r3, [r3, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	2100      	movs	r1, #0
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 f8d5 	bl	800ad5e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800abba:	b29a      	uxth	r2, r3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2208      	movs	r2, #8
 800abc4:	761a      	strb	r2, [r3, #24]

      break;
 800abc6:	e086      	b.n	800acd6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	791b      	ldrb	r3, [r3, #4]
 800abcc:	4619      	mov	r1, r3
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 fc12 	bl	800b3f8 <USBH_LL_GetURBState>
 800abd4:	4603      	mov	r3, r0
 800abd6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800abd8:	7bbb      	ldrb	r3, [r7, #14]
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d105      	bne.n	800abea <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	220d      	movs	r2, #13
 800abe2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800abe8:	e072      	b.n	800acd0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800abea:	7bbb      	ldrb	r3, [r7, #14]
 800abec:	2b04      	cmp	r3, #4
 800abee:	d103      	bne.n	800abf8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	220b      	movs	r2, #11
 800abf4:	761a      	strb	r2, [r3, #24]
      break;
 800abf6:	e06b      	b.n	800acd0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800abf8:	7bbb      	ldrb	r3, [r7, #14]
 800abfa:	2b05      	cmp	r3, #5
 800abfc:	d168      	bne.n	800acd0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800abfe:	2303      	movs	r3, #3
 800ac00:	73fb      	strb	r3, [r7, #15]
      break;
 800ac02:	e065      	b.n	800acd0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	795b      	ldrb	r3, [r3, #5]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	9200      	str	r2, [sp, #0]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	2100      	movs	r1, #0
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 f87f 	bl	800ad14 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ac1c:	b29a      	uxth	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	220a      	movs	r2, #10
 800ac26:	761a      	strb	r2, [r3, #24]
      break;
 800ac28:	e055      	b.n	800acd6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	795b      	ldrb	r3, [r3, #5]
 800ac2e:	4619      	mov	r1, r3
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 fbe1 	bl	800b3f8 <USBH_LL_GetURBState>
 800ac36:	4603      	mov	r3, r0
 800ac38:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ac3a:	7bbb      	ldrb	r3, [r7, #14]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d105      	bne.n	800ac4c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	220d      	movs	r2, #13
 800ac48:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ac4a:	e043      	b.n	800acd4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ac4c:	7bbb      	ldrb	r3, [r7, #14]
 800ac4e:	2b02      	cmp	r3, #2
 800ac50:	d103      	bne.n	800ac5a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2209      	movs	r2, #9
 800ac56:	761a      	strb	r2, [r3, #24]
      break;
 800ac58:	e03c      	b.n	800acd4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ac5a:	7bbb      	ldrb	r3, [r7, #14]
 800ac5c:	2b04      	cmp	r3, #4
 800ac5e:	d139      	bne.n	800acd4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	220b      	movs	r2, #11
 800ac64:	761a      	strb	r2, [r3, #24]
      break;
 800ac66:	e035      	b.n	800acd4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	7e5b      	ldrb	r3, [r3, #25]
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	b2da      	uxtb	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	765a      	strb	r2, [r3, #25]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	7e5b      	ldrb	r3, [r3, #25]
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	d806      	bhi.n	800ac8a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2201      	movs	r2, #1
 800ac80:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2201      	movs	r2, #1
 800ac86:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ac88:	e025      	b.n	800acd6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ac90:	2106      	movs	r1, #6
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	795b      	ldrb	r3, [r3, #5]
 800aca0:	4619      	mov	r1, r3
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 f90c 	bl	800aec0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	791b      	ldrb	r3, [r3, #4]
 800acac:	4619      	mov	r1, r3
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 f906 	bl	800aec0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800acba:	2302      	movs	r3, #2
 800acbc:	73fb      	strb	r3, [r7, #15]
      break;
 800acbe:	e00a      	b.n	800acd6 <USBH_HandleControl+0x2de>

    default:
      break;
 800acc0:	bf00      	nop
 800acc2:	e008      	b.n	800acd6 <USBH_HandleControl+0x2de>
      break;
 800acc4:	bf00      	nop
 800acc6:	e006      	b.n	800acd6 <USBH_HandleControl+0x2de>
      break;
 800acc8:	bf00      	nop
 800acca:	e004      	b.n	800acd6 <USBH_HandleControl+0x2de>
      break;
 800accc:	bf00      	nop
 800acce:	e002      	b.n	800acd6 <USBH_HandleControl+0x2de>
      break;
 800acd0:	bf00      	nop
 800acd2:	e000      	b.n	800acd6 <USBH_HandleControl+0x2de>
      break;
 800acd4:	bf00      	nop
  }

  return status;
 800acd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3710      	adds	r7, #16
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b088      	sub	sp, #32
 800ace4:	af04      	add	r7, sp, #16
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	4613      	mov	r3, r2
 800acec:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800acee:	79f9      	ldrb	r1, [r7, #7]
 800acf0:	2300      	movs	r3, #0
 800acf2:	9303      	str	r3, [sp, #12]
 800acf4:	2308      	movs	r3, #8
 800acf6:	9302      	str	r3, [sp, #8]
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	9301      	str	r3, [sp, #4]
 800acfc:	2300      	movs	r3, #0
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	2300      	movs	r3, #0
 800ad02:	2200      	movs	r2, #0
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	f000 fb46 	bl	800b396 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b088      	sub	sp, #32
 800ad18:	af04      	add	r7, sp, #16
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	4611      	mov	r1, r2
 800ad20:	461a      	mov	r2, r3
 800ad22:	460b      	mov	r3, r1
 800ad24:	80fb      	strh	r3, [r7, #6]
 800ad26:	4613      	mov	r3, r2
 800ad28:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d001      	beq.n	800ad38 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ad34:	2300      	movs	r3, #0
 800ad36:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ad38:	7979      	ldrb	r1, [r7, #5]
 800ad3a:	7e3b      	ldrb	r3, [r7, #24]
 800ad3c:	9303      	str	r3, [sp, #12]
 800ad3e:	88fb      	ldrh	r3, [r7, #6]
 800ad40:	9302      	str	r3, [sp, #8]
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	9301      	str	r3, [sp, #4]
 800ad46:	2301      	movs	r3, #1
 800ad48:	9300      	str	r3, [sp, #0]
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f000 fb21 	bl	800b396 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ad54:	2300      	movs	r3, #0
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3710      	adds	r7, #16
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b088      	sub	sp, #32
 800ad62:	af04      	add	r7, sp, #16
 800ad64:	60f8      	str	r0, [r7, #12]
 800ad66:	60b9      	str	r1, [r7, #8]
 800ad68:	4611      	mov	r1, r2
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	80fb      	strh	r3, [r7, #6]
 800ad70:	4613      	mov	r3, r2
 800ad72:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ad74:	7979      	ldrb	r1, [r7, #5]
 800ad76:	2300      	movs	r3, #0
 800ad78:	9303      	str	r3, [sp, #12]
 800ad7a:	88fb      	ldrh	r3, [r7, #6]
 800ad7c:	9302      	str	r3, [sp, #8]
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	9301      	str	r3, [sp, #4]
 800ad82:	2301      	movs	r3, #1
 800ad84:	9300      	str	r3, [sp, #0]
 800ad86:	2300      	movs	r3, #0
 800ad88:	2201      	movs	r2, #1
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f000 fb03 	bl	800b396 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ad90:	2300      	movs	r3, #0

}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3710      	adds	r7, #16
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b088      	sub	sp, #32
 800ad9e:	af04      	add	r7, sp, #16
 800ada0:	60f8      	str	r0, [r7, #12]
 800ada2:	60b9      	str	r1, [r7, #8]
 800ada4:	4611      	mov	r1, r2
 800ada6:	461a      	mov	r2, r3
 800ada8:	460b      	mov	r3, r1
 800adaa:	80fb      	strh	r3, [r7, #6]
 800adac:	4613      	mov	r3, r2
 800adae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d001      	beq.n	800adbe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800adba:	2300      	movs	r3, #0
 800adbc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800adbe:	7979      	ldrb	r1, [r7, #5]
 800adc0:	7e3b      	ldrb	r3, [r7, #24]
 800adc2:	9303      	str	r3, [sp, #12]
 800adc4:	88fb      	ldrh	r3, [r7, #6]
 800adc6:	9302      	str	r3, [sp, #8]
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	9301      	str	r3, [sp, #4]
 800adcc:	2301      	movs	r3, #1
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	2302      	movs	r3, #2
 800add2:	2200      	movs	r2, #0
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f000 fade 	bl	800b396 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800adda:	2300      	movs	r3, #0
}
 800addc:	4618      	mov	r0, r3
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b088      	sub	sp, #32
 800ade8:	af04      	add	r7, sp, #16
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	4611      	mov	r1, r2
 800adf0:	461a      	mov	r2, r3
 800adf2:	460b      	mov	r3, r1
 800adf4:	80fb      	strh	r3, [r7, #6]
 800adf6:	4613      	mov	r3, r2
 800adf8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800adfa:	7979      	ldrb	r1, [r7, #5]
 800adfc:	2300      	movs	r3, #0
 800adfe:	9303      	str	r3, [sp, #12]
 800ae00:	88fb      	ldrh	r3, [r7, #6]
 800ae02:	9302      	str	r3, [sp, #8]
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	9301      	str	r3, [sp, #4]
 800ae08:	2301      	movs	r3, #1
 800ae0a:	9300      	str	r3, [sp, #0]
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	2201      	movs	r2, #1
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f000 fac0 	bl	800b396 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ae16:	2300      	movs	r3, #0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3710      	adds	r7, #16
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b086      	sub	sp, #24
 800ae24:	af04      	add	r7, sp, #16
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	4608      	mov	r0, r1
 800ae2a:	4611      	mov	r1, r2
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	4603      	mov	r3, r0
 800ae30:	70fb      	strb	r3, [r7, #3]
 800ae32:	460b      	mov	r3, r1
 800ae34:	70bb      	strb	r3, [r7, #2]
 800ae36:	4613      	mov	r3, r2
 800ae38:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ae3a:	7878      	ldrb	r0, [r7, #1]
 800ae3c:	78ba      	ldrb	r2, [r7, #2]
 800ae3e:	78f9      	ldrb	r1, [r7, #3]
 800ae40:	8b3b      	ldrh	r3, [r7, #24]
 800ae42:	9302      	str	r3, [sp, #8]
 800ae44:	7d3b      	ldrb	r3, [r7, #20]
 800ae46:	9301      	str	r3, [sp, #4]
 800ae48:	7c3b      	ldrb	r3, [r7, #16]
 800ae4a:	9300      	str	r3, [sp, #0]
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 fa53 	bl	800b2fa <USBH_LL_OpenPipe>

  return USBH_OK;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3708      	adds	r7, #8
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b082      	sub	sp, #8
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	460b      	mov	r3, r1
 800ae68:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ae6a:	78fb      	ldrb	r3, [r7, #3]
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fa72 	bl	800b358 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3708      	adds	r7, #8
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b084      	sub	sp, #16
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
 800ae86:	460b      	mov	r3, r1
 800ae88:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 f836 	bl	800aefc <USBH_GetFreePipe>
 800ae90:	4603      	mov	r3, r0
 800ae92:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ae94:	89fb      	ldrh	r3, [r7, #14]
 800ae96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d00a      	beq.n	800aeb4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ae9e:	78fa      	ldrb	r2, [r7, #3]
 800aea0:	89fb      	ldrh	r3, [r7, #14]
 800aea2:	f003 030f 	and.w	r3, r3, #15
 800aea6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aeaa:	6879      	ldr	r1, [r7, #4]
 800aeac:	33e0      	adds	r3, #224	@ 0xe0
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	440b      	add	r3, r1
 800aeb2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800aeb4:	89fb      	ldrh	r3, [r7, #14]
 800aeb6:	b2db      	uxtb	r3, r3
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3710      	adds	r7, #16
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	460b      	mov	r3, r1
 800aeca:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800aecc:	78fb      	ldrb	r3, [r7, #3]
 800aece:	2b0f      	cmp	r3, #15
 800aed0:	d80d      	bhi.n	800aeee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800aed2:	78fb      	ldrb	r3, [r7, #3]
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	33e0      	adds	r3, #224	@ 0xe0
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	4413      	add	r3, r2
 800aedc:	685a      	ldr	r2, [r3, #4]
 800aede:	78fb      	ldrb	r3, [r7, #3]
 800aee0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800aee4:	6879      	ldr	r1, [r7, #4]
 800aee6:	33e0      	adds	r3, #224	@ 0xe0
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	440b      	add	r3, r1
 800aeec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b085      	sub	sp, #20
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800af04:	2300      	movs	r3, #0
 800af06:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800af08:	2300      	movs	r3, #0
 800af0a:	73fb      	strb	r3, [r7, #15]
 800af0c:	e00f      	b.n	800af2e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800af0e:	7bfb      	ldrb	r3, [r7, #15]
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	33e0      	adds	r3, #224	@ 0xe0
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	4413      	add	r3, r2
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d102      	bne.n	800af28 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800af22:	7bfb      	ldrb	r3, [r7, #15]
 800af24:	b29b      	uxth	r3, r3
 800af26:	e007      	b.n	800af38 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800af28:	7bfb      	ldrb	r3, [r7, #15]
 800af2a:	3301      	adds	r3, #1
 800af2c:	73fb      	strb	r3, [r7, #15]
 800af2e:	7bfb      	ldrb	r3, [r7, #15]
 800af30:	2b0f      	cmp	r3, #15
 800af32:	d9ec      	bls.n	800af0e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800af34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3714      	adds	r7, #20
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800af48:	2201      	movs	r2, #1
 800af4a:	490e      	ldr	r1, [pc, #56]	@ (800af84 <MX_USB_HOST_Init+0x40>)
 800af4c:	480e      	ldr	r0, [pc, #56]	@ (800af88 <MX_USB_HOST_Init+0x44>)
 800af4e:	f7fe fb15 	bl	800957c <USBH_Init>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d001      	beq.n	800af5c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800af58:	f7f6 fd98 	bl	8001a8c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800af5c:	490b      	ldr	r1, [pc, #44]	@ (800af8c <MX_USB_HOST_Init+0x48>)
 800af5e:	480a      	ldr	r0, [pc, #40]	@ (800af88 <MX_USB_HOST_Init+0x44>)
 800af60:	f7fe fbb9 	bl	80096d6 <USBH_RegisterClass>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800af6a:	f7f6 fd8f 	bl	8001a8c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800af6e:	4806      	ldr	r0, [pc, #24]	@ (800af88 <MX_USB_HOST_Init+0x44>)
 800af70:	f7fe fc3d 	bl	80097ee <USBH_Start>
 800af74:	4603      	mov	r3, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	d001      	beq.n	800af7e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800af7a:	f7f6 fd87 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800af7e:	bf00      	nop
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	0800afa5 	.word	0x0800afa5
 800af88:	20000fcc 	.word	0x20000fcc
 800af8c:	20000014 	.word	0x20000014

0800af90 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800af94:	4802      	ldr	r0, [pc, #8]	@ (800afa0 <MX_USB_HOST_Process+0x10>)
 800af96:	f7fe fc3b 	bl	8009810 <USBH_Process>
}
 800af9a:	bf00      	nop
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	20000fcc 	.word	0x20000fcc

0800afa4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	460b      	mov	r3, r1
 800afae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800afb0:	78fb      	ldrb	r3, [r7, #3]
 800afb2:	3b01      	subs	r3, #1
 800afb4:	2b04      	cmp	r3, #4
 800afb6:	d819      	bhi.n	800afec <USBH_UserProcess+0x48>
 800afb8:	a201      	add	r2, pc, #4	@ (adr r2, 800afc0 <USBH_UserProcess+0x1c>)
 800afba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afbe:	bf00      	nop
 800afc0:	0800afed 	.word	0x0800afed
 800afc4:	0800afdd 	.word	0x0800afdd
 800afc8:	0800afed 	.word	0x0800afed
 800afcc:	0800afe5 	.word	0x0800afe5
 800afd0:	0800afd5 	.word	0x0800afd5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800afd4:	4b09      	ldr	r3, [pc, #36]	@ (800affc <USBH_UserProcess+0x58>)
 800afd6:	2203      	movs	r2, #3
 800afd8:	701a      	strb	r2, [r3, #0]
  break;
 800afda:	e008      	b.n	800afee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800afdc:	4b07      	ldr	r3, [pc, #28]	@ (800affc <USBH_UserProcess+0x58>)
 800afde:	2202      	movs	r2, #2
 800afe0:	701a      	strb	r2, [r3, #0]
  break;
 800afe2:	e004      	b.n	800afee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800afe4:	4b05      	ldr	r3, [pc, #20]	@ (800affc <USBH_UserProcess+0x58>)
 800afe6:	2201      	movs	r2, #1
 800afe8:	701a      	strb	r2, [r3, #0]
  break;
 800afea:	e000      	b.n	800afee <USBH_UserProcess+0x4a>

  default:
  break;
 800afec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800afee:	bf00      	nop
 800aff0:	370c      	adds	r7, #12
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	200013a4 	.word	0x200013a4

0800b000 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b08a      	sub	sp, #40	@ 0x28
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b008:	f107 0314 	add.w	r3, r7, #20
 800b00c:	2200      	movs	r2, #0
 800b00e:	601a      	str	r2, [r3, #0]
 800b010:	605a      	str	r2, [r3, #4]
 800b012:	609a      	str	r2, [r3, #8]
 800b014:	60da      	str	r2, [r3, #12]
 800b016:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b020:	d147      	bne.n	800b0b2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b022:	2300      	movs	r3, #0
 800b024:	613b      	str	r3, [r7, #16]
 800b026:	4b25      	ldr	r3, [pc, #148]	@ (800b0bc <HAL_HCD_MspInit+0xbc>)
 800b028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b02a:	4a24      	ldr	r2, [pc, #144]	@ (800b0bc <HAL_HCD_MspInit+0xbc>)
 800b02c:	f043 0301 	orr.w	r3, r3, #1
 800b030:	6313      	str	r3, [r2, #48]	@ 0x30
 800b032:	4b22      	ldr	r3, [pc, #136]	@ (800b0bc <HAL_HCD_MspInit+0xbc>)
 800b034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b036:	f003 0301 	and.w	r3, r3, #1
 800b03a:	613b      	str	r3, [r7, #16]
 800b03c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b03e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b044:	2300      	movs	r3, #0
 800b046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b048:	2300      	movs	r3, #0
 800b04a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b04c:	f107 0314 	add.w	r3, r7, #20
 800b050:	4619      	mov	r1, r3
 800b052:	481b      	ldr	r0, [pc, #108]	@ (800b0c0 <HAL_HCD_MspInit+0xc0>)
 800b054:	f7f7 fa70 	bl	8002538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b058:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b05c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b05e:	2302      	movs	r3, #2
 800b060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b062:	2300      	movs	r3, #0
 800b064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b066:	2300      	movs	r3, #0
 800b068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b06a:	230a      	movs	r3, #10
 800b06c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b06e:	f107 0314 	add.w	r3, r7, #20
 800b072:	4619      	mov	r1, r3
 800b074:	4812      	ldr	r0, [pc, #72]	@ (800b0c0 <HAL_HCD_MspInit+0xc0>)
 800b076:	f7f7 fa5f 	bl	8002538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b07a:	4b10      	ldr	r3, [pc, #64]	@ (800b0bc <HAL_HCD_MspInit+0xbc>)
 800b07c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b07e:	4a0f      	ldr	r2, [pc, #60]	@ (800b0bc <HAL_HCD_MspInit+0xbc>)
 800b080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b084:	6353      	str	r3, [r2, #52]	@ 0x34
 800b086:	2300      	movs	r3, #0
 800b088:	60fb      	str	r3, [r7, #12]
 800b08a:	4b0c      	ldr	r3, [pc, #48]	@ (800b0bc <HAL_HCD_MspInit+0xbc>)
 800b08c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b08e:	4a0b      	ldr	r2, [pc, #44]	@ (800b0bc <HAL_HCD_MspInit+0xbc>)
 800b090:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b094:	6453      	str	r3, [r2, #68]	@ 0x44
 800b096:	4b09      	ldr	r3, [pc, #36]	@ (800b0bc <HAL_HCD_MspInit+0xbc>)
 800b098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b09a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b09e:	60fb      	str	r3, [r7, #12]
 800b0a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	2100      	movs	r1, #0
 800b0a6:	2043      	movs	r0, #67	@ 0x43
 800b0a8:	f7f7 f97d 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b0ac:	2043      	movs	r0, #67	@ 0x43
 800b0ae:	f7f7 f996 	bl	80023de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b0b2:	bf00      	nop
 800b0b4:	3728      	adds	r7, #40	@ 0x28
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	40023800 	.word	0x40023800
 800b0c0:	40020000 	.word	0x40020000

0800b0c4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7fe ff73 	bl	8009fbe <USBH_LL_IncTimer>
}
 800b0d8:	bf00      	nop
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7fe ffab 	bl	800a04a <USBH_LL_Connect>
}
 800b0f4:	bf00      	nop
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7fe ffb4 	bl	800a078 <USBH_LL_Disconnect>
}
 800b110:	bf00      	nop
 800b112:	3708      	adds	r7, #8
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	460b      	mov	r3, r1
 800b122:	70fb      	strb	r3, [r7, #3]
 800b124:	4613      	mov	r3, r2
 800b126:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b128:	bf00      	nop
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b142:	4618      	mov	r0, r3
 800b144:	f7fe ff65 	bl	800a012 <USBH_LL_PortEnabled>
}
 800b148:	bf00      	nop
 800b14a:	3708      	adds	r7, #8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b15e:	4618      	mov	r0, r3
 800b160:	f7fe ff65 	bl	800a02e <USBH_LL_PortDisabled>
}
 800b164:	bf00      	nop
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d12a      	bne.n	800b1d4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b17e:	4a18      	ldr	r2, [pc, #96]	@ (800b1e0 <USBH_LL_Init+0x74>)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a15      	ldr	r2, [pc, #84]	@ (800b1e0 <USBH_LL_Init+0x74>)
 800b18a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b18e:	4b14      	ldr	r3, [pc, #80]	@ (800b1e0 <USBH_LL_Init+0x74>)
 800b190:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b194:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b196:	4b12      	ldr	r3, [pc, #72]	@ (800b1e0 <USBH_LL_Init+0x74>)
 800b198:	2208      	movs	r2, #8
 800b19a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b19c:	4b10      	ldr	r3, [pc, #64]	@ (800b1e0 <USBH_LL_Init+0x74>)
 800b19e:	2201      	movs	r2, #1
 800b1a0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b1a2:	4b0f      	ldr	r3, [pc, #60]	@ (800b1e0 <USBH_LL_Init+0x74>)
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b1a8:	4b0d      	ldr	r3, [pc, #52]	@ (800b1e0 <USBH_LL_Init+0x74>)
 800b1aa:	2202      	movs	r2, #2
 800b1ac:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b1ae:	4b0c      	ldr	r3, [pc, #48]	@ (800b1e0 <USBH_LL_Init+0x74>)
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b1b4:	480a      	ldr	r0, [pc, #40]	@ (800b1e0 <USBH_LL_Init+0x74>)
 800b1b6:	f7f7 fb8d 	bl	80028d4 <HAL_HCD_Init>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d001      	beq.n	800b1c4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b1c0:	f7f6 fc64 	bl	8001a8c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b1c4:	4806      	ldr	r0, [pc, #24]	@ (800b1e0 <USBH_LL_Init+0x74>)
 800b1c6:	f7f7 ffed 	bl	80031a4 <HAL_HCD_GetCurrentFrame>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f7fe fee6 	bl	8009fa0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3708      	adds	r7, #8
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	200013a8 	.word	0x200013a8

0800b1e4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7f7 ff5a 	bl	80030b4 <HAL_HCD_Start>
 800b200:	4603      	mov	r3, r0
 800b202:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b204:	7bfb      	ldrb	r3, [r7, #15]
 800b206:	4618      	mov	r0, r3
 800b208:	f000 f95e 	bl	800b4c8 <USBH_Get_USB_Status>
 800b20c:	4603      	mov	r3, r0
 800b20e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b210:	7bbb      	ldrb	r3, [r7, #14]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}

0800b21a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b084      	sub	sp, #16
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b222:	2300      	movs	r3, #0
 800b224:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b226:	2300      	movs	r3, #0
 800b228:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b230:	4618      	mov	r0, r3
 800b232:	f7f7 ff62 	bl	80030fa <HAL_HCD_Stop>
 800b236:	4603      	mov	r3, r0
 800b238:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b23a:	7bfb      	ldrb	r3, [r7, #15]
 800b23c:	4618      	mov	r0, r3
 800b23e:	f000 f943 	bl	800b4c8 <USBH_Get_USB_Status>
 800b242:	4603      	mov	r3, r0
 800b244:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b246:	7bbb      	ldrb	r3, [r7, #14]
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3710      	adds	r7, #16
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b258:	2301      	movs	r3, #1
 800b25a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b262:	4618      	mov	r0, r3
 800b264:	f7f7 ffac 	bl	80031c0 <HAL_HCD_GetCurrentSpeed>
 800b268:	4603      	mov	r3, r0
 800b26a:	2b02      	cmp	r3, #2
 800b26c:	d00c      	beq.n	800b288 <USBH_LL_GetSpeed+0x38>
 800b26e:	2b02      	cmp	r3, #2
 800b270:	d80d      	bhi.n	800b28e <USBH_LL_GetSpeed+0x3e>
 800b272:	2b00      	cmp	r3, #0
 800b274:	d002      	beq.n	800b27c <USBH_LL_GetSpeed+0x2c>
 800b276:	2b01      	cmp	r3, #1
 800b278:	d003      	beq.n	800b282 <USBH_LL_GetSpeed+0x32>
 800b27a:	e008      	b.n	800b28e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b27c:	2300      	movs	r3, #0
 800b27e:	73fb      	strb	r3, [r7, #15]
    break;
 800b280:	e008      	b.n	800b294 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b282:	2301      	movs	r3, #1
 800b284:	73fb      	strb	r3, [r7, #15]
    break;
 800b286:	e005      	b.n	800b294 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b288:	2302      	movs	r3, #2
 800b28a:	73fb      	strb	r3, [r7, #15]
    break;
 800b28c:	e002      	b.n	800b294 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b28e:	2301      	movs	r3, #1
 800b290:	73fb      	strb	r3, [r7, #15]
    break;
 800b292:	bf00      	nop
  }
  return  speed;
 800b294:	7bfb      	ldrb	r3, [r7, #15]
}
 800b296:	4618      	mov	r0, r3
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b084      	sub	sp, #16
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7f7 ff3d 	bl	8003134 <HAL_HCD_ResetPort>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2be:	7bfb      	ldrb	r3, [r7, #15]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f000 f901 	bl	800b4c8 <USBH_Get_USB_Status>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3710      	adds	r7, #16
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	460b      	mov	r3, r1
 800b2de:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b2e6:	78fa      	ldrb	r2, [r7, #3]
 800b2e8:	4611      	mov	r1, r2
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7f7 ff45 	bl	800317a <HAL_HCD_HC_GetXferCount>
 800b2f0:	4603      	mov	r3, r0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3708      	adds	r7, #8
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b2fa:	b590      	push	{r4, r7, lr}
 800b2fc:	b089      	sub	sp, #36	@ 0x24
 800b2fe:	af04      	add	r7, sp, #16
 800b300:	6078      	str	r0, [r7, #4]
 800b302:	4608      	mov	r0, r1
 800b304:	4611      	mov	r1, r2
 800b306:	461a      	mov	r2, r3
 800b308:	4603      	mov	r3, r0
 800b30a:	70fb      	strb	r3, [r7, #3]
 800b30c:	460b      	mov	r3, r1
 800b30e:	70bb      	strb	r3, [r7, #2]
 800b310:	4613      	mov	r3, r2
 800b312:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b314:	2300      	movs	r3, #0
 800b316:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b318:	2300      	movs	r3, #0
 800b31a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b322:	787c      	ldrb	r4, [r7, #1]
 800b324:	78ba      	ldrb	r2, [r7, #2]
 800b326:	78f9      	ldrb	r1, [r7, #3]
 800b328:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b32a:	9302      	str	r3, [sp, #8]
 800b32c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b330:	9301      	str	r3, [sp, #4]
 800b332:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b336:	9300      	str	r3, [sp, #0]
 800b338:	4623      	mov	r3, r4
 800b33a:	f7f7 fb32 	bl	80029a2 <HAL_HCD_HC_Init>
 800b33e:	4603      	mov	r3, r0
 800b340:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b342:	7bfb      	ldrb	r3, [r7, #15]
 800b344:	4618      	mov	r0, r3
 800b346:	f000 f8bf 	bl	800b4c8 <USBH_Get_USB_Status>
 800b34a:	4603      	mov	r3, r0
 800b34c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b34e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3714      	adds	r7, #20
 800b354:	46bd      	mov	sp, r7
 800b356:	bd90      	pop	{r4, r7, pc}

0800b358 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	460b      	mov	r3, r1
 800b362:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b364:	2300      	movs	r3, #0
 800b366:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b368:	2300      	movs	r3, #0
 800b36a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b372:	78fa      	ldrb	r2, [r7, #3]
 800b374:	4611      	mov	r1, r2
 800b376:	4618      	mov	r0, r3
 800b378:	f7f7 fbcb 	bl	8002b12 <HAL_HCD_HC_Halt>
 800b37c:	4603      	mov	r3, r0
 800b37e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b380:	7bfb      	ldrb	r3, [r7, #15]
 800b382:	4618      	mov	r0, r3
 800b384:	f000 f8a0 	bl	800b4c8 <USBH_Get_USB_Status>
 800b388:	4603      	mov	r3, r0
 800b38a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b38c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b396:	b590      	push	{r4, r7, lr}
 800b398:	b089      	sub	sp, #36	@ 0x24
 800b39a:	af04      	add	r7, sp, #16
 800b39c:	6078      	str	r0, [r7, #4]
 800b39e:	4608      	mov	r0, r1
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	70fb      	strb	r3, [r7, #3]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	70bb      	strb	r3, [r7, #2]
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b3be:	787c      	ldrb	r4, [r7, #1]
 800b3c0:	78ba      	ldrb	r2, [r7, #2]
 800b3c2:	78f9      	ldrb	r1, [r7, #3]
 800b3c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b3c8:	9303      	str	r3, [sp, #12]
 800b3ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b3cc:	9302      	str	r3, [sp, #8]
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d0:	9301      	str	r3, [sp, #4]
 800b3d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b3d6:	9300      	str	r3, [sp, #0]
 800b3d8:	4623      	mov	r3, r4
 800b3da:	f7f7 fbbd 	bl	8002b58 <HAL_HCD_HC_SubmitRequest>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b3e2:	7bfb      	ldrb	r3, [r7, #15]
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f000 f86f 	bl	800b4c8 <USBH_Get_USB_Status>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3714      	adds	r7, #20
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd90      	pop	{r4, r7, pc}

0800b3f8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	460b      	mov	r3, r1
 800b402:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b40a:	78fa      	ldrb	r2, [r7, #3]
 800b40c:	4611      	mov	r1, r2
 800b40e:	4618      	mov	r0, r3
 800b410:	f7f7 fe9e 	bl	8003150 <HAL_HCD_HC_GetURBState>
 800b414:	4603      	mov	r3, r0
}
 800b416:	4618      	mov	r0, r3
 800b418:	3708      	adds	r7, #8
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b41e:	b580      	push	{r7, lr}
 800b420:	b082      	sub	sp, #8
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
 800b426:	460b      	mov	r3, r1
 800b428:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b430:	2b01      	cmp	r3, #1
 800b432:	d103      	bne.n	800b43c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b434:	78fb      	ldrb	r3, [r7, #3]
 800b436:	4618      	mov	r0, r3
 800b438:	f000 f872 	bl	800b520 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b43c:	20c8      	movs	r0, #200	@ 0xc8
 800b43e:	f7f6 feb3 	bl	80021a8 <HAL_Delay>
  return USBH_OK;
 800b442:	2300      	movs	r3, #0
}
 800b444:	4618      	mov	r0, r3
 800b446:	3708      	adds	r7, #8
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	460b      	mov	r3, r1
 800b456:	70fb      	strb	r3, [r7, #3]
 800b458:	4613      	mov	r3, r2
 800b45a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b462:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b464:	78fa      	ldrb	r2, [r7, #3]
 800b466:	68f9      	ldr	r1, [r7, #12]
 800b468:	4613      	mov	r3, r2
 800b46a:	011b      	lsls	r3, r3, #4
 800b46c:	1a9b      	subs	r3, r3, r2
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	440b      	add	r3, r1
 800b472:	3317      	adds	r3, #23
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00a      	beq.n	800b490 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b47a:	78fa      	ldrb	r2, [r7, #3]
 800b47c:	68f9      	ldr	r1, [r7, #12]
 800b47e:	4613      	mov	r3, r2
 800b480:	011b      	lsls	r3, r3, #4
 800b482:	1a9b      	subs	r3, r3, r2
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	440b      	add	r3, r1
 800b488:	333c      	adds	r3, #60	@ 0x3c
 800b48a:	78ba      	ldrb	r2, [r7, #2]
 800b48c:	701a      	strb	r2, [r3, #0]
 800b48e:	e009      	b.n	800b4a4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b490:	78fa      	ldrb	r2, [r7, #3]
 800b492:	68f9      	ldr	r1, [r7, #12]
 800b494:	4613      	mov	r3, r2
 800b496:	011b      	lsls	r3, r3, #4
 800b498:	1a9b      	subs	r3, r3, r2
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	440b      	add	r3, r1
 800b49e:	333d      	adds	r3, #61	@ 0x3d
 800b4a0:	78ba      	ldrb	r2, [r7, #2]
 800b4a2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3714      	adds	r7, #20
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr

0800b4b2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b082      	sub	sp, #8
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f7f6 fe74 	bl	80021a8 <HAL_Delay>
}
 800b4c0:	bf00      	nop
 800b4c2:	3708      	adds	r7, #8
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b4d6:	79fb      	ldrb	r3, [r7, #7]
 800b4d8:	2b03      	cmp	r3, #3
 800b4da:	d817      	bhi.n	800b50c <USBH_Get_USB_Status+0x44>
 800b4dc:	a201      	add	r2, pc, #4	@ (adr r2, 800b4e4 <USBH_Get_USB_Status+0x1c>)
 800b4de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e2:	bf00      	nop
 800b4e4:	0800b4f5 	.word	0x0800b4f5
 800b4e8:	0800b4fb 	.word	0x0800b4fb
 800b4ec:	0800b501 	.word	0x0800b501
 800b4f0:	0800b507 	.word	0x0800b507
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b4f8:	e00b      	b.n	800b512 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b4fa:	2302      	movs	r3, #2
 800b4fc:	73fb      	strb	r3, [r7, #15]
    break;
 800b4fe:	e008      	b.n	800b512 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b500:	2301      	movs	r3, #1
 800b502:	73fb      	strb	r3, [r7, #15]
    break;
 800b504:	e005      	b.n	800b512 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b506:	2302      	movs	r3, #2
 800b508:	73fb      	strb	r3, [r7, #15]
    break;
 800b50a:	e002      	b.n	800b512 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b50c:	2302      	movs	r3, #2
 800b50e:	73fb      	strb	r3, [r7, #15]
    break;
 800b510:	bf00      	nop
  }
  return usb_status;
 800b512:	7bfb      	ldrb	r3, [r7, #15]
}
 800b514:	4618      	mov	r0, r3
 800b516:	3714      	adds	r7, #20
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	4603      	mov	r3, r0
 800b528:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b52a:	79fb      	ldrb	r3, [r7, #7]
 800b52c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b52e:	79fb      	ldrb	r3, [r7, #7]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d102      	bne.n	800b53a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b534:	2300      	movs	r3, #0
 800b536:	73fb      	strb	r3, [r7, #15]
 800b538:	e001      	b.n	800b53e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b53a:	2301      	movs	r3, #1
 800b53c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b53e:	7bfb      	ldrb	r3, [r7, #15]
 800b540:	461a      	mov	r2, r3
 800b542:	2101      	movs	r1, #1
 800b544:	4803      	ldr	r0, [pc, #12]	@ (800b554 <MX_DriverVbusFS+0x34>)
 800b546:	f7f7 f993 	bl	8002870 <HAL_GPIO_WritePin>
}
 800b54a:	bf00      	nop
 800b54c:	3710      	adds	r7, #16
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	40020800 	.word	0x40020800

0800b558 <malloc>:
 800b558:	4b02      	ldr	r3, [pc, #8]	@ (800b564 <malloc+0xc>)
 800b55a:	4601      	mov	r1, r0
 800b55c:	6818      	ldr	r0, [r3, #0]
 800b55e:	f000 b82d 	b.w	800b5bc <_malloc_r>
 800b562:	bf00      	nop
 800b564:	20000040 	.word	0x20000040

0800b568 <free>:
 800b568:	4b02      	ldr	r3, [pc, #8]	@ (800b574 <free+0xc>)
 800b56a:	4601      	mov	r1, r0
 800b56c:	6818      	ldr	r0, [r3, #0]
 800b56e:	f001 bd1b 	b.w	800cfa8 <_free_r>
 800b572:	bf00      	nop
 800b574:	20000040 	.word	0x20000040

0800b578 <sbrk_aligned>:
 800b578:	b570      	push	{r4, r5, r6, lr}
 800b57a:	4e0f      	ldr	r6, [pc, #60]	@ (800b5b8 <sbrk_aligned+0x40>)
 800b57c:	460c      	mov	r4, r1
 800b57e:	6831      	ldr	r1, [r6, #0]
 800b580:	4605      	mov	r5, r0
 800b582:	b911      	cbnz	r1, 800b58a <sbrk_aligned+0x12>
 800b584:	f000 fe72 	bl	800c26c <_sbrk_r>
 800b588:	6030      	str	r0, [r6, #0]
 800b58a:	4621      	mov	r1, r4
 800b58c:	4628      	mov	r0, r5
 800b58e:	f000 fe6d 	bl	800c26c <_sbrk_r>
 800b592:	1c43      	adds	r3, r0, #1
 800b594:	d103      	bne.n	800b59e <sbrk_aligned+0x26>
 800b596:	f04f 34ff 	mov.w	r4, #4294967295
 800b59a:	4620      	mov	r0, r4
 800b59c:	bd70      	pop	{r4, r5, r6, pc}
 800b59e:	1cc4      	adds	r4, r0, #3
 800b5a0:	f024 0403 	bic.w	r4, r4, #3
 800b5a4:	42a0      	cmp	r0, r4
 800b5a6:	d0f8      	beq.n	800b59a <sbrk_aligned+0x22>
 800b5a8:	1a21      	subs	r1, r4, r0
 800b5aa:	4628      	mov	r0, r5
 800b5ac:	f000 fe5e 	bl	800c26c <_sbrk_r>
 800b5b0:	3001      	adds	r0, #1
 800b5b2:	d1f2      	bne.n	800b59a <sbrk_aligned+0x22>
 800b5b4:	e7ef      	b.n	800b596 <sbrk_aligned+0x1e>
 800b5b6:	bf00      	nop
 800b5b8:	20001788 	.word	0x20001788

0800b5bc <_malloc_r>:
 800b5bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5c0:	1ccd      	adds	r5, r1, #3
 800b5c2:	f025 0503 	bic.w	r5, r5, #3
 800b5c6:	3508      	adds	r5, #8
 800b5c8:	2d0c      	cmp	r5, #12
 800b5ca:	bf38      	it	cc
 800b5cc:	250c      	movcc	r5, #12
 800b5ce:	2d00      	cmp	r5, #0
 800b5d0:	4606      	mov	r6, r0
 800b5d2:	db01      	blt.n	800b5d8 <_malloc_r+0x1c>
 800b5d4:	42a9      	cmp	r1, r5
 800b5d6:	d904      	bls.n	800b5e2 <_malloc_r+0x26>
 800b5d8:	230c      	movs	r3, #12
 800b5da:	6033      	str	r3, [r6, #0]
 800b5dc:	2000      	movs	r0, #0
 800b5de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b6b8 <_malloc_r+0xfc>
 800b5e6:	f000 f869 	bl	800b6bc <__malloc_lock>
 800b5ea:	f8d8 3000 	ldr.w	r3, [r8]
 800b5ee:	461c      	mov	r4, r3
 800b5f0:	bb44      	cbnz	r4, 800b644 <_malloc_r+0x88>
 800b5f2:	4629      	mov	r1, r5
 800b5f4:	4630      	mov	r0, r6
 800b5f6:	f7ff ffbf 	bl	800b578 <sbrk_aligned>
 800b5fa:	1c43      	adds	r3, r0, #1
 800b5fc:	4604      	mov	r4, r0
 800b5fe:	d158      	bne.n	800b6b2 <_malloc_r+0xf6>
 800b600:	f8d8 4000 	ldr.w	r4, [r8]
 800b604:	4627      	mov	r7, r4
 800b606:	2f00      	cmp	r7, #0
 800b608:	d143      	bne.n	800b692 <_malloc_r+0xd6>
 800b60a:	2c00      	cmp	r4, #0
 800b60c:	d04b      	beq.n	800b6a6 <_malloc_r+0xea>
 800b60e:	6823      	ldr	r3, [r4, #0]
 800b610:	4639      	mov	r1, r7
 800b612:	4630      	mov	r0, r6
 800b614:	eb04 0903 	add.w	r9, r4, r3
 800b618:	f000 fe28 	bl	800c26c <_sbrk_r>
 800b61c:	4581      	cmp	r9, r0
 800b61e:	d142      	bne.n	800b6a6 <_malloc_r+0xea>
 800b620:	6821      	ldr	r1, [r4, #0]
 800b622:	1a6d      	subs	r5, r5, r1
 800b624:	4629      	mov	r1, r5
 800b626:	4630      	mov	r0, r6
 800b628:	f7ff ffa6 	bl	800b578 <sbrk_aligned>
 800b62c:	3001      	adds	r0, #1
 800b62e:	d03a      	beq.n	800b6a6 <_malloc_r+0xea>
 800b630:	6823      	ldr	r3, [r4, #0]
 800b632:	442b      	add	r3, r5
 800b634:	6023      	str	r3, [r4, #0]
 800b636:	f8d8 3000 	ldr.w	r3, [r8]
 800b63a:	685a      	ldr	r2, [r3, #4]
 800b63c:	bb62      	cbnz	r2, 800b698 <_malloc_r+0xdc>
 800b63e:	f8c8 7000 	str.w	r7, [r8]
 800b642:	e00f      	b.n	800b664 <_malloc_r+0xa8>
 800b644:	6822      	ldr	r2, [r4, #0]
 800b646:	1b52      	subs	r2, r2, r5
 800b648:	d420      	bmi.n	800b68c <_malloc_r+0xd0>
 800b64a:	2a0b      	cmp	r2, #11
 800b64c:	d917      	bls.n	800b67e <_malloc_r+0xc2>
 800b64e:	1961      	adds	r1, r4, r5
 800b650:	42a3      	cmp	r3, r4
 800b652:	6025      	str	r5, [r4, #0]
 800b654:	bf18      	it	ne
 800b656:	6059      	strne	r1, [r3, #4]
 800b658:	6863      	ldr	r3, [r4, #4]
 800b65a:	bf08      	it	eq
 800b65c:	f8c8 1000 	streq.w	r1, [r8]
 800b660:	5162      	str	r2, [r4, r5]
 800b662:	604b      	str	r3, [r1, #4]
 800b664:	4630      	mov	r0, r6
 800b666:	f000 f82f 	bl	800b6c8 <__malloc_unlock>
 800b66a:	f104 000b 	add.w	r0, r4, #11
 800b66e:	1d23      	adds	r3, r4, #4
 800b670:	f020 0007 	bic.w	r0, r0, #7
 800b674:	1ac2      	subs	r2, r0, r3
 800b676:	bf1c      	itt	ne
 800b678:	1a1b      	subne	r3, r3, r0
 800b67a:	50a3      	strne	r3, [r4, r2]
 800b67c:	e7af      	b.n	800b5de <_malloc_r+0x22>
 800b67e:	6862      	ldr	r2, [r4, #4]
 800b680:	42a3      	cmp	r3, r4
 800b682:	bf0c      	ite	eq
 800b684:	f8c8 2000 	streq.w	r2, [r8]
 800b688:	605a      	strne	r2, [r3, #4]
 800b68a:	e7eb      	b.n	800b664 <_malloc_r+0xa8>
 800b68c:	4623      	mov	r3, r4
 800b68e:	6864      	ldr	r4, [r4, #4]
 800b690:	e7ae      	b.n	800b5f0 <_malloc_r+0x34>
 800b692:	463c      	mov	r4, r7
 800b694:	687f      	ldr	r7, [r7, #4]
 800b696:	e7b6      	b.n	800b606 <_malloc_r+0x4a>
 800b698:	461a      	mov	r2, r3
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	42a3      	cmp	r3, r4
 800b69e:	d1fb      	bne.n	800b698 <_malloc_r+0xdc>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	6053      	str	r3, [r2, #4]
 800b6a4:	e7de      	b.n	800b664 <_malloc_r+0xa8>
 800b6a6:	230c      	movs	r3, #12
 800b6a8:	6033      	str	r3, [r6, #0]
 800b6aa:	4630      	mov	r0, r6
 800b6ac:	f000 f80c 	bl	800b6c8 <__malloc_unlock>
 800b6b0:	e794      	b.n	800b5dc <_malloc_r+0x20>
 800b6b2:	6005      	str	r5, [r0, #0]
 800b6b4:	e7d6      	b.n	800b664 <_malloc_r+0xa8>
 800b6b6:	bf00      	nop
 800b6b8:	2000178c 	.word	0x2000178c

0800b6bc <__malloc_lock>:
 800b6bc:	4801      	ldr	r0, [pc, #4]	@ (800b6c4 <__malloc_lock+0x8>)
 800b6be:	f000 be22 	b.w	800c306 <__retarget_lock_acquire_recursive>
 800b6c2:	bf00      	nop
 800b6c4:	200018d0 	.word	0x200018d0

0800b6c8 <__malloc_unlock>:
 800b6c8:	4801      	ldr	r0, [pc, #4]	@ (800b6d0 <__malloc_unlock+0x8>)
 800b6ca:	f000 be1d 	b.w	800c308 <__retarget_lock_release_recursive>
 800b6ce:	bf00      	nop
 800b6d0:	200018d0 	.word	0x200018d0

0800b6d4 <__cvt>:
 800b6d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6d8:	ec57 6b10 	vmov	r6, r7, d0
 800b6dc:	2f00      	cmp	r7, #0
 800b6de:	460c      	mov	r4, r1
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	463b      	mov	r3, r7
 800b6e4:	bfbb      	ittet	lt
 800b6e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b6ea:	461f      	movlt	r7, r3
 800b6ec:	2300      	movge	r3, #0
 800b6ee:	232d      	movlt	r3, #45	@ 0x2d
 800b6f0:	700b      	strb	r3, [r1, #0]
 800b6f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b6f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b6f8:	4691      	mov	r9, r2
 800b6fa:	f023 0820 	bic.w	r8, r3, #32
 800b6fe:	bfbc      	itt	lt
 800b700:	4632      	movlt	r2, r6
 800b702:	4616      	movlt	r6, r2
 800b704:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b708:	d005      	beq.n	800b716 <__cvt+0x42>
 800b70a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b70e:	d100      	bne.n	800b712 <__cvt+0x3e>
 800b710:	3401      	adds	r4, #1
 800b712:	2102      	movs	r1, #2
 800b714:	e000      	b.n	800b718 <__cvt+0x44>
 800b716:	2103      	movs	r1, #3
 800b718:	ab03      	add	r3, sp, #12
 800b71a:	9301      	str	r3, [sp, #4]
 800b71c:	ab02      	add	r3, sp, #8
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	ec47 6b10 	vmov	d0, r6, r7
 800b724:	4653      	mov	r3, sl
 800b726:	4622      	mov	r2, r4
 800b728:	f000 fe7a 	bl	800c420 <_dtoa_r>
 800b72c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b730:	4605      	mov	r5, r0
 800b732:	d119      	bne.n	800b768 <__cvt+0x94>
 800b734:	f019 0f01 	tst.w	r9, #1
 800b738:	d00e      	beq.n	800b758 <__cvt+0x84>
 800b73a:	eb00 0904 	add.w	r9, r0, r4
 800b73e:	2200      	movs	r2, #0
 800b740:	2300      	movs	r3, #0
 800b742:	4630      	mov	r0, r6
 800b744:	4639      	mov	r1, r7
 800b746:	f7f5 f9bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800b74a:	b108      	cbz	r0, 800b750 <__cvt+0x7c>
 800b74c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b750:	2230      	movs	r2, #48	@ 0x30
 800b752:	9b03      	ldr	r3, [sp, #12]
 800b754:	454b      	cmp	r3, r9
 800b756:	d31e      	bcc.n	800b796 <__cvt+0xc2>
 800b758:	9b03      	ldr	r3, [sp, #12]
 800b75a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b75c:	1b5b      	subs	r3, r3, r5
 800b75e:	4628      	mov	r0, r5
 800b760:	6013      	str	r3, [r2, #0]
 800b762:	b004      	add	sp, #16
 800b764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b768:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b76c:	eb00 0904 	add.w	r9, r0, r4
 800b770:	d1e5      	bne.n	800b73e <__cvt+0x6a>
 800b772:	7803      	ldrb	r3, [r0, #0]
 800b774:	2b30      	cmp	r3, #48	@ 0x30
 800b776:	d10a      	bne.n	800b78e <__cvt+0xba>
 800b778:	2200      	movs	r2, #0
 800b77a:	2300      	movs	r3, #0
 800b77c:	4630      	mov	r0, r6
 800b77e:	4639      	mov	r1, r7
 800b780:	f7f5 f9a2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b784:	b918      	cbnz	r0, 800b78e <__cvt+0xba>
 800b786:	f1c4 0401 	rsb	r4, r4, #1
 800b78a:	f8ca 4000 	str.w	r4, [sl]
 800b78e:	f8da 3000 	ldr.w	r3, [sl]
 800b792:	4499      	add	r9, r3
 800b794:	e7d3      	b.n	800b73e <__cvt+0x6a>
 800b796:	1c59      	adds	r1, r3, #1
 800b798:	9103      	str	r1, [sp, #12]
 800b79a:	701a      	strb	r2, [r3, #0]
 800b79c:	e7d9      	b.n	800b752 <__cvt+0x7e>

0800b79e <__exponent>:
 800b79e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7a0:	2900      	cmp	r1, #0
 800b7a2:	bfba      	itte	lt
 800b7a4:	4249      	neglt	r1, r1
 800b7a6:	232d      	movlt	r3, #45	@ 0x2d
 800b7a8:	232b      	movge	r3, #43	@ 0x2b
 800b7aa:	2909      	cmp	r1, #9
 800b7ac:	7002      	strb	r2, [r0, #0]
 800b7ae:	7043      	strb	r3, [r0, #1]
 800b7b0:	dd29      	ble.n	800b806 <__exponent+0x68>
 800b7b2:	f10d 0307 	add.w	r3, sp, #7
 800b7b6:	461d      	mov	r5, r3
 800b7b8:	270a      	movs	r7, #10
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	fbb1 f6f7 	udiv	r6, r1, r7
 800b7c0:	fb07 1416 	mls	r4, r7, r6, r1
 800b7c4:	3430      	adds	r4, #48	@ 0x30
 800b7c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b7ca:	460c      	mov	r4, r1
 800b7cc:	2c63      	cmp	r4, #99	@ 0x63
 800b7ce:	f103 33ff 	add.w	r3, r3, #4294967295
 800b7d2:	4631      	mov	r1, r6
 800b7d4:	dcf1      	bgt.n	800b7ba <__exponent+0x1c>
 800b7d6:	3130      	adds	r1, #48	@ 0x30
 800b7d8:	1e94      	subs	r4, r2, #2
 800b7da:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b7de:	1c41      	adds	r1, r0, #1
 800b7e0:	4623      	mov	r3, r4
 800b7e2:	42ab      	cmp	r3, r5
 800b7e4:	d30a      	bcc.n	800b7fc <__exponent+0x5e>
 800b7e6:	f10d 0309 	add.w	r3, sp, #9
 800b7ea:	1a9b      	subs	r3, r3, r2
 800b7ec:	42ac      	cmp	r4, r5
 800b7ee:	bf88      	it	hi
 800b7f0:	2300      	movhi	r3, #0
 800b7f2:	3302      	adds	r3, #2
 800b7f4:	4403      	add	r3, r0
 800b7f6:	1a18      	subs	r0, r3, r0
 800b7f8:	b003      	add	sp, #12
 800b7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b800:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b804:	e7ed      	b.n	800b7e2 <__exponent+0x44>
 800b806:	2330      	movs	r3, #48	@ 0x30
 800b808:	3130      	adds	r1, #48	@ 0x30
 800b80a:	7083      	strb	r3, [r0, #2]
 800b80c:	70c1      	strb	r1, [r0, #3]
 800b80e:	1d03      	adds	r3, r0, #4
 800b810:	e7f1      	b.n	800b7f6 <__exponent+0x58>
	...

0800b814 <_printf_float>:
 800b814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b818:	b08d      	sub	sp, #52	@ 0x34
 800b81a:	460c      	mov	r4, r1
 800b81c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b820:	4616      	mov	r6, r2
 800b822:	461f      	mov	r7, r3
 800b824:	4605      	mov	r5, r0
 800b826:	f000 fce9 	bl	800c1fc <_localeconv_r>
 800b82a:	6803      	ldr	r3, [r0, #0]
 800b82c:	9304      	str	r3, [sp, #16]
 800b82e:	4618      	mov	r0, r3
 800b830:	f7f4 fd1e 	bl	8000270 <strlen>
 800b834:	2300      	movs	r3, #0
 800b836:	930a      	str	r3, [sp, #40]	@ 0x28
 800b838:	f8d8 3000 	ldr.w	r3, [r8]
 800b83c:	9005      	str	r0, [sp, #20]
 800b83e:	3307      	adds	r3, #7
 800b840:	f023 0307 	bic.w	r3, r3, #7
 800b844:	f103 0208 	add.w	r2, r3, #8
 800b848:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b84c:	f8d4 b000 	ldr.w	fp, [r4]
 800b850:	f8c8 2000 	str.w	r2, [r8]
 800b854:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b858:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b85c:	9307      	str	r3, [sp, #28]
 800b85e:	f8cd 8018 	str.w	r8, [sp, #24]
 800b862:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b866:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b86a:	4b9c      	ldr	r3, [pc, #624]	@ (800badc <_printf_float+0x2c8>)
 800b86c:	f04f 32ff 	mov.w	r2, #4294967295
 800b870:	f7f5 f95c 	bl	8000b2c <__aeabi_dcmpun>
 800b874:	bb70      	cbnz	r0, 800b8d4 <_printf_float+0xc0>
 800b876:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b87a:	4b98      	ldr	r3, [pc, #608]	@ (800badc <_printf_float+0x2c8>)
 800b87c:	f04f 32ff 	mov.w	r2, #4294967295
 800b880:	f7f5 f936 	bl	8000af0 <__aeabi_dcmple>
 800b884:	bb30      	cbnz	r0, 800b8d4 <_printf_float+0xc0>
 800b886:	2200      	movs	r2, #0
 800b888:	2300      	movs	r3, #0
 800b88a:	4640      	mov	r0, r8
 800b88c:	4649      	mov	r1, r9
 800b88e:	f7f5 f925 	bl	8000adc <__aeabi_dcmplt>
 800b892:	b110      	cbz	r0, 800b89a <_printf_float+0x86>
 800b894:	232d      	movs	r3, #45	@ 0x2d
 800b896:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b89a:	4a91      	ldr	r2, [pc, #580]	@ (800bae0 <_printf_float+0x2cc>)
 800b89c:	4b91      	ldr	r3, [pc, #580]	@ (800bae4 <_printf_float+0x2d0>)
 800b89e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b8a2:	bf94      	ite	ls
 800b8a4:	4690      	movls	r8, r2
 800b8a6:	4698      	movhi	r8, r3
 800b8a8:	2303      	movs	r3, #3
 800b8aa:	6123      	str	r3, [r4, #16]
 800b8ac:	f02b 0304 	bic.w	r3, fp, #4
 800b8b0:	6023      	str	r3, [r4, #0]
 800b8b2:	f04f 0900 	mov.w	r9, #0
 800b8b6:	9700      	str	r7, [sp, #0]
 800b8b8:	4633      	mov	r3, r6
 800b8ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b8bc:	4621      	mov	r1, r4
 800b8be:	4628      	mov	r0, r5
 800b8c0:	f000 f9d2 	bl	800bc68 <_printf_common>
 800b8c4:	3001      	adds	r0, #1
 800b8c6:	f040 808d 	bne.w	800b9e4 <_printf_float+0x1d0>
 800b8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ce:	b00d      	add	sp, #52	@ 0x34
 800b8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d4:	4642      	mov	r2, r8
 800b8d6:	464b      	mov	r3, r9
 800b8d8:	4640      	mov	r0, r8
 800b8da:	4649      	mov	r1, r9
 800b8dc:	f7f5 f926 	bl	8000b2c <__aeabi_dcmpun>
 800b8e0:	b140      	cbz	r0, 800b8f4 <_printf_float+0xe0>
 800b8e2:	464b      	mov	r3, r9
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	bfbc      	itt	lt
 800b8e8:	232d      	movlt	r3, #45	@ 0x2d
 800b8ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b8ee:	4a7e      	ldr	r2, [pc, #504]	@ (800bae8 <_printf_float+0x2d4>)
 800b8f0:	4b7e      	ldr	r3, [pc, #504]	@ (800baec <_printf_float+0x2d8>)
 800b8f2:	e7d4      	b.n	800b89e <_printf_float+0x8a>
 800b8f4:	6863      	ldr	r3, [r4, #4]
 800b8f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b8fa:	9206      	str	r2, [sp, #24]
 800b8fc:	1c5a      	adds	r2, r3, #1
 800b8fe:	d13b      	bne.n	800b978 <_printf_float+0x164>
 800b900:	2306      	movs	r3, #6
 800b902:	6063      	str	r3, [r4, #4]
 800b904:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b908:	2300      	movs	r3, #0
 800b90a:	6022      	str	r2, [r4, #0]
 800b90c:	9303      	str	r3, [sp, #12]
 800b90e:	ab0a      	add	r3, sp, #40	@ 0x28
 800b910:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b914:	ab09      	add	r3, sp, #36	@ 0x24
 800b916:	9300      	str	r3, [sp, #0]
 800b918:	6861      	ldr	r1, [r4, #4]
 800b91a:	ec49 8b10 	vmov	d0, r8, r9
 800b91e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b922:	4628      	mov	r0, r5
 800b924:	f7ff fed6 	bl	800b6d4 <__cvt>
 800b928:	9b06      	ldr	r3, [sp, #24]
 800b92a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b92c:	2b47      	cmp	r3, #71	@ 0x47
 800b92e:	4680      	mov	r8, r0
 800b930:	d129      	bne.n	800b986 <_printf_float+0x172>
 800b932:	1cc8      	adds	r0, r1, #3
 800b934:	db02      	blt.n	800b93c <_printf_float+0x128>
 800b936:	6863      	ldr	r3, [r4, #4]
 800b938:	4299      	cmp	r1, r3
 800b93a:	dd41      	ble.n	800b9c0 <_printf_float+0x1ac>
 800b93c:	f1aa 0a02 	sub.w	sl, sl, #2
 800b940:	fa5f fa8a 	uxtb.w	sl, sl
 800b944:	3901      	subs	r1, #1
 800b946:	4652      	mov	r2, sl
 800b948:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b94c:	9109      	str	r1, [sp, #36]	@ 0x24
 800b94e:	f7ff ff26 	bl	800b79e <__exponent>
 800b952:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b954:	1813      	adds	r3, r2, r0
 800b956:	2a01      	cmp	r2, #1
 800b958:	4681      	mov	r9, r0
 800b95a:	6123      	str	r3, [r4, #16]
 800b95c:	dc02      	bgt.n	800b964 <_printf_float+0x150>
 800b95e:	6822      	ldr	r2, [r4, #0]
 800b960:	07d2      	lsls	r2, r2, #31
 800b962:	d501      	bpl.n	800b968 <_printf_float+0x154>
 800b964:	3301      	adds	r3, #1
 800b966:	6123      	str	r3, [r4, #16]
 800b968:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d0a2      	beq.n	800b8b6 <_printf_float+0xa2>
 800b970:	232d      	movs	r3, #45	@ 0x2d
 800b972:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b976:	e79e      	b.n	800b8b6 <_printf_float+0xa2>
 800b978:	9a06      	ldr	r2, [sp, #24]
 800b97a:	2a47      	cmp	r2, #71	@ 0x47
 800b97c:	d1c2      	bne.n	800b904 <_printf_float+0xf0>
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d1c0      	bne.n	800b904 <_printf_float+0xf0>
 800b982:	2301      	movs	r3, #1
 800b984:	e7bd      	b.n	800b902 <_printf_float+0xee>
 800b986:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b98a:	d9db      	bls.n	800b944 <_printf_float+0x130>
 800b98c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b990:	d118      	bne.n	800b9c4 <_printf_float+0x1b0>
 800b992:	2900      	cmp	r1, #0
 800b994:	6863      	ldr	r3, [r4, #4]
 800b996:	dd0b      	ble.n	800b9b0 <_printf_float+0x19c>
 800b998:	6121      	str	r1, [r4, #16]
 800b99a:	b913      	cbnz	r3, 800b9a2 <_printf_float+0x18e>
 800b99c:	6822      	ldr	r2, [r4, #0]
 800b99e:	07d0      	lsls	r0, r2, #31
 800b9a0:	d502      	bpl.n	800b9a8 <_printf_float+0x194>
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	440b      	add	r3, r1
 800b9a6:	6123      	str	r3, [r4, #16]
 800b9a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b9aa:	f04f 0900 	mov.w	r9, #0
 800b9ae:	e7db      	b.n	800b968 <_printf_float+0x154>
 800b9b0:	b913      	cbnz	r3, 800b9b8 <_printf_float+0x1a4>
 800b9b2:	6822      	ldr	r2, [r4, #0]
 800b9b4:	07d2      	lsls	r2, r2, #31
 800b9b6:	d501      	bpl.n	800b9bc <_printf_float+0x1a8>
 800b9b8:	3302      	adds	r3, #2
 800b9ba:	e7f4      	b.n	800b9a6 <_printf_float+0x192>
 800b9bc:	2301      	movs	r3, #1
 800b9be:	e7f2      	b.n	800b9a6 <_printf_float+0x192>
 800b9c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b9c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9c6:	4299      	cmp	r1, r3
 800b9c8:	db05      	blt.n	800b9d6 <_printf_float+0x1c2>
 800b9ca:	6823      	ldr	r3, [r4, #0]
 800b9cc:	6121      	str	r1, [r4, #16]
 800b9ce:	07d8      	lsls	r0, r3, #31
 800b9d0:	d5ea      	bpl.n	800b9a8 <_printf_float+0x194>
 800b9d2:	1c4b      	adds	r3, r1, #1
 800b9d4:	e7e7      	b.n	800b9a6 <_printf_float+0x192>
 800b9d6:	2900      	cmp	r1, #0
 800b9d8:	bfd4      	ite	le
 800b9da:	f1c1 0202 	rsble	r2, r1, #2
 800b9de:	2201      	movgt	r2, #1
 800b9e0:	4413      	add	r3, r2
 800b9e2:	e7e0      	b.n	800b9a6 <_printf_float+0x192>
 800b9e4:	6823      	ldr	r3, [r4, #0]
 800b9e6:	055a      	lsls	r2, r3, #21
 800b9e8:	d407      	bmi.n	800b9fa <_printf_float+0x1e6>
 800b9ea:	6923      	ldr	r3, [r4, #16]
 800b9ec:	4642      	mov	r2, r8
 800b9ee:	4631      	mov	r1, r6
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	47b8      	blx	r7
 800b9f4:	3001      	adds	r0, #1
 800b9f6:	d12b      	bne.n	800ba50 <_printf_float+0x23c>
 800b9f8:	e767      	b.n	800b8ca <_printf_float+0xb6>
 800b9fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b9fe:	f240 80dd 	bls.w	800bbbc <_printf_float+0x3a8>
 800ba02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ba06:	2200      	movs	r2, #0
 800ba08:	2300      	movs	r3, #0
 800ba0a:	f7f5 f85d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	d033      	beq.n	800ba7a <_printf_float+0x266>
 800ba12:	4a37      	ldr	r2, [pc, #220]	@ (800baf0 <_printf_float+0x2dc>)
 800ba14:	2301      	movs	r3, #1
 800ba16:	4631      	mov	r1, r6
 800ba18:	4628      	mov	r0, r5
 800ba1a:	47b8      	blx	r7
 800ba1c:	3001      	adds	r0, #1
 800ba1e:	f43f af54 	beq.w	800b8ca <_printf_float+0xb6>
 800ba22:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ba26:	4543      	cmp	r3, r8
 800ba28:	db02      	blt.n	800ba30 <_printf_float+0x21c>
 800ba2a:	6823      	ldr	r3, [r4, #0]
 800ba2c:	07d8      	lsls	r0, r3, #31
 800ba2e:	d50f      	bpl.n	800ba50 <_printf_float+0x23c>
 800ba30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba34:	4631      	mov	r1, r6
 800ba36:	4628      	mov	r0, r5
 800ba38:	47b8      	blx	r7
 800ba3a:	3001      	adds	r0, #1
 800ba3c:	f43f af45 	beq.w	800b8ca <_printf_float+0xb6>
 800ba40:	f04f 0900 	mov.w	r9, #0
 800ba44:	f108 38ff 	add.w	r8, r8, #4294967295
 800ba48:	f104 0a1a 	add.w	sl, r4, #26
 800ba4c:	45c8      	cmp	r8, r9
 800ba4e:	dc09      	bgt.n	800ba64 <_printf_float+0x250>
 800ba50:	6823      	ldr	r3, [r4, #0]
 800ba52:	079b      	lsls	r3, r3, #30
 800ba54:	f100 8103 	bmi.w	800bc5e <_printf_float+0x44a>
 800ba58:	68e0      	ldr	r0, [r4, #12]
 800ba5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba5c:	4298      	cmp	r0, r3
 800ba5e:	bfb8      	it	lt
 800ba60:	4618      	movlt	r0, r3
 800ba62:	e734      	b.n	800b8ce <_printf_float+0xba>
 800ba64:	2301      	movs	r3, #1
 800ba66:	4652      	mov	r2, sl
 800ba68:	4631      	mov	r1, r6
 800ba6a:	4628      	mov	r0, r5
 800ba6c:	47b8      	blx	r7
 800ba6e:	3001      	adds	r0, #1
 800ba70:	f43f af2b 	beq.w	800b8ca <_printf_float+0xb6>
 800ba74:	f109 0901 	add.w	r9, r9, #1
 800ba78:	e7e8      	b.n	800ba4c <_printf_float+0x238>
 800ba7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	dc39      	bgt.n	800baf4 <_printf_float+0x2e0>
 800ba80:	4a1b      	ldr	r2, [pc, #108]	@ (800baf0 <_printf_float+0x2dc>)
 800ba82:	2301      	movs	r3, #1
 800ba84:	4631      	mov	r1, r6
 800ba86:	4628      	mov	r0, r5
 800ba88:	47b8      	blx	r7
 800ba8a:	3001      	adds	r0, #1
 800ba8c:	f43f af1d 	beq.w	800b8ca <_printf_float+0xb6>
 800ba90:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ba94:	ea59 0303 	orrs.w	r3, r9, r3
 800ba98:	d102      	bne.n	800baa0 <_printf_float+0x28c>
 800ba9a:	6823      	ldr	r3, [r4, #0]
 800ba9c:	07d9      	lsls	r1, r3, #31
 800ba9e:	d5d7      	bpl.n	800ba50 <_printf_float+0x23c>
 800baa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800baa4:	4631      	mov	r1, r6
 800baa6:	4628      	mov	r0, r5
 800baa8:	47b8      	blx	r7
 800baaa:	3001      	adds	r0, #1
 800baac:	f43f af0d 	beq.w	800b8ca <_printf_float+0xb6>
 800bab0:	f04f 0a00 	mov.w	sl, #0
 800bab4:	f104 0b1a 	add.w	fp, r4, #26
 800bab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baba:	425b      	negs	r3, r3
 800babc:	4553      	cmp	r3, sl
 800babe:	dc01      	bgt.n	800bac4 <_printf_float+0x2b0>
 800bac0:	464b      	mov	r3, r9
 800bac2:	e793      	b.n	800b9ec <_printf_float+0x1d8>
 800bac4:	2301      	movs	r3, #1
 800bac6:	465a      	mov	r2, fp
 800bac8:	4631      	mov	r1, r6
 800baca:	4628      	mov	r0, r5
 800bacc:	47b8      	blx	r7
 800bace:	3001      	adds	r0, #1
 800bad0:	f43f aefb 	beq.w	800b8ca <_printf_float+0xb6>
 800bad4:	f10a 0a01 	add.w	sl, sl, #1
 800bad8:	e7ee      	b.n	800bab8 <_printf_float+0x2a4>
 800bada:	bf00      	nop
 800badc:	7fefffff 	.word	0x7fefffff
 800bae0:	0800f1a8 	.word	0x0800f1a8
 800bae4:	0800f1ac 	.word	0x0800f1ac
 800bae8:	0800f1b0 	.word	0x0800f1b0
 800baec:	0800f1b4 	.word	0x0800f1b4
 800baf0:	0800f1b8 	.word	0x0800f1b8
 800baf4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800baf6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bafa:	4553      	cmp	r3, sl
 800bafc:	bfa8      	it	ge
 800bafe:	4653      	movge	r3, sl
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	4699      	mov	r9, r3
 800bb04:	dc36      	bgt.n	800bb74 <_printf_float+0x360>
 800bb06:	f04f 0b00 	mov.w	fp, #0
 800bb0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb0e:	f104 021a 	add.w	r2, r4, #26
 800bb12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bb14:	9306      	str	r3, [sp, #24]
 800bb16:	eba3 0309 	sub.w	r3, r3, r9
 800bb1a:	455b      	cmp	r3, fp
 800bb1c:	dc31      	bgt.n	800bb82 <_printf_float+0x36e>
 800bb1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb20:	459a      	cmp	sl, r3
 800bb22:	dc3a      	bgt.n	800bb9a <_printf_float+0x386>
 800bb24:	6823      	ldr	r3, [r4, #0]
 800bb26:	07da      	lsls	r2, r3, #31
 800bb28:	d437      	bmi.n	800bb9a <_printf_float+0x386>
 800bb2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb2c:	ebaa 0903 	sub.w	r9, sl, r3
 800bb30:	9b06      	ldr	r3, [sp, #24]
 800bb32:	ebaa 0303 	sub.w	r3, sl, r3
 800bb36:	4599      	cmp	r9, r3
 800bb38:	bfa8      	it	ge
 800bb3a:	4699      	movge	r9, r3
 800bb3c:	f1b9 0f00 	cmp.w	r9, #0
 800bb40:	dc33      	bgt.n	800bbaa <_printf_float+0x396>
 800bb42:	f04f 0800 	mov.w	r8, #0
 800bb46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb4a:	f104 0b1a 	add.w	fp, r4, #26
 800bb4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb50:	ebaa 0303 	sub.w	r3, sl, r3
 800bb54:	eba3 0309 	sub.w	r3, r3, r9
 800bb58:	4543      	cmp	r3, r8
 800bb5a:	f77f af79 	ble.w	800ba50 <_printf_float+0x23c>
 800bb5e:	2301      	movs	r3, #1
 800bb60:	465a      	mov	r2, fp
 800bb62:	4631      	mov	r1, r6
 800bb64:	4628      	mov	r0, r5
 800bb66:	47b8      	blx	r7
 800bb68:	3001      	adds	r0, #1
 800bb6a:	f43f aeae 	beq.w	800b8ca <_printf_float+0xb6>
 800bb6e:	f108 0801 	add.w	r8, r8, #1
 800bb72:	e7ec      	b.n	800bb4e <_printf_float+0x33a>
 800bb74:	4642      	mov	r2, r8
 800bb76:	4631      	mov	r1, r6
 800bb78:	4628      	mov	r0, r5
 800bb7a:	47b8      	blx	r7
 800bb7c:	3001      	adds	r0, #1
 800bb7e:	d1c2      	bne.n	800bb06 <_printf_float+0x2f2>
 800bb80:	e6a3      	b.n	800b8ca <_printf_float+0xb6>
 800bb82:	2301      	movs	r3, #1
 800bb84:	4631      	mov	r1, r6
 800bb86:	4628      	mov	r0, r5
 800bb88:	9206      	str	r2, [sp, #24]
 800bb8a:	47b8      	blx	r7
 800bb8c:	3001      	adds	r0, #1
 800bb8e:	f43f ae9c 	beq.w	800b8ca <_printf_float+0xb6>
 800bb92:	9a06      	ldr	r2, [sp, #24]
 800bb94:	f10b 0b01 	add.w	fp, fp, #1
 800bb98:	e7bb      	b.n	800bb12 <_printf_float+0x2fe>
 800bb9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb9e:	4631      	mov	r1, r6
 800bba0:	4628      	mov	r0, r5
 800bba2:	47b8      	blx	r7
 800bba4:	3001      	adds	r0, #1
 800bba6:	d1c0      	bne.n	800bb2a <_printf_float+0x316>
 800bba8:	e68f      	b.n	800b8ca <_printf_float+0xb6>
 800bbaa:	9a06      	ldr	r2, [sp, #24]
 800bbac:	464b      	mov	r3, r9
 800bbae:	4442      	add	r2, r8
 800bbb0:	4631      	mov	r1, r6
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	47b8      	blx	r7
 800bbb6:	3001      	adds	r0, #1
 800bbb8:	d1c3      	bne.n	800bb42 <_printf_float+0x32e>
 800bbba:	e686      	b.n	800b8ca <_printf_float+0xb6>
 800bbbc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bbc0:	f1ba 0f01 	cmp.w	sl, #1
 800bbc4:	dc01      	bgt.n	800bbca <_printf_float+0x3b6>
 800bbc6:	07db      	lsls	r3, r3, #31
 800bbc8:	d536      	bpl.n	800bc38 <_printf_float+0x424>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	4642      	mov	r2, r8
 800bbce:	4631      	mov	r1, r6
 800bbd0:	4628      	mov	r0, r5
 800bbd2:	47b8      	blx	r7
 800bbd4:	3001      	adds	r0, #1
 800bbd6:	f43f ae78 	beq.w	800b8ca <_printf_float+0xb6>
 800bbda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbde:	4631      	mov	r1, r6
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	47b8      	blx	r7
 800bbe4:	3001      	adds	r0, #1
 800bbe6:	f43f ae70 	beq.w	800b8ca <_printf_float+0xb6>
 800bbea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bbee:	2200      	movs	r2, #0
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bbf6:	f7f4 ff67 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbfa:	b9c0      	cbnz	r0, 800bc2e <_printf_float+0x41a>
 800bbfc:	4653      	mov	r3, sl
 800bbfe:	f108 0201 	add.w	r2, r8, #1
 800bc02:	4631      	mov	r1, r6
 800bc04:	4628      	mov	r0, r5
 800bc06:	47b8      	blx	r7
 800bc08:	3001      	adds	r0, #1
 800bc0a:	d10c      	bne.n	800bc26 <_printf_float+0x412>
 800bc0c:	e65d      	b.n	800b8ca <_printf_float+0xb6>
 800bc0e:	2301      	movs	r3, #1
 800bc10:	465a      	mov	r2, fp
 800bc12:	4631      	mov	r1, r6
 800bc14:	4628      	mov	r0, r5
 800bc16:	47b8      	blx	r7
 800bc18:	3001      	adds	r0, #1
 800bc1a:	f43f ae56 	beq.w	800b8ca <_printf_float+0xb6>
 800bc1e:	f108 0801 	add.w	r8, r8, #1
 800bc22:	45d0      	cmp	r8, sl
 800bc24:	dbf3      	blt.n	800bc0e <_printf_float+0x3fa>
 800bc26:	464b      	mov	r3, r9
 800bc28:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bc2c:	e6df      	b.n	800b9ee <_printf_float+0x1da>
 800bc2e:	f04f 0800 	mov.w	r8, #0
 800bc32:	f104 0b1a 	add.w	fp, r4, #26
 800bc36:	e7f4      	b.n	800bc22 <_printf_float+0x40e>
 800bc38:	2301      	movs	r3, #1
 800bc3a:	4642      	mov	r2, r8
 800bc3c:	e7e1      	b.n	800bc02 <_printf_float+0x3ee>
 800bc3e:	2301      	movs	r3, #1
 800bc40:	464a      	mov	r2, r9
 800bc42:	4631      	mov	r1, r6
 800bc44:	4628      	mov	r0, r5
 800bc46:	47b8      	blx	r7
 800bc48:	3001      	adds	r0, #1
 800bc4a:	f43f ae3e 	beq.w	800b8ca <_printf_float+0xb6>
 800bc4e:	f108 0801 	add.w	r8, r8, #1
 800bc52:	68e3      	ldr	r3, [r4, #12]
 800bc54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc56:	1a5b      	subs	r3, r3, r1
 800bc58:	4543      	cmp	r3, r8
 800bc5a:	dcf0      	bgt.n	800bc3e <_printf_float+0x42a>
 800bc5c:	e6fc      	b.n	800ba58 <_printf_float+0x244>
 800bc5e:	f04f 0800 	mov.w	r8, #0
 800bc62:	f104 0919 	add.w	r9, r4, #25
 800bc66:	e7f4      	b.n	800bc52 <_printf_float+0x43e>

0800bc68 <_printf_common>:
 800bc68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc6c:	4616      	mov	r6, r2
 800bc6e:	4698      	mov	r8, r3
 800bc70:	688a      	ldr	r2, [r1, #8]
 800bc72:	690b      	ldr	r3, [r1, #16]
 800bc74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	bfb8      	it	lt
 800bc7c:	4613      	movlt	r3, r2
 800bc7e:	6033      	str	r3, [r6, #0]
 800bc80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bc84:	4607      	mov	r7, r0
 800bc86:	460c      	mov	r4, r1
 800bc88:	b10a      	cbz	r2, 800bc8e <_printf_common+0x26>
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	6033      	str	r3, [r6, #0]
 800bc8e:	6823      	ldr	r3, [r4, #0]
 800bc90:	0699      	lsls	r1, r3, #26
 800bc92:	bf42      	ittt	mi
 800bc94:	6833      	ldrmi	r3, [r6, #0]
 800bc96:	3302      	addmi	r3, #2
 800bc98:	6033      	strmi	r3, [r6, #0]
 800bc9a:	6825      	ldr	r5, [r4, #0]
 800bc9c:	f015 0506 	ands.w	r5, r5, #6
 800bca0:	d106      	bne.n	800bcb0 <_printf_common+0x48>
 800bca2:	f104 0a19 	add.w	sl, r4, #25
 800bca6:	68e3      	ldr	r3, [r4, #12]
 800bca8:	6832      	ldr	r2, [r6, #0]
 800bcaa:	1a9b      	subs	r3, r3, r2
 800bcac:	42ab      	cmp	r3, r5
 800bcae:	dc26      	bgt.n	800bcfe <_printf_common+0x96>
 800bcb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bcb4:	6822      	ldr	r2, [r4, #0]
 800bcb6:	3b00      	subs	r3, #0
 800bcb8:	bf18      	it	ne
 800bcba:	2301      	movne	r3, #1
 800bcbc:	0692      	lsls	r2, r2, #26
 800bcbe:	d42b      	bmi.n	800bd18 <_printf_common+0xb0>
 800bcc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bcc4:	4641      	mov	r1, r8
 800bcc6:	4638      	mov	r0, r7
 800bcc8:	47c8      	blx	r9
 800bcca:	3001      	adds	r0, #1
 800bccc:	d01e      	beq.n	800bd0c <_printf_common+0xa4>
 800bcce:	6823      	ldr	r3, [r4, #0]
 800bcd0:	6922      	ldr	r2, [r4, #16]
 800bcd2:	f003 0306 	and.w	r3, r3, #6
 800bcd6:	2b04      	cmp	r3, #4
 800bcd8:	bf02      	ittt	eq
 800bcda:	68e5      	ldreq	r5, [r4, #12]
 800bcdc:	6833      	ldreq	r3, [r6, #0]
 800bcde:	1aed      	subeq	r5, r5, r3
 800bce0:	68a3      	ldr	r3, [r4, #8]
 800bce2:	bf0c      	ite	eq
 800bce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bce8:	2500      	movne	r5, #0
 800bcea:	4293      	cmp	r3, r2
 800bcec:	bfc4      	itt	gt
 800bcee:	1a9b      	subgt	r3, r3, r2
 800bcf0:	18ed      	addgt	r5, r5, r3
 800bcf2:	2600      	movs	r6, #0
 800bcf4:	341a      	adds	r4, #26
 800bcf6:	42b5      	cmp	r5, r6
 800bcf8:	d11a      	bne.n	800bd30 <_printf_common+0xc8>
 800bcfa:	2000      	movs	r0, #0
 800bcfc:	e008      	b.n	800bd10 <_printf_common+0xa8>
 800bcfe:	2301      	movs	r3, #1
 800bd00:	4652      	mov	r2, sl
 800bd02:	4641      	mov	r1, r8
 800bd04:	4638      	mov	r0, r7
 800bd06:	47c8      	blx	r9
 800bd08:	3001      	adds	r0, #1
 800bd0a:	d103      	bne.n	800bd14 <_printf_common+0xac>
 800bd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd14:	3501      	adds	r5, #1
 800bd16:	e7c6      	b.n	800bca6 <_printf_common+0x3e>
 800bd18:	18e1      	adds	r1, r4, r3
 800bd1a:	1c5a      	adds	r2, r3, #1
 800bd1c:	2030      	movs	r0, #48	@ 0x30
 800bd1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bd22:	4422      	add	r2, r4
 800bd24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bd28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bd2c:	3302      	adds	r3, #2
 800bd2e:	e7c7      	b.n	800bcc0 <_printf_common+0x58>
 800bd30:	2301      	movs	r3, #1
 800bd32:	4622      	mov	r2, r4
 800bd34:	4641      	mov	r1, r8
 800bd36:	4638      	mov	r0, r7
 800bd38:	47c8      	blx	r9
 800bd3a:	3001      	adds	r0, #1
 800bd3c:	d0e6      	beq.n	800bd0c <_printf_common+0xa4>
 800bd3e:	3601      	adds	r6, #1
 800bd40:	e7d9      	b.n	800bcf6 <_printf_common+0x8e>
	...

0800bd44 <_printf_i>:
 800bd44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd48:	7e0f      	ldrb	r7, [r1, #24]
 800bd4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bd4c:	2f78      	cmp	r7, #120	@ 0x78
 800bd4e:	4691      	mov	r9, r2
 800bd50:	4680      	mov	r8, r0
 800bd52:	460c      	mov	r4, r1
 800bd54:	469a      	mov	sl, r3
 800bd56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bd5a:	d807      	bhi.n	800bd6c <_printf_i+0x28>
 800bd5c:	2f62      	cmp	r7, #98	@ 0x62
 800bd5e:	d80a      	bhi.n	800bd76 <_printf_i+0x32>
 800bd60:	2f00      	cmp	r7, #0
 800bd62:	f000 80d2 	beq.w	800bf0a <_printf_i+0x1c6>
 800bd66:	2f58      	cmp	r7, #88	@ 0x58
 800bd68:	f000 80b9 	beq.w	800bede <_printf_i+0x19a>
 800bd6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bd70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bd74:	e03a      	b.n	800bdec <_printf_i+0xa8>
 800bd76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bd7a:	2b15      	cmp	r3, #21
 800bd7c:	d8f6      	bhi.n	800bd6c <_printf_i+0x28>
 800bd7e:	a101      	add	r1, pc, #4	@ (adr r1, 800bd84 <_printf_i+0x40>)
 800bd80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd84:	0800bddd 	.word	0x0800bddd
 800bd88:	0800bdf1 	.word	0x0800bdf1
 800bd8c:	0800bd6d 	.word	0x0800bd6d
 800bd90:	0800bd6d 	.word	0x0800bd6d
 800bd94:	0800bd6d 	.word	0x0800bd6d
 800bd98:	0800bd6d 	.word	0x0800bd6d
 800bd9c:	0800bdf1 	.word	0x0800bdf1
 800bda0:	0800bd6d 	.word	0x0800bd6d
 800bda4:	0800bd6d 	.word	0x0800bd6d
 800bda8:	0800bd6d 	.word	0x0800bd6d
 800bdac:	0800bd6d 	.word	0x0800bd6d
 800bdb0:	0800bef1 	.word	0x0800bef1
 800bdb4:	0800be1b 	.word	0x0800be1b
 800bdb8:	0800beab 	.word	0x0800beab
 800bdbc:	0800bd6d 	.word	0x0800bd6d
 800bdc0:	0800bd6d 	.word	0x0800bd6d
 800bdc4:	0800bf13 	.word	0x0800bf13
 800bdc8:	0800bd6d 	.word	0x0800bd6d
 800bdcc:	0800be1b 	.word	0x0800be1b
 800bdd0:	0800bd6d 	.word	0x0800bd6d
 800bdd4:	0800bd6d 	.word	0x0800bd6d
 800bdd8:	0800beb3 	.word	0x0800beb3
 800bddc:	6833      	ldr	r3, [r6, #0]
 800bdde:	1d1a      	adds	r2, r3, #4
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	6032      	str	r2, [r6, #0]
 800bde4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bde8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bdec:	2301      	movs	r3, #1
 800bdee:	e09d      	b.n	800bf2c <_printf_i+0x1e8>
 800bdf0:	6833      	ldr	r3, [r6, #0]
 800bdf2:	6820      	ldr	r0, [r4, #0]
 800bdf4:	1d19      	adds	r1, r3, #4
 800bdf6:	6031      	str	r1, [r6, #0]
 800bdf8:	0606      	lsls	r6, r0, #24
 800bdfa:	d501      	bpl.n	800be00 <_printf_i+0xbc>
 800bdfc:	681d      	ldr	r5, [r3, #0]
 800bdfe:	e003      	b.n	800be08 <_printf_i+0xc4>
 800be00:	0645      	lsls	r5, r0, #25
 800be02:	d5fb      	bpl.n	800bdfc <_printf_i+0xb8>
 800be04:	f9b3 5000 	ldrsh.w	r5, [r3]
 800be08:	2d00      	cmp	r5, #0
 800be0a:	da03      	bge.n	800be14 <_printf_i+0xd0>
 800be0c:	232d      	movs	r3, #45	@ 0x2d
 800be0e:	426d      	negs	r5, r5
 800be10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be14:	4859      	ldr	r0, [pc, #356]	@ (800bf7c <_printf_i+0x238>)
 800be16:	230a      	movs	r3, #10
 800be18:	e011      	b.n	800be3e <_printf_i+0xfa>
 800be1a:	6821      	ldr	r1, [r4, #0]
 800be1c:	6833      	ldr	r3, [r6, #0]
 800be1e:	0608      	lsls	r0, r1, #24
 800be20:	f853 5b04 	ldr.w	r5, [r3], #4
 800be24:	d402      	bmi.n	800be2c <_printf_i+0xe8>
 800be26:	0649      	lsls	r1, r1, #25
 800be28:	bf48      	it	mi
 800be2a:	b2ad      	uxthmi	r5, r5
 800be2c:	2f6f      	cmp	r7, #111	@ 0x6f
 800be2e:	4853      	ldr	r0, [pc, #332]	@ (800bf7c <_printf_i+0x238>)
 800be30:	6033      	str	r3, [r6, #0]
 800be32:	bf14      	ite	ne
 800be34:	230a      	movne	r3, #10
 800be36:	2308      	moveq	r3, #8
 800be38:	2100      	movs	r1, #0
 800be3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800be3e:	6866      	ldr	r6, [r4, #4]
 800be40:	60a6      	str	r6, [r4, #8]
 800be42:	2e00      	cmp	r6, #0
 800be44:	bfa2      	ittt	ge
 800be46:	6821      	ldrge	r1, [r4, #0]
 800be48:	f021 0104 	bicge.w	r1, r1, #4
 800be4c:	6021      	strge	r1, [r4, #0]
 800be4e:	b90d      	cbnz	r5, 800be54 <_printf_i+0x110>
 800be50:	2e00      	cmp	r6, #0
 800be52:	d04b      	beq.n	800beec <_printf_i+0x1a8>
 800be54:	4616      	mov	r6, r2
 800be56:	fbb5 f1f3 	udiv	r1, r5, r3
 800be5a:	fb03 5711 	mls	r7, r3, r1, r5
 800be5e:	5dc7      	ldrb	r7, [r0, r7]
 800be60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800be64:	462f      	mov	r7, r5
 800be66:	42bb      	cmp	r3, r7
 800be68:	460d      	mov	r5, r1
 800be6a:	d9f4      	bls.n	800be56 <_printf_i+0x112>
 800be6c:	2b08      	cmp	r3, #8
 800be6e:	d10b      	bne.n	800be88 <_printf_i+0x144>
 800be70:	6823      	ldr	r3, [r4, #0]
 800be72:	07df      	lsls	r7, r3, #31
 800be74:	d508      	bpl.n	800be88 <_printf_i+0x144>
 800be76:	6923      	ldr	r3, [r4, #16]
 800be78:	6861      	ldr	r1, [r4, #4]
 800be7a:	4299      	cmp	r1, r3
 800be7c:	bfde      	ittt	le
 800be7e:	2330      	movle	r3, #48	@ 0x30
 800be80:	f806 3c01 	strble.w	r3, [r6, #-1]
 800be84:	f106 36ff 	addle.w	r6, r6, #4294967295
 800be88:	1b92      	subs	r2, r2, r6
 800be8a:	6122      	str	r2, [r4, #16]
 800be8c:	f8cd a000 	str.w	sl, [sp]
 800be90:	464b      	mov	r3, r9
 800be92:	aa03      	add	r2, sp, #12
 800be94:	4621      	mov	r1, r4
 800be96:	4640      	mov	r0, r8
 800be98:	f7ff fee6 	bl	800bc68 <_printf_common>
 800be9c:	3001      	adds	r0, #1
 800be9e:	d14a      	bne.n	800bf36 <_printf_i+0x1f2>
 800bea0:	f04f 30ff 	mov.w	r0, #4294967295
 800bea4:	b004      	add	sp, #16
 800bea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beaa:	6823      	ldr	r3, [r4, #0]
 800beac:	f043 0320 	orr.w	r3, r3, #32
 800beb0:	6023      	str	r3, [r4, #0]
 800beb2:	4833      	ldr	r0, [pc, #204]	@ (800bf80 <_printf_i+0x23c>)
 800beb4:	2778      	movs	r7, #120	@ 0x78
 800beb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800beba:	6823      	ldr	r3, [r4, #0]
 800bebc:	6831      	ldr	r1, [r6, #0]
 800bebe:	061f      	lsls	r7, r3, #24
 800bec0:	f851 5b04 	ldr.w	r5, [r1], #4
 800bec4:	d402      	bmi.n	800becc <_printf_i+0x188>
 800bec6:	065f      	lsls	r7, r3, #25
 800bec8:	bf48      	it	mi
 800beca:	b2ad      	uxthmi	r5, r5
 800becc:	6031      	str	r1, [r6, #0]
 800bece:	07d9      	lsls	r1, r3, #31
 800bed0:	bf44      	itt	mi
 800bed2:	f043 0320 	orrmi.w	r3, r3, #32
 800bed6:	6023      	strmi	r3, [r4, #0]
 800bed8:	b11d      	cbz	r5, 800bee2 <_printf_i+0x19e>
 800beda:	2310      	movs	r3, #16
 800bedc:	e7ac      	b.n	800be38 <_printf_i+0xf4>
 800bede:	4827      	ldr	r0, [pc, #156]	@ (800bf7c <_printf_i+0x238>)
 800bee0:	e7e9      	b.n	800beb6 <_printf_i+0x172>
 800bee2:	6823      	ldr	r3, [r4, #0]
 800bee4:	f023 0320 	bic.w	r3, r3, #32
 800bee8:	6023      	str	r3, [r4, #0]
 800beea:	e7f6      	b.n	800beda <_printf_i+0x196>
 800beec:	4616      	mov	r6, r2
 800beee:	e7bd      	b.n	800be6c <_printf_i+0x128>
 800bef0:	6833      	ldr	r3, [r6, #0]
 800bef2:	6825      	ldr	r5, [r4, #0]
 800bef4:	6961      	ldr	r1, [r4, #20]
 800bef6:	1d18      	adds	r0, r3, #4
 800bef8:	6030      	str	r0, [r6, #0]
 800befa:	062e      	lsls	r6, r5, #24
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	d501      	bpl.n	800bf04 <_printf_i+0x1c0>
 800bf00:	6019      	str	r1, [r3, #0]
 800bf02:	e002      	b.n	800bf0a <_printf_i+0x1c6>
 800bf04:	0668      	lsls	r0, r5, #25
 800bf06:	d5fb      	bpl.n	800bf00 <_printf_i+0x1bc>
 800bf08:	8019      	strh	r1, [r3, #0]
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	6123      	str	r3, [r4, #16]
 800bf0e:	4616      	mov	r6, r2
 800bf10:	e7bc      	b.n	800be8c <_printf_i+0x148>
 800bf12:	6833      	ldr	r3, [r6, #0]
 800bf14:	1d1a      	adds	r2, r3, #4
 800bf16:	6032      	str	r2, [r6, #0]
 800bf18:	681e      	ldr	r6, [r3, #0]
 800bf1a:	6862      	ldr	r2, [r4, #4]
 800bf1c:	2100      	movs	r1, #0
 800bf1e:	4630      	mov	r0, r6
 800bf20:	f7f4 f956 	bl	80001d0 <memchr>
 800bf24:	b108      	cbz	r0, 800bf2a <_printf_i+0x1e6>
 800bf26:	1b80      	subs	r0, r0, r6
 800bf28:	6060      	str	r0, [r4, #4]
 800bf2a:	6863      	ldr	r3, [r4, #4]
 800bf2c:	6123      	str	r3, [r4, #16]
 800bf2e:	2300      	movs	r3, #0
 800bf30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf34:	e7aa      	b.n	800be8c <_printf_i+0x148>
 800bf36:	6923      	ldr	r3, [r4, #16]
 800bf38:	4632      	mov	r2, r6
 800bf3a:	4649      	mov	r1, r9
 800bf3c:	4640      	mov	r0, r8
 800bf3e:	47d0      	blx	sl
 800bf40:	3001      	adds	r0, #1
 800bf42:	d0ad      	beq.n	800bea0 <_printf_i+0x15c>
 800bf44:	6823      	ldr	r3, [r4, #0]
 800bf46:	079b      	lsls	r3, r3, #30
 800bf48:	d413      	bmi.n	800bf72 <_printf_i+0x22e>
 800bf4a:	68e0      	ldr	r0, [r4, #12]
 800bf4c:	9b03      	ldr	r3, [sp, #12]
 800bf4e:	4298      	cmp	r0, r3
 800bf50:	bfb8      	it	lt
 800bf52:	4618      	movlt	r0, r3
 800bf54:	e7a6      	b.n	800bea4 <_printf_i+0x160>
 800bf56:	2301      	movs	r3, #1
 800bf58:	4632      	mov	r2, r6
 800bf5a:	4649      	mov	r1, r9
 800bf5c:	4640      	mov	r0, r8
 800bf5e:	47d0      	blx	sl
 800bf60:	3001      	adds	r0, #1
 800bf62:	d09d      	beq.n	800bea0 <_printf_i+0x15c>
 800bf64:	3501      	adds	r5, #1
 800bf66:	68e3      	ldr	r3, [r4, #12]
 800bf68:	9903      	ldr	r1, [sp, #12]
 800bf6a:	1a5b      	subs	r3, r3, r1
 800bf6c:	42ab      	cmp	r3, r5
 800bf6e:	dcf2      	bgt.n	800bf56 <_printf_i+0x212>
 800bf70:	e7eb      	b.n	800bf4a <_printf_i+0x206>
 800bf72:	2500      	movs	r5, #0
 800bf74:	f104 0619 	add.w	r6, r4, #25
 800bf78:	e7f5      	b.n	800bf66 <_printf_i+0x222>
 800bf7a:	bf00      	nop
 800bf7c:	0800f1ba 	.word	0x0800f1ba
 800bf80:	0800f1cb 	.word	0x0800f1cb

0800bf84 <std>:
 800bf84:	2300      	movs	r3, #0
 800bf86:	b510      	push	{r4, lr}
 800bf88:	4604      	mov	r4, r0
 800bf8a:	e9c0 3300 	strd	r3, r3, [r0]
 800bf8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf92:	6083      	str	r3, [r0, #8]
 800bf94:	8181      	strh	r1, [r0, #12]
 800bf96:	6643      	str	r3, [r0, #100]	@ 0x64
 800bf98:	81c2      	strh	r2, [r0, #14]
 800bf9a:	6183      	str	r3, [r0, #24]
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	2208      	movs	r2, #8
 800bfa0:	305c      	adds	r0, #92	@ 0x5c
 800bfa2:	f000 f914 	bl	800c1ce <memset>
 800bfa6:	4b0d      	ldr	r3, [pc, #52]	@ (800bfdc <std+0x58>)
 800bfa8:	6263      	str	r3, [r4, #36]	@ 0x24
 800bfaa:	4b0d      	ldr	r3, [pc, #52]	@ (800bfe0 <std+0x5c>)
 800bfac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bfae:	4b0d      	ldr	r3, [pc, #52]	@ (800bfe4 <std+0x60>)
 800bfb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bfb2:	4b0d      	ldr	r3, [pc, #52]	@ (800bfe8 <std+0x64>)
 800bfb4:	6323      	str	r3, [r4, #48]	@ 0x30
 800bfb6:	4b0d      	ldr	r3, [pc, #52]	@ (800bfec <std+0x68>)
 800bfb8:	6224      	str	r4, [r4, #32]
 800bfba:	429c      	cmp	r4, r3
 800bfbc:	d006      	beq.n	800bfcc <std+0x48>
 800bfbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bfc2:	4294      	cmp	r4, r2
 800bfc4:	d002      	beq.n	800bfcc <std+0x48>
 800bfc6:	33d0      	adds	r3, #208	@ 0xd0
 800bfc8:	429c      	cmp	r4, r3
 800bfca:	d105      	bne.n	800bfd8 <std+0x54>
 800bfcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bfd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfd4:	f000 b996 	b.w	800c304 <__retarget_lock_init_recursive>
 800bfd8:	bd10      	pop	{r4, pc}
 800bfda:	bf00      	nop
 800bfdc:	0800c149 	.word	0x0800c149
 800bfe0:	0800c16b 	.word	0x0800c16b
 800bfe4:	0800c1a3 	.word	0x0800c1a3
 800bfe8:	0800c1c7 	.word	0x0800c1c7
 800bfec:	20001790 	.word	0x20001790

0800bff0 <stdio_exit_handler>:
 800bff0:	4a02      	ldr	r2, [pc, #8]	@ (800bffc <stdio_exit_handler+0xc>)
 800bff2:	4903      	ldr	r1, [pc, #12]	@ (800c000 <stdio_exit_handler+0x10>)
 800bff4:	4803      	ldr	r0, [pc, #12]	@ (800c004 <stdio_exit_handler+0x14>)
 800bff6:	f000 b869 	b.w	800c0cc <_fwalk_sglue>
 800bffa:	bf00      	nop
 800bffc:	20000034 	.word	0x20000034
 800c000:	0800daf9 	.word	0x0800daf9
 800c004:	20000044 	.word	0x20000044

0800c008 <cleanup_stdio>:
 800c008:	6841      	ldr	r1, [r0, #4]
 800c00a:	4b0c      	ldr	r3, [pc, #48]	@ (800c03c <cleanup_stdio+0x34>)
 800c00c:	4299      	cmp	r1, r3
 800c00e:	b510      	push	{r4, lr}
 800c010:	4604      	mov	r4, r0
 800c012:	d001      	beq.n	800c018 <cleanup_stdio+0x10>
 800c014:	f001 fd70 	bl	800daf8 <_fflush_r>
 800c018:	68a1      	ldr	r1, [r4, #8]
 800c01a:	4b09      	ldr	r3, [pc, #36]	@ (800c040 <cleanup_stdio+0x38>)
 800c01c:	4299      	cmp	r1, r3
 800c01e:	d002      	beq.n	800c026 <cleanup_stdio+0x1e>
 800c020:	4620      	mov	r0, r4
 800c022:	f001 fd69 	bl	800daf8 <_fflush_r>
 800c026:	68e1      	ldr	r1, [r4, #12]
 800c028:	4b06      	ldr	r3, [pc, #24]	@ (800c044 <cleanup_stdio+0x3c>)
 800c02a:	4299      	cmp	r1, r3
 800c02c:	d004      	beq.n	800c038 <cleanup_stdio+0x30>
 800c02e:	4620      	mov	r0, r4
 800c030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c034:	f001 bd60 	b.w	800daf8 <_fflush_r>
 800c038:	bd10      	pop	{r4, pc}
 800c03a:	bf00      	nop
 800c03c:	20001790 	.word	0x20001790
 800c040:	200017f8 	.word	0x200017f8
 800c044:	20001860 	.word	0x20001860

0800c048 <global_stdio_init.part.0>:
 800c048:	b510      	push	{r4, lr}
 800c04a:	4b0b      	ldr	r3, [pc, #44]	@ (800c078 <global_stdio_init.part.0+0x30>)
 800c04c:	4c0b      	ldr	r4, [pc, #44]	@ (800c07c <global_stdio_init.part.0+0x34>)
 800c04e:	4a0c      	ldr	r2, [pc, #48]	@ (800c080 <global_stdio_init.part.0+0x38>)
 800c050:	601a      	str	r2, [r3, #0]
 800c052:	4620      	mov	r0, r4
 800c054:	2200      	movs	r2, #0
 800c056:	2104      	movs	r1, #4
 800c058:	f7ff ff94 	bl	800bf84 <std>
 800c05c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c060:	2201      	movs	r2, #1
 800c062:	2109      	movs	r1, #9
 800c064:	f7ff ff8e 	bl	800bf84 <std>
 800c068:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c06c:	2202      	movs	r2, #2
 800c06e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c072:	2112      	movs	r1, #18
 800c074:	f7ff bf86 	b.w	800bf84 <std>
 800c078:	200018c8 	.word	0x200018c8
 800c07c:	20001790 	.word	0x20001790
 800c080:	0800bff1 	.word	0x0800bff1

0800c084 <__sfp_lock_acquire>:
 800c084:	4801      	ldr	r0, [pc, #4]	@ (800c08c <__sfp_lock_acquire+0x8>)
 800c086:	f000 b93e 	b.w	800c306 <__retarget_lock_acquire_recursive>
 800c08a:	bf00      	nop
 800c08c:	200018d1 	.word	0x200018d1

0800c090 <__sfp_lock_release>:
 800c090:	4801      	ldr	r0, [pc, #4]	@ (800c098 <__sfp_lock_release+0x8>)
 800c092:	f000 b939 	b.w	800c308 <__retarget_lock_release_recursive>
 800c096:	bf00      	nop
 800c098:	200018d1 	.word	0x200018d1

0800c09c <__sinit>:
 800c09c:	b510      	push	{r4, lr}
 800c09e:	4604      	mov	r4, r0
 800c0a0:	f7ff fff0 	bl	800c084 <__sfp_lock_acquire>
 800c0a4:	6a23      	ldr	r3, [r4, #32]
 800c0a6:	b11b      	cbz	r3, 800c0b0 <__sinit+0x14>
 800c0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0ac:	f7ff bff0 	b.w	800c090 <__sfp_lock_release>
 800c0b0:	4b04      	ldr	r3, [pc, #16]	@ (800c0c4 <__sinit+0x28>)
 800c0b2:	6223      	str	r3, [r4, #32]
 800c0b4:	4b04      	ldr	r3, [pc, #16]	@ (800c0c8 <__sinit+0x2c>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d1f5      	bne.n	800c0a8 <__sinit+0xc>
 800c0bc:	f7ff ffc4 	bl	800c048 <global_stdio_init.part.0>
 800c0c0:	e7f2      	b.n	800c0a8 <__sinit+0xc>
 800c0c2:	bf00      	nop
 800c0c4:	0800c009 	.word	0x0800c009
 800c0c8:	200018c8 	.word	0x200018c8

0800c0cc <_fwalk_sglue>:
 800c0cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0d0:	4607      	mov	r7, r0
 800c0d2:	4688      	mov	r8, r1
 800c0d4:	4614      	mov	r4, r2
 800c0d6:	2600      	movs	r6, #0
 800c0d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0dc:	f1b9 0901 	subs.w	r9, r9, #1
 800c0e0:	d505      	bpl.n	800c0ee <_fwalk_sglue+0x22>
 800c0e2:	6824      	ldr	r4, [r4, #0]
 800c0e4:	2c00      	cmp	r4, #0
 800c0e6:	d1f7      	bne.n	800c0d8 <_fwalk_sglue+0xc>
 800c0e8:	4630      	mov	r0, r6
 800c0ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ee:	89ab      	ldrh	r3, [r5, #12]
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d907      	bls.n	800c104 <_fwalk_sglue+0x38>
 800c0f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	d003      	beq.n	800c104 <_fwalk_sglue+0x38>
 800c0fc:	4629      	mov	r1, r5
 800c0fe:	4638      	mov	r0, r7
 800c100:	47c0      	blx	r8
 800c102:	4306      	orrs	r6, r0
 800c104:	3568      	adds	r5, #104	@ 0x68
 800c106:	e7e9      	b.n	800c0dc <_fwalk_sglue+0x10>

0800c108 <siprintf>:
 800c108:	b40e      	push	{r1, r2, r3}
 800c10a:	b500      	push	{lr}
 800c10c:	b09c      	sub	sp, #112	@ 0x70
 800c10e:	ab1d      	add	r3, sp, #116	@ 0x74
 800c110:	9002      	str	r0, [sp, #8]
 800c112:	9006      	str	r0, [sp, #24]
 800c114:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c118:	4809      	ldr	r0, [pc, #36]	@ (800c140 <siprintf+0x38>)
 800c11a:	9107      	str	r1, [sp, #28]
 800c11c:	9104      	str	r1, [sp, #16]
 800c11e:	4909      	ldr	r1, [pc, #36]	@ (800c144 <siprintf+0x3c>)
 800c120:	f853 2b04 	ldr.w	r2, [r3], #4
 800c124:	9105      	str	r1, [sp, #20]
 800c126:	6800      	ldr	r0, [r0, #0]
 800c128:	9301      	str	r3, [sp, #4]
 800c12a:	a902      	add	r1, sp, #8
 800c12c:	f001 fb64 	bl	800d7f8 <_svfiprintf_r>
 800c130:	9b02      	ldr	r3, [sp, #8]
 800c132:	2200      	movs	r2, #0
 800c134:	701a      	strb	r2, [r3, #0]
 800c136:	b01c      	add	sp, #112	@ 0x70
 800c138:	f85d eb04 	ldr.w	lr, [sp], #4
 800c13c:	b003      	add	sp, #12
 800c13e:	4770      	bx	lr
 800c140:	20000040 	.word	0x20000040
 800c144:	ffff0208 	.word	0xffff0208

0800c148 <__sread>:
 800c148:	b510      	push	{r4, lr}
 800c14a:	460c      	mov	r4, r1
 800c14c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c150:	f000 f87a 	bl	800c248 <_read_r>
 800c154:	2800      	cmp	r0, #0
 800c156:	bfab      	itete	ge
 800c158:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c15a:	89a3      	ldrhlt	r3, [r4, #12]
 800c15c:	181b      	addge	r3, r3, r0
 800c15e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c162:	bfac      	ite	ge
 800c164:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c166:	81a3      	strhlt	r3, [r4, #12]
 800c168:	bd10      	pop	{r4, pc}

0800c16a <__swrite>:
 800c16a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c16e:	461f      	mov	r7, r3
 800c170:	898b      	ldrh	r3, [r1, #12]
 800c172:	05db      	lsls	r3, r3, #23
 800c174:	4605      	mov	r5, r0
 800c176:	460c      	mov	r4, r1
 800c178:	4616      	mov	r6, r2
 800c17a:	d505      	bpl.n	800c188 <__swrite+0x1e>
 800c17c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c180:	2302      	movs	r3, #2
 800c182:	2200      	movs	r2, #0
 800c184:	f000 f84e 	bl	800c224 <_lseek_r>
 800c188:	89a3      	ldrh	r3, [r4, #12]
 800c18a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c18e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c192:	81a3      	strh	r3, [r4, #12]
 800c194:	4632      	mov	r2, r6
 800c196:	463b      	mov	r3, r7
 800c198:	4628      	mov	r0, r5
 800c19a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c19e:	f000 b875 	b.w	800c28c <_write_r>

0800c1a2 <__sseek>:
 800c1a2:	b510      	push	{r4, lr}
 800c1a4:	460c      	mov	r4, r1
 800c1a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1aa:	f000 f83b 	bl	800c224 <_lseek_r>
 800c1ae:	1c43      	adds	r3, r0, #1
 800c1b0:	89a3      	ldrh	r3, [r4, #12]
 800c1b2:	bf15      	itete	ne
 800c1b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c1b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c1ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c1be:	81a3      	strheq	r3, [r4, #12]
 800c1c0:	bf18      	it	ne
 800c1c2:	81a3      	strhne	r3, [r4, #12]
 800c1c4:	bd10      	pop	{r4, pc}

0800c1c6 <__sclose>:
 800c1c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1ca:	f000 b81b 	b.w	800c204 <_close_r>

0800c1ce <memset>:
 800c1ce:	4402      	add	r2, r0
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d100      	bne.n	800c1d8 <memset+0xa>
 800c1d6:	4770      	bx	lr
 800c1d8:	f803 1b01 	strb.w	r1, [r3], #1
 800c1dc:	e7f9      	b.n	800c1d2 <memset+0x4>

0800c1de <strcat>:
 800c1de:	b510      	push	{r4, lr}
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	7814      	ldrb	r4, [r2, #0]
 800c1e4:	4613      	mov	r3, r2
 800c1e6:	3201      	adds	r2, #1
 800c1e8:	2c00      	cmp	r4, #0
 800c1ea:	d1fa      	bne.n	800c1e2 <strcat+0x4>
 800c1ec:	3b01      	subs	r3, #1
 800c1ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1f6:	2a00      	cmp	r2, #0
 800c1f8:	d1f9      	bne.n	800c1ee <strcat+0x10>
 800c1fa:	bd10      	pop	{r4, pc}

0800c1fc <_localeconv_r>:
 800c1fc:	4800      	ldr	r0, [pc, #0]	@ (800c200 <_localeconv_r+0x4>)
 800c1fe:	4770      	bx	lr
 800c200:	20000180 	.word	0x20000180

0800c204 <_close_r>:
 800c204:	b538      	push	{r3, r4, r5, lr}
 800c206:	4d06      	ldr	r5, [pc, #24]	@ (800c220 <_close_r+0x1c>)
 800c208:	2300      	movs	r3, #0
 800c20a:	4604      	mov	r4, r0
 800c20c:	4608      	mov	r0, r1
 800c20e:	602b      	str	r3, [r5, #0]
 800c210:	f7f5 feb2 	bl	8001f78 <_close>
 800c214:	1c43      	adds	r3, r0, #1
 800c216:	d102      	bne.n	800c21e <_close_r+0x1a>
 800c218:	682b      	ldr	r3, [r5, #0]
 800c21a:	b103      	cbz	r3, 800c21e <_close_r+0x1a>
 800c21c:	6023      	str	r3, [r4, #0]
 800c21e:	bd38      	pop	{r3, r4, r5, pc}
 800c220:	200018cc 	.word	0x200018cc

0800c224 <_lseek_r>:
 800c224:	b538      	push	{r3, r4, r5, lr}
 800c226:	4d07      	ldr	r5, [pc, #28]	@ (800c244 <_lseek_r+0x20>)
 800c228:	4604      	mov	r4, r0
 800c22a:	4608      	mov	r0, r1
 800c22c:	4611      	mov	r1, r2
 800c22e:	2200      	movs	r2, #0
 800c230:	602a      	str	r2, [r5, #0]
 800c232:	461a      	mov	r2, r3
 800c234:	f7f5 fec7 	bl	8001fc6 <_lseek>
 800c238:	1c43      	adds	r3, r0, #1
 800c23a:	d102      	bne.n	800c242 <_lseek_r+0x1e>
 800c23c:	682b      	ldr	r3, [r5, #0]
 800c23e:	b103      	cbz	r3, 800c242 <_lseek_r+0x1e>
 800c240:	6023      	str	r3, [r4, #0]
 800c242:	bd38      	pop	{r3, r4, r5, pc}
 800c244:	200018cc 	.word	0x200018cc

0800c248 <_read_r>:
 800c248:	b538      	push	{r3, r4, r5, lr}
 800c24a:	4d07      	ldr	r5, [pc, #28]	@ (800c268 <_read_r+0x20>)
 800c24c:	4604      	mov	r4, r0
 800c24e:	4608      	mov	r0, r1
 800c250:	4611      	mov	r1, r2
 800c252:	2200      	movs	r2, #0
 800c254:	602a      	str	r2, [r5, #0]
 800c256:	461a      	mov	r2, r3
 800c258:	f7f5 fe55 	bl	8001f06 <_read>
 800c25c:	1c43      	adds	r3, r0, #1
 800c25e:	d102      	bne.n	800c266 <_read_r+0x1e>
 800c260:	682b      	ldr	r3, [r5, #0]
 800c262:	b103      	cbz	r3, 800c266 <_read_r+0x1e>
 800c264:	6023      	str	r3, [r4, #0]
 800c266:	bd38      	pop	{r3, r4, r5, pc}
 800c268:	200018cc 	.word	0x200018cc

0800c26c <_sbrk_r>:
 800c26c:	b538      	push	{r3, r4, r5, lr}
 800c26e:	4d06      	ldr	r5, [pc, #24]	@ (800c288 <_sbrk_r+0x1c>)
 800c270:	2300      	movs	r3, #0
 800c272:	4604      	mov	r4, r0
 800c274:	4608      	mov	r0, r1
 800c276:	602b      	str	r3, [r5, #0]
 800c278:	f7f5 feb2 	bl	8001fe0 <_sbrk>
 800c27c:	1c43      	adds	r3, r0, #1
 800c27e:	d102      	bne.n	800c286 <_sbrk_r+0x1a>
 800c280:	682b      	ldr	r3, [r5, #0]
 800c282:	b103      	cbz	r3, 800c286 <_sbrk_r+0x1a>
 800c284:	6023      	str	r3, [r4, #0]
 800c286:	bd38      	pop	{r3, r4, r5, pc}
 800c288:	200018cc 	.word	0x200018cc

0800c28c <_write_r>:
 800c28c:	b538      	push	{r3, r4, r5, lr}
 800c28e:	4d07      	ldr	r5, [pc, #28]	@ (800c2ac <_write_r+0x20>)
 800c290:	4604      	mov	r4, r0
 800c292:	4608      	mov	r0, r1
 800c294:	4611      	mov	r1, r2
 800c296:	2200      	movs	r2, #0
 800c298:	602a      	str	r2, [r5, #0]
 800c29a:	461a      	mov	r2, r3
 800c29c:	f7f5 fe50 	bl	8001f40 <_write>
 800c2a0:	1c43      	adds	r3, r0, #1
 800c2a2:	d102      	bne.n	800c2aa <_write_r+0x1e>
 800c2a4:	682b      	ldr	r3, [r5, #0]
 800c2a6:	b103      	cbz	r3, 800c2aa <_write_r+0x1e>
 800c2a8:	6023      	str	r3, [r4, #0]
 800c2aa:	bd38      	pop	{r3, r4, r5, pc}
 800c2ac:	200018cc 	.word	0x200018cc

0800c2b0 <__errno>:
 800c2b0:	4b01      	ldr	r3, [pc, #4]	@ (800c2b8 <__errno+0x8>)
 800c2b2:	6818      	ldr	r0, [r3, #0]
 800c2b4:	4770      	bx	lr
 800c2b6:	bf00      	nop
 800c2b8:	20000040 	.word	0x20000040

0800c2bc <__libc_init_array>:
 800c2bc:	b570      	push	{r4, r5, r6, lr}
 800c2be:	4d0d      	ldr	r5, [pc, #52]	@ (800c2f4 <__libc_init_array+0x38>)
 800c2c0:	4c0d      	ldr	r4, [pc, #52]	@ (800c2f8 <__libc_init_array+0x3c>)
 800c2c2:	1b64      	subs	r4, r4, r5
 800c2c4:	10a4      	asrs	r4, r4, #2
 800c2c6:	2600      	movs	r6, #0
 800c2c8:	42a6      	cmp	r6, r4
 800c2ca:	d109      	bne.n	800c2e0 <__libc_init_array+0x24>
 800c2cc:	4d0b      	ldr	r5, [pc, #44]	@ (800c2fc <__libc_init_array+0x40>)
 800c2ce:	4c0c      	ldr	r4, [pc, #48]	@ (800c300 <__libc_init_array+0x44>)
 800c2d0:	f002 ff00 	bl	800f0d4 <_init>
 800c2d4:	1b64      	subs	r4, r4, r5
 800c2d6:	10a4      	asrs	r4, r4, #2
 800c2d8:	2600      	movs	r6, #0
 800c2da:	42a6      	cmp	r6, r4
 800c2dc:	d105      	bne.n	800c2ea <__libc_init_array+0x2e>
 800c2de:	bd70      	pop	{r4, r5, r6, pc}
 800c2e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2e4:	4798      	blx	r3
 800c2e6:	3601      	adds	r6, #1
 800c2e8:	e7ee      	b.n	800c2c8 <__libc_init_array+0xc>
 800c2ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2ee:	4798      	blx	r3
 800c2f0:	3601      	adds	r6, #1
 800c2f2:	e7f2      	b.n	800c2da <__libc_init_array+0x1e>
 800c2f4:	0800f550 	.word	0x0800f550
 800c2f8:	0800f550 	.word	0x0800f550
 800c2fc:	0800f550 	.word	0x0800f550
 800c300:	0800f554 	.word	0x0800f554

0800c304 <__retarget_lock_init_recursive>:
 800c304:	4770      	bx	lr

0800c306 <__retarget_lock_acquire_recursive>:
 800c306:	4770      	bx	lr

0800c308 <__retarget_lock_release_recursive>:
 800c308:	4770      	bx	lr

0800c30a <quorem>:
 800c30a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c30e:	6903      	ldr	r3, [r0, #16]
 800c310:	690c      	ldr	r4, [r1, #16]
 800c312:	42a3      	cmp	r3, r4
 800c314:	4607      	mov	r7, r0
 800c316:	db7e      	blt.n	800c416 <quorem+0x10c>
 800c318:	3c01      	subs	r4, #1
 800c31a:	f101 0814 	add.w	r8, r1, #20
 800c31e:	00a3      	lsls	r3, r4, #2
 800c320:	f100 0514 	add.w	r5, r0, #20
 800c324:	9300      	str	r3, [sp, #0]
 800c326:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c32a:	9301      	str	r3, [sp, #4]
 800c32c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c330:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c334:	3301      	adds	r3, #1
 800c336:	429a      	cmp	r2, r3
 800c338:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c33c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c340:	d32e      	bcc.n	800c3a0 <quorem+0x96>
 800c342:	f04f 0a00 	mov.w	sl, #0
 800c346:	46c4      	mov	ip, r8
 800c348:	46ae      	mov	lr, r5
 800c34a:	46d3      	mov	fp, sl
 800c34c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c350:	b298      	uxth	r0, r3
 800c352:	fb06 a000 	mla	r0, r6, r0, sl
 800c356:	0c02      	lsrs	r2, r0, #16
 800c358:	0c1b      	lsrs	r3, r3, #16
 800c35a:	fb06 2303 	mla	r3, r6, r3, r2
 800c35e:	f8de 2000 	ldr.w	r2, [lr]
 800c362:	b280      	uxth	r0, r0
 800c364:	b292      	uxth	r2, r2
 800c366:	1a12      	subs	r2, r2, r0
 800c368:	445a      	add	r2, fp
 800c36a:	f8de 0000 	ldr.w	r0, [lr]
 800c36e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c372:	b29b      	uxth	r3, r3
 800c374:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c378:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c37c:	b292      	uxth	r2, r2
 800c37e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c382:	45e1      	cmp	r9, ip
 800c384:	f84e 2b04 	str.w	r2, [lr], #4
 800c388:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c38c:	d2de      	bcs.n	800c34c <quorem+0x42>
 800c38e:	9b00      	ldr	r3, [sp, #0]
 800c390:	58eb      	ldr	r3, [r5, r3]
 800c392:	b92b      	cbnz	r3, 800c3a0 <quorem+0x96>
 800c394:	9b01      	ldr	r3, [sp, #4]
 800c396:	3b04      	subs	r3, #4
 800c398:	429d      	cmp	r5, r3
 800c39a:	461a      	mov	r2, r3
 800c39c:	d32f      	bcc.n	800c3fe <quorem+0xf4>
 800c39e:	613c      	str	r4, [r7, #16]
 800c3a0:	4638      	mov	r0, r7
 800c3a2:	f001 f8c5 	bl	800d530 <__mcmp>
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	db25      	blt.n	800c3f6 <quorem+0xec>
 800c3aa:	4629      	mov	r1, r5
 800c3ac:	2000      	movs	r0, #0
 800c3ae:	f858 2b04 	ldr.w	r2, [r8], #4
 800c3b2:	f8d1 c000 	ldr.w	ip, [r1]
 800c3b6:	fa1f fe82 	uxth.w	lr, r2
 800c3ba:	fa1f f38c 	uxth.w	r3, ip
 800c3be:	eba3 030e 	sub.w	r3, r3, lr
 800c3c2:	4403      	add	r3, r0
 800c3c4:	0c12      	lsrs	r2, r2, #16
 800c3c6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c3ca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3d4:	45c1      	cmp	r9, r8
 800c3d6:	f841 3b04 	str.w	r3, [r1], #4
 800c3da:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c3de:	d2e6      	bcs.n	800c3ae <quorem+0xa4>
 800c3e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c3e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3e8:	b922      	cbnz	r2, 800c3f4 <quorem+0xea>
 800c3ea:	3b04      	subs	r3, #4
 800c3ec:	429d      	cmp	r5, r3
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	d30b      	bcc.n	800c40a <quorem+0x100>
 800c3f2:	613c      	str	r4, [r7, #16]
 800c3f4:	3601      	adds	r6, #1
 800c3f6:	4630      	mov	r0, r6
 800c3f8:	b003      	add	sp, #12
 800c3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3fe:	6812      	ldr	r2, [r2, #0]
 800c400:	3b04      	subs	r3, #4
 800c402:	2a00      	cmp	r2, #0
 800c404:	d1cb      	bne.n	800c39e <quorem+0x94>
 800c406:	3c01      	subs	r4, #1
 800c408:	e7c6      	b.n	800c398 <quorem+0x8e>
 800c40a:	6812      	ldr	r2, [r2, #0]
 800c40c:	3b04      	subs	r3, #4
 800c40e:	2a00      	cmp	r2, #0
 800c410:	d1ef      	bne.n	800c3f2 <quorem+0xe8>
 800c412:	3c01      	subs	r4, #1
 800c414:	e7ea      	b.n	800c3ec <quorem+0xe2>
 800c416:	2000      	movs	r0, #0
 800c418:	e7ee      	b.n	800c3f8 <quorem+0xee>
 800c41a:	0000      	movs	r0, r0
 800c41c:	0000      	movs	r0, r0
	...

0800c420 <_dtoa_r>:
 800c420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c424:	69c7      	ldr	r7, [r0, #28]
 800c426:	b099      	sub	sp, #100	@ 0x64
 800c428:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c42c:	ec55 4b10 	vmov	r4, r5, d0
 800c430:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c432:	9109      	str	r1, [sp, #36]	@ 0x24
 800c434:	4683      	mov	fp, r0
 800c436:	920e      	str	r2, [sp, #56]	@ 0x38
 800c438:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c43a:	b97f      	cbnz	r7, 800c45c <_dtoa_r+0x3c>
 800c43c:	2010      	movs	r0, #16
 800c43e:	f7ff f88b 	bl	800b558 <malloc>
 800c442:	4602      	mov	r2, r0
 800c444:	f8cb 001c 	str.w	r0, [fp, #28]
 800c448:	b920      	cbnz	r0, 800c454 <_dtoa_r+0x34>
 800c44a:	4ba7      	ldr	r3, [pc, #668]	@ (800c6e8 <_dtoa_r+0x2c8>)
 800c44c:	21ef      	movs	r1, #239	@ 0xef
 800c44e:	48a7      	ldr	r0, [pc, #668]	@ (800c6ec <_dtoa_r+0x2cc>)
 800c450:	f001 fba2 	bl	800db98 <__assert_func>
 800c454:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c458:	6007      	str	r7, [r0, #0]
 800c45a:	60c7      	str	r7, [r0, #12]
 800c45c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c460:	6819      	ldr	r1, [r3, #0]
 800c462:	b159      	cbz	r1, 800c47c <_dtoa_r+0x5c>
 800c464:	685a      	ldr	r2, [r3, #4]
 800c466:	604a      	str	r2, [r1, #4]
 800c468:	2301      	movs	r3, #1
 800c46a:	4093      	lsls	r3, r2
 800c46c:	608b      	str	r3, [r1, #8]
 800c46e:	4658      	mov	r0, fp
 800c470:	f000 fe24 	bl	800d0bc <_Bfree>
 800c474:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c478:	2200      	movs	r2, #0
 800c47a:	601a      	str	r2, [r3, #0]
 800c47c:	1e2b      	subs	r3, r5, #0
 800c47e:	bfb9      	ittee	lt
 800c480:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c484:	9303      	strlt	r3, [sp, #12]
 800c486:	2300      	movge	r3, #0
 800c488:	6033      	strge	r3, [r6, #0]
 800c48a:	9f03      	ldr	r7, [sp, #12]
 800c48c:	4b98      	ldr	r3, [pc, #608]	@ (800c6f0 <_dtoa_r+0x2d0>)
 800c48e:	bfbc      	itt	lt
 800c490:	2201      	movlt	r2, #1
 800c492:	6032      	strlt	r2, [r6, #0]
 800c494:	43bb      	bics	r3, r7
 800c496:	d112      	bne.n	800c4be <_dtoa_r+0x9e>
 800c498:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c49a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c49e:	6013      	str	r3, [r2, #0]
 800c4a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c4a4:	4323      	orrs	r3, r4
 800c4a6:	f000 854d 	beq.w	800cf44 <_dtoa_r+0xb24>
 800c4aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c4ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c704 <_dtoa_r+0x2e4>
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f000 854f 	beq.w	800cf54 <_dtoa_r+0xb34>
 800c4b6:	f10a 0303 	add.w	r3, sl, #3
 800c4ba:	f000 bd49 	b.w	800cf50 <_dtoa_r+0xb30>
 800c4be:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	ec51 0b17 	vmov	r0, r1, d7
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c4ce:	f7f4 fafb 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4d2:	4680      	mov	r8, r0
 800c4d4:	b158      	cbz	r0, 800c4ee <_dtoa_r+0xce>
 800c4d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c4d8:	2301      	movs	r3, #1
 800c4da:	6013      	str	r3, [r2, #0]
 800c4dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c4de:	b113      	cbz	r3, 800c4e6 <_dtoa_r+0xc6>
 800c4e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c4e2:	4b84      	ldr	r3, [pc, #528]	@ (800c6f4 <_dtoa_r+0x2d4>)
 800c4e4:	6013      	str	r3, [r2, #0]
 800c4e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c708 <_dtoa_r+0x2e8>
 800c4ea:	f000 bd33 	b.w	800cf54 <_dtoa_r+0xb34>
 800c4ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c4f2:	aa16      	add	r2, sp, #88	@ 0x58
 800c4f4:	a917      	add	r1, sp, #92	@ 0x5c
 800c4f6:	4658      	mov	r0, fp
 800c4f8:	f001 f8ca 	bl	800d690 <__d2b>
 800c4fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c500:	4681      	mov	r9, r0
 800c502:	2e00      	cmp	r6, #0
 800c504:	d077      	beq.n	800c5f6 <_dtoa_r+0x1d6>
 800c506:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c508:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c50c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c510:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c514:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c518:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c51c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c520:	4619      	mov	r1, r3
 800c522:	2200      	movs	r2, #0
 800c524:	4b74      	ldr	r3, [pc, #464]	@ (800c6f8 <_dtoa_r+0x2d8>)
 800c526:	f7f3 feaf 	bl	8000288 <__aeabi_dsub>
 800c52a:	a369      	add	r3, pc, #420	@ (adr r3, 800c6d0 <_dtoa_r+0x2b0>)
 800c52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c530:	f7f4 f862 	bl	80005f8 <__aeabi_dmul>
 800c534:	a368      	add	r3, pc, #416	@ (adr r3, 800c6d8 <_dtoa_r+0x2b8>)
 800c536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53a:	f7f3 fea7 	bl	800028c <__adddf3>
 800c53e:	4604      	mov	r4, r0
 800c540:	4630      	mov	r0, r6
 800c542:	460d      	mov	r5, r1
 800c544:	f7f3 ffee 	bl	8000524 <__aeabi_i2d>
 800c548:	a365      	add	r3, pc, #404	@ (adr r3, 800c6e0 <_dtoa_r+0x2c0>)
 800c54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54e:	f7f4 f853 	bl	80005f8 <__aeabi_dmul>
 800c552:	4602      	mov	r2, r0
 800c554:	460b      	mov	r3, r1
 800c556:	4620      	mov	r0, r4
 800c558:	4629      	mov	r1, r5
 800c55a:	f7f3 fe97 	bl	800028c <__adddf3>
 800c55e:	4604      	mov	r4, r0
 800c560:	460d      	mov	r5, r1
 800c562:	f7f4 faf9 	bl	8000b58 <__aeabi_d2iz>
 800c566:	2200      	movs	r2, #0
 800c568:	4607      	mov	r7, r0
 800c56a:	2300      	movs	r3, #0
 800c56c:	4620      	mov	r0, r4
 800c56e:	4629      	mov	r1, r5
 800c570:	f7f4 fab4 	bl	8000adc <__aeabi_dcmplt>
 800c574:	b140      	cbz	r0, 800c588 <_dtoa_r+0x168>
 800c576:	4638      	mov	r0, r7
 800c578:	f7f3 ffd4 	bl	8000524 <__aeabi_i2d>
 800c57c:	4622      	mov	r2, r4
 800c57e:	462b      	mov	r3, r5
 800c580:	f7f4 faa2 	bl	8000ac8 <__aeabi_dcmpeq>
 800c584:	b900      	cbnz	r0, 800c588 <_dtoa_r+0x168>
 800c586:	3f01      	subs	r7, #1
 800c588:	2f16      	cmp	r7, #22
 800c58a:	d851      	bhi.n	800c630 <_dtoa_r+0x210>
 800c58c:	4b5b      	ldr	r3, [pc, #364]	@ (800c6fc <_dtoa_r+0x2dc>)
 800c58e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c596:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c59a:	f7f4 fa9f 	bl	8000adc <__aeabi_dcmplt>
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	d048      	beq.n	800c634 <_dtoa_r+0x214>
 800c5a2:	3f01      	subs	r7, #1
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	9312      	str	r3, [sp, #72]	@ 0x48
 800c5a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c5aa:	1b9b      	subs	r3, r3, r6
 800c5ac:	1e5a      	subs	r2, r3, #1
 800c5ae:	bf44      	itt	mi
 800c5b0:	f1c3 0801 	rsbmi	r8, r3, #1
 800c5b4:	2300      	movmi	r3, #0
 800c5b6:	9208      	str	r2, [sp, #32]
 800c5b8:	bf54      	ite	pl
 800c5ba:	f04f 0800 	movpl.w	r8, #0
 800c5be:	9308      	strmi	r3, [sp, #32]
 800c5c0:	2f00      	cmp	r7, #0
 800c5c2:	db39      	blt.n	800c638 <_dtoa_r+0x218>
 800c5c4:	9b08      	ldr	r3, [sp, #32]
 800c5c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c5c8:	443b      	add	r3, r7
 800c5ca:	9308      	str	r3, [sp, #32]
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5d2:	2b09      	cmp	r3, #9
 800c5d4:	d864      	bhi.n	800c6a0 <_dtoa_r+0x280>
 800c5d6:	2b05      	cmp	r3, #5
 800c5d8:	bfc4      	itt	gt
 800c5da:	3b04      	subgt	r3, #4
 800c5dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c5de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5e0:	f1a3 0302 	sub.w	r3, r3, #2
 800c5e4:	bfcc      	ite	gt
 800c5e6:	2400      	movgt	r4, #0
 800c5e8:	2401      	movle	r4, #1
 800c5ea:	2b03      	cmp	r3, #3
 800c5ec:	d863      	bhi.n	800c6b6 <_dtoa_r+0x296>
 800c5ee:	e8df f003 	tbb	[pc, r3]
 800c5f2:	372a      	.short	0x372a
 800c5f4:	5535      	.short	0x5535
 800c5f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c5fa:	441e      	add	r6, r3
 800c5fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c600:	2b20      	cmp	r3, #32
 800c602:	bfc1      	itttt	gt
 800c604:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c608:	409f      	lslgt	r7, r3
 800c60a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c60e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c612:	bfd6      	itet	le
 800c614:	f1c3 0320 	rsble	r3, r3, #32
 800c618:	ea47 0003 	orrgt.w	r0, r7, r3
 800c61c:	fa04 f003 	lslle.w	r0, r4, r3
 800c620:	f7f3 ff70 	bl	8000504 <__aeabi_ui2d>
 800c624:	2201      	movs	r2, #1
 800c626:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c62a:	3e01      	subs	r6, #1
 800c62c:	9214      	str	r2, [sp, #80]	@ 0x50
 800c62e:	e777      	b.n	800c520 <_dtoa_r+0x100>
 800c630:	2301      	movs	r3, #1
 800c632:	e7b8      	b.n	800c5a6 <_dtoa_r+0x186>
 800c634:	9012      	str	r0, [sp, #72]	@ 0x48
 800c636:	e7b7      	b.n	800c5a8 <_dtoa_r+0x188>
 800c638:	427b      	negs	r3, r7
 800c63a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c63c:	2300      	movs	r3, #0
 800c63e:	eba8 0807 	sub.w	r8, r8, r7
 800c642:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c644:	e7c4      	b.n	800c5d0 <_dtoa_r+0x1b0>
 800c646:	2300      	movs	r3, #0
 800c648:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c64a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	dc35      	bgt.n	800c6bc <_dtoa_r+0x29c>
 800c650:	2301      	movs	r3, #1
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	9307      	str	r3, [sp, #28]
 800c656:	461a      	mov	r2, r3
 800c658:	920e      	str	r2, [sp, #56]	@ 0x38
 800c65a:	e00b      	b.n	800c674 <_dtoa_r+0x254>
 800c65c:	2301      	movs	r3, #1
 800c65e:	e7f3      	b.n	800c648 <_dtoa_r+0x228>
 800c660:	2300      	movs	r3, #0
 800c662:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c664:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c666:	18fb      	adds	r3, r7, r3
 800c668:	9300      	str	r3, [sp, #0]
 800c66a:	3301      	adds	r3, #1
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	9307      	str	r3, [sp, #28]
 800c670:	bfb8      	it	lt
 800c672:	2301      	movlt	r3, #1
 800c674:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c678:	2100      	movs	r1, #0
 800c67a:	2204      	movs	r2, #4
 800c67c:	f102 0514 	add.w	r5, r2, #20
 800c680:	429d      	cmp	r5, r3
 800c682:	d91f      	bls.n	800c6c4 <_dtoa_r+0x2a4>
 800c684:	6041      	str	r1, [r0, #4]
 800c686:	4658      	mov	r0, fp
 800c688:	f000 fcd8 	bl	800d03c <_Balloc>
 800c68c:	4682      	mov	sl, r0
 800c68e:	2800      	cmp	r0, #0
 800c690:	d13c      	bne.n	800c70c <_dtoa_r+0x2ec>
 800c692:	4b1b      	ldr	r3, [pc, #108]	@ (800c700 <_dtoa_r+0x2e0>)
 800c694:	4602      	mov	r2, r0
 800c696:	f240 11af 	movw	r1, #431	@ 0x1af
 800c69a:	e6d8      	b.n	800c44e <_dtoa_r+0x2e>
 800c69c:	2301      	movs	r3, #1
 800c69e:	e7e0      	b.n	800c662 <_dtoa_r+0x242>
 800c6a0:	2401      	movs	r4, #1
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ac:	9300      	str	r3, [sp, #0]
 800c6ae:	9307      	str	r3, [sp, #28]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	2312      	movs	r3, #18
 800c6b4:	e7d0      	b.n	800c658 <_dtoa_r+0x238>
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c6ba:	e7f5      	b.n	800c6a8 <_dtoa_r+0x288>
 800c6bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6be:	9300      	str	r3, [sp, #0]
 800c6c0:	9307      	str	r3, [sp, #28]
 800c6c2:	e7d7      	b.n	800c674 <_dtoa_r+0x254>
 800c6c4:	3101      	adds	r1, #1
 800c6c6:	0052      	lsls	r2, r2, #1
 800c6c8:	e7d8      	b.n	800c67c <_dtoa_r+0x25c>
 800c6ca:	bf00      	nop
 800c6cc:	f3af 8000 	nop.w
 800c6d0:	636f4361 	.word	0x636f4361
 800c6d4:	3fd287a7 	.word	0x3fd287a7
 800c6d8:	8b60c8b3 	.word	0x8b60c8b3
 800c6dc:	3fc68a28 	.word	0x3fc68a28
 800c6e0:	509f79fb 	.word	0x509f79fb
 800c6e4:	3fd34413 	.word	0x3fd34413
 800c6e8:	0800f1e9 	.word	0x0800f1e9
 800c6ec:	0800f200 	.word	0x0800f200
 800c6f0:	7ff00000 	.word	0x7ff00000
 800c6f4:	0800f1b9 	.word	0x0800f1b9
 800c6f8:	3ff80000 	.word	0x3ff80000
 800c6fc:	0800f2f8 	.word	0x0800f2f8
 800c700:	0800f258 	.word	0x0800f258
 800c704:	0800f1e5 	.word	0x0800f1e5
 800c708:	0800f1b8 	.word	0x0800f1b8
 800c70c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c710:	6018      	str	r0, [r3, #0]
 800c712:	9b07      	ldr	r3, [sp, #28]
 800c714:	2b0e      	cmp	r3, #14
 800c716:	f200 80a4 	bhi.w	800c862 <_dtoa_r+0x442>
 800c71a:	2c00      	cmp	r4, #0
 800c71c:	f000 80a1 	beq.w	800c862 <_dtoa_r+0x442>
 800c720:	2f00      	cmp	r7, #0
 800c722:	dd33      	ble.n	800c78c <_dtoa_r+0x36c>
 800c724:	4bad      	ldr	r3, [pc, #692]	@ (800c9dc <_dtoa_r+0x5bc>)
 800c726:	f007 020f 	and.w	r2, r7, #15
 800c72a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c72e:	ed93 7b00 	vldr	d7, [r3]
 800c732:	05f8      	lsls	r0, r7, #23
 800c734:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c738:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c73c:	d516      	bpl.n	800c76c <_dtoa_r+0x34c>
 800c73e:	4ba8      	ldr	r3, [pc, #672]	@ (800c9e0 <_dtoa_r+0x5c0>)
 800c740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c744:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c748:	f7f4 f880 	bl	800084c <__aeabi_ddiv>
 800c74c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c750:	f004 040f 	and.w	r4, r4, #15
 800c754:	2603      	movs	r6, #3
 800c756:	4da2      	ldr	r5, [pc, #648]	@ (800c9e0 <_dtoa_r+0x5c0>)
 800c758:	b954      	cbnz	r4, 800c770 <_dtoa_r+0x350>
 800c75a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c75e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c762:	f7f4 f873 	bl	800084c <__aeabi_ddiv>
 800c766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c76a:	e028      	b.n	800c7be <_dtoa_r+0x39e>
 800c76c:	2602      	movs	r6, #2
 800c76e:	e7f2      	b.n	800c756 <_dtoa_r+0x336>
 800c770:	07e1      	lsls	r1, r4, #31
 800c772:	d508      	bpl.n	800c786 <_dtoa_r+0x366>
 800c774:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c778:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c77c:	f7f3 ff3c 	bl	80005f8 <__aeabi_dmul>
 800c780:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c784:	3601      	adds	r6, #1
 800c786:	1064      	asrs	r4, r4, #1
 800c788:	3508      	adds	r5, #8
 800c78a:	e7e5      	b.n	800c758 <_dtoa_r+0x338>
 800c78c:	f000 80d2 	beq.w	800c934 <_dtoa_r+0x514>
 800c790:	427c      	negs	r4, r7
 800c792:	4b92      	ldr	r3, [pc, #584]	@ (800c9dc <_dtoa_r+0x5bc>)
 800c794:	4d92      	ldr	r5, [pc, #584]	@ (800c9e0 <_dtoa_r+0x5c0>)
 800c796:	f004 020f 	and.w	r2, r4, #15
 800c79a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c7a6:	f7f3 ff27 	bl	80005f8 <__aeabi_dmul>
 800c7aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7ae:	1124      	asrs	r4, r4, #4
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	2602      	movs	r6, #2
 800c7b4:	2c00      	cmp	r4, #0
 800c7b6:	f040 80b2 	bne.w	800c91e <_dtoa_r+0x4fe>
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d1d3      	bne.n	800c766 <_dtoa_r+0x346>
 800c7be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c7c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	f000 80b7 	beq.w	800c938 <_dtoa_r+0x518>
 800c7ca:	4b86      	ldr	r3, [pc, #536]	@ (800c9e4 <_dtoa_r+0x5c4>)
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	f7f4 f983 	bl	8000adc <__aeabi_dcmplt>
 800c7d6:	2800      	cmp	r0, #0
 800c7d8:	f000 80ae 	beq.w	800c938 <_dtoa_r+0x518>
 800c7dc:	9b07      	ldr	r3, [sp, #28]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	f000 80aa 	beq.w	800c938 <_dtoa_r+0x518>
 800c7e4:	9b00      	ldr	r3, [sp, #0]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	dd37      	ble.n	800c85a <_dtoa_r+0x43a>
 800c7ea:	1e7b      	subs	r3, r7, #1
 800c7ec:	9304      	str	r3, [sp, #16]
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	4b7d      	ldr	r3, [pc, #500]	@ (800c9e8 <_dtoa_r+0x5c8>)
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	4629      	mov	r1, r5
 800c7f6:	f7f3 feff 	bl	80005f8 <__aeabi_dmul>
 800c7fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7fe:	9c00      	ldr	r4, [sp, #0]
 800c800:	3601      	adds	r6, #1
 800c802:	4630      	mov	r0, r6
 800c804:	f7f3 fe8e 	bl	8000524 <__aeabi_i2d>
 800c808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c80c:	f7f3 fef4 	bl	80005f8 <__aeabi_dmul>
 800c810:	4b76      	ldr	r3, [pc, #472]	@ (800c9ec <_dtoa_r+0x5cc>)
 800c812:	2200      	movs	r2, #0
 800c814:	f7f3 fd3a 	bl	800028c <__adddf3>
 800c818:	4605      	mov	r5, r0
 800c81a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c81e:	2c00      	cmp	r4, #0
 800c820:	f040 808d 	bne.w	800c93e <_dtoa_r+0x51e>
 800c824:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c828:	4b71      	ldr	r3, [pc, #452]	@ (800c9f0 <_dtoa_r+0x5d0>)
 800c82a:	2200      	movs	r2, #0
 800c82c:	f7f3 fd2c 	bl	8000288 <__aeabi_dsub>
 800c830:	4602      	mov	r2, r0
 800c832:	460b      	mov	r3, r1
 800c834:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c838:	462a      	mov	r2, r5
 800c83a:	4633      	mov	r3, r6
 800c83c:	f7f4 f96c 	bl	8000b18 <__aeabi_dcmpgt>
 800c840:	2800      	cmp	r0, #0
 800c842:	f040 828b 	bne.w	800cd5c <_dtoa_r+0x93c>
 800c846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c84a:	462a      	mov	r2, r5
 800c84c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c850:	f7f4 f944 	bl	8000adc <__aeabi_dcmplt>
 800c854:	2800      	cmp	r0, #0
 800c856:	f040 8128 	bne.w	800caaa <_dtoa_r+0x68a>
 800c85a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c85e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c862:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c864:	2b00      	cmp	r3, #0
 800c866:	f2c0 815a 	blt.w	800cb1e <_dtoa_r+0x6fe>
 800c86a:	2f0e      	cmp	r7, #14
 800c86c:	f300 8157 	bgt.w	800cb1e <_dtoa_r+0x6fe>
 800c870:	4b5a      	ldr	r3, [pc, #360]	@ (800c9dc <_dtoa_r+0x5bc>)
 800c872:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c876:	ed93 7b00 	vldr	d7, [r3]
 800c87a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	ed8d 7b00 	vstr	d7, [sp]
 800c882:	da03      	bge.n	800c88c <_dtoa_r+0x46c>
 800c884:	9b07      	ldr	r3, [sp, #28]
 800c886:	2b00      	cmp	r3, #0
 800c888:	f340 8101 	ble.w	800ca8e <_dtoa_r+0x66e>
 800c88c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c890:	4656      	mov	r6, sl
 800c892:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c896:	4620      	mov	r0, r4
 800c898:	4629      	mov	r1, r5
 800c89a:	f7f3 ffd7 	bl	800084c <__aeabi_ddiv>
 800c89e:	f7f4 f95b 	bl	8000b58 <__aeabi_d2iz>
 800c8a2:	4680      	mov	r8, r0
 800c8a4:	f7f3 fe3e 	bl	8000524 <__aeabi_i2d>
 800c8a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8ac:	f7f3 fea4 	bl	80005f8 <__aeabi_dmul>
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	4620      	mov	r0, r4
 800c8b6:	4629      	mov	r1, r5
 800c8b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c8bc:	f7f3 fce4 	bl	8000288 <__aeabi_dsub>
 800c8c0:	f806 4b01 	strb.w	r4, [r6], #1
 800c8c4:	9d07      	ldr	r5, [sp, #28]
 800c8c6:	eba6 040a 	sub.w	r4, r6, sl
 800c8ca:	42a5      	cmp	r5, r4
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	f040 8117 	bne.w	800cb02 <_dtoa_r+0x6e2>
 800c8d4:	f7f3 fcda 	bl	800028c <__adddf3>
 800c8d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8dc:	4604      	mov	r4, r0
 800c8de:	460d      	mov	r5, r1
 800c8e0:	f7f4 f91a 	bl	8000b18 <__aeabi_dcmpgt>
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	f040 80f9 	bne.w	800cadc <_dtoa_r+0x6bc>
 800c8ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	4629      	mov	r1, r5
 800c8f2:	f7f4 f8e9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8f6:	b118      	cbz	r0, 800c900 <_dtoa_r+0x4e0>
 800c8f8:	f018 0f01 	tst.w	r8, #1
 800c8fc:	f040 80ee 	bne.w	800cadc <_dtoa_r+0x6bc>
 800c900:	4649      	mov	r1, r9
 800c902:	4658      	mov	r0, fp
 800c904:	f000 fbda 	bl	800d0bc <_Bfree>
 800c908:	2300      	movs	r3, #0
 800c90a:	7033      	strb	r3, [r6, #0]
 800c90c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c90e:	3701      	adds	r7, #1
 800c910:	601f      	str	r7, [r3, #0]
 800c912:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c914:	2b00      	cmp	r3, #0
 800c916:	f000 831d 	beq.w	800cf54 <_dtoa_r+0xb34>
 800c91a:	601e      	str	r6, [r3, #0]
 800c91c:	e31a      	b.n	800cf54 <_dtoa_r+0xb34>
 800c91e:	07e2      	lsls	r2, r4, #31
 800c920:	d505      	bpl.n	800c92e <_dtoa_r+0x50e>
 800c922:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c926:	f7f3 fe67 	bl	80005f8 <__aeabi_dmul>
 800c92a:	3601      	adds	r6, #1
 800c92c:	2301      	movs	r3, #1
 800c92e:	1064      	asrs	r4, r4, #1
 800c930:	3508      	adds	r5, #8
 800c932:	e73f      	b.n	800c7b4 <_dtoa_r+0x394>
 800c934:	2602      	movs	r6, #2
 800c936:	e742      	b.n	800c7be <_dtoa_r+0x39e>
 800c938:	9c07      	ldr	r4, [sp, #28]
 800c93a:	9704      	str	r7, [sp, #16]
 800c93c:	e761      	b.n	800c802 <_dtoa_r+0x3e2>
 800c93e:	4b27      	ldr	r3, [pc, #156]	@ (800c9dc <_dtoa_r+0x5bc>)
 800c940:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c942:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c946:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c94a:	4454      	add	r4, sl
 800c94c:	2900      	cmp	r1, #0
 800c94e:	d053      	beq.n	800c9f8 <_dtoa_r+0x5d8>
 800c950:	4928      	ldr	r1, [pc, #160]	@ (800c9f4 <_dtoa_r+0x5d4>)
 800c952:	2000      	movs	r0, #0
 800c954:	f7f3 ff7a 	bl	800084c <__aeabi_ddiv>
 800c958:	4633      	mov	r3, r6
 800c95a:	462a      	mov	r2, r5
 800c95c:	f7f3 fc94 	bl	8000288 <__aeabi_dsub>
 800c960:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c964:	4656      	mov	r6, sl
 800c966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c96a:	f7f4 f8f5 	bl	8000b58 <__aeabi_d2iz>
 800c96e:	4605      	mov	r5, r0
 800c970:	f7f3 fdd8 	bl	8000524 <__aeabi_i2d>
 800c974:	4602      	mov	r2, r0
 800c976:	460b      	mov	r3, r1
 800c978:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c97c:	f7f3 fc84 	bl	8000288 <__aeabi_dsub>
 800c980:	3530      	adds	r5, #48	@ 0x30
 800c982:	4602      	mov	r2, r0
 800c984:	460b      	mov	r3, r1
 800c986:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c98a:	f806 5b01 	strb.w	r5, [r6], #1
 800c98e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c992:	f7f4 f8a3 	bl	8000adc <__aeabi_dcmplt>
 800c996:	2800      	cmp	r0, #0
 800c998:	d171      	bne.n	800ca7e <_dtoa_r+0x65e>
 800c99a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c99e:	4911      	ldr	r1, [pc, #68]	@ (800c9e4 <_dtoa_r+0x5c4>)
 800c9a0:	2000      	movs	r0, #0
 800c9a2:	f7f3 fc71 	bl	8000288 <__aeabi_dsub>
 800c9a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c9aa:	f7f4 f897 	bl	8000adc <__aeabi_dcmplt>
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	f040 8095 	bne.w	800cade <_dtoa_r+0x6be>
 800c9b4:	42a6      	cmp	r6, r4
 800c9b6:	f43f af50 	beq.w	800c85a <_dtoa_r+0x43a>
 800c9ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c9be:	4b0a      	ldr	r3, [pc, #40]	@ (800c9e8 <_dtoa_r+0x5c8>)
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	f7f3 fe19 	bl	80005f8 <__aeabi_dmul>
 800c9c6:	4b08      	ldr	r3, [pc, #32]	@ (800c9e8 <_dtoa_r+0x5c8>)
 800c9c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9d2:	f7f3 fe11 	bl	80005f8 <__aeabi_dmul>
 800c9d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9da:	e7c4      	b.n	800c966 <_dtoa_r+0x546>
 800c9dc:	0800f2f8 	.word	0x0800f2f8
 800c9e0:	0800f2d0 	.word	0x0800f2d0
 800c9e4:	3ff00000 	.word	0x3ff00000
 800c9e8:	40240000 	.word	0x40240000
 800c9ec:	401c0000 	.word	0x401c0000
 800c9f0:	40140000 	.word	0x40140000
 800c9f4:	3fe00000 	.word	0x3fe00000
 800c9f8:	4631      	mov	r1, r6
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	f7f3 fdfc 	bl	80005f8 <__aeabi_dmul>
 800ca00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ca04:	9415      	str	r4, [sp, #84]	@ 0x54
 800ca06:	4656      	mov	r6, sl
 800ca08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca0c:	f7f4 f8a4 	bl	8000b58 <__aeabi_d2iz>
 800ca10:	4605      	mov	r5, r0
 800ca12:	f7f3 fd87 	bl	8000524 <__aeabi_i2d>
 800ca16:	4602      	mov	r2, r0
 800ca18:	460b      	mov	r3, r1
 800ca1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca1e:	f7f3 fc33 	bl	8000288 <__aeabi_dsub>
 800ca22:	3530      	adds	r5, #48	@ 0x30
 800ca24:	f806 5b01 	strb.w	r5, [r6], #1
 800ca28:	4602      	mov	r2, r0
 800ca2a:	460b      	mov	r3, r1
 800ca2c:	42a6      	cmp	r6, r4
 800ca2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca32:	f04f 0200 	mov.w	r2, #0
 800ca36:	d124      	bne.n	800ca82 <_dtoa_r+0x662>
 800ca38:	4bac      	ldr	r3, [pc, #688]	@ (800ccec <_dtoa_r+0x8cc>)
 800ca3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ca3e:	f7f3 fc25 	bl	800028c <__adddf3>
 800ca42:	4602      	mov	r2, r0
 800ca44:	460b      	mov	r3, r1
 800ca46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca4a:	f7f4 f865 	bl	8000b18 <__aeabi_dcmpgt>
 800ca4e:	2800      	cmp	r0, #0
 800ca50:	d145      	bne.n	800cade <_dtoa_r+0x6be>
 800ca52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ca56:	49a5      	ldr	r1, [pc, #660]	@ (800ccec <_dtoa_r+0x8cc>)
 800ca58:	2000      	movs	r0, #0
 800ca5a:	f7f3 fc15 	bl	8000288 <__aeabi_dsub>
 800ca5e:	4602      	mov	r2, r0
 800ca60:	460b      	mov	r3, r1
 800ca62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca66:	f7f4 f839 	bl	8000adc <__aeabi_dcmplt>
 800ca6a:	2800      	cmp	r0, #0
 800ca6c:	f43f aef5 	beq.w	800c85a <_dtoa_r+0x43a>
 800ca70:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ca72:	1e73      	subs	r3, r6, #1
 800ca74:	9315      	str	r3, [sp, #84]	@ 0x54
 800ca76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ca7a:	2b30      	cmp	r3, #48	@ 0x30
 800ca7c:	d0f8      	beq.n	800ca70 <_dtoa_r+0x650>
 800ca7e:	9f04      	ldr	r7, [sp, #16]
 800ca80:	e73e      	b.n	800c900 <_dtoa_r+0x4e0>
 800ca82:	4b9b      	ldr	r3, [pc, #620]	@ (800ccf0 <_dtoa_r+0x8d0>)
 800ca84:	f7f3 fdb8 	bl	80005f8 <__aeabi_dmul>
 800ca88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca8c:	e7bc      	b.n	800ca08 <_dtoa_r+0x5e8>
 800ca8e:	d10c      	bne.n	800caaa <_dtoa_r+0x68a>
 800ca90:	4b98      	ldr	r3, [pc, #608]	@ (800ccf4 <_dtoa_r+0x8d4>)
 800ca92:	2200      	movs	r2, #0
 800ca94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca98:	f7f3 fdae 	bl	80005f8 <__aeabi_dmul>
 800ca9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800caa0:	f7f4 f830 	bl	8000b04 <__aeabi_dcmpge>
 800caa4:	2800      	cmp	r0, #0
 800caa6:	f000 8157 	beq.w	800cd58 <_dtoa_r+0x938>
 800caaa:	2400      	movs	r4, #0
 800caac:	4625      	mov	r5, r4
 800caae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cab0:	43db      	mvns	r3, r3
 800cab2:	9304      	str	r3, [sp, #16]
 800cab4:	4656      	mov	r6, sl
 800cab6:	2700      	movs	r7, #0
 800cab8:	4621      	mov	r1, r4
 800caba:	4658      	mov	r0, fp
 800cabc:	f000 fafe 	bl	800d0bc <_Bfree>
 800cac0:	2d00      	cmp	r5, #0
 800cac2:	d0dc      	beq.n	800ca7e <_dtoa_r+0x65e>
 800cac4:	b12f      	cbz	r7, 800cad2 <_dtoa_r+0x6b2>
 800cac6:	42af      	cmp	r7, r5
 800cac8:	d003      	beq.n	800cad2 <_dtoa_r+0x6b2>
 800caca:	4639      	mov	r1, r7
 800cacc:	4658      	mov	r0, fp
 800cace:	f000 faf5 	bl	800d0bc <_Bfree>
 800cad2:	4629      	mov	r1, r5
 800cad4:	4658      	mov	r0, fp
 800cad6:	f000 faf1 	bl	800d0bc <_Bfree>
 800cada:	e7d0      	b.n	800ca7e <_dtoa_r+0x65e>
 800cadc:	9704      	str	r7, [sp, #16]
 800cade:	4633      	mov	r3, r6
 800cae0:	461e      	mov	r6, r3
 800cae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cae6:	2a39      	cmp	r2, #57	@ 0x39
 800cae8:	d107      	bne.n	800cafa <_dtoa_r+0x6da>
 800caea:	459a      	cmp	sl, r3
 800caec:	d1f8      	bne.n	800cae0 <_dtoa_r+0x6c0>
 800caee:	9a04      	ldr	r2, [sp, #16]
 800caf0:	3201      	adds	r2, #1
 800caf2:	9204      	str	r2, [sp, #16]
 800caf4:	2230      	movs	r2, #48	@ 0x30
 800caf6:	f88a 2000 	strb.w	r2, [sl]
 800cafa:	781a      	ldrb	r2, [r3, #0]
 800cafc:	3201      	adds	r2, #1
 800cafe:	701a      	strb	r2, [r3, #0]
 800cb00:	e7bd      	b.n	800ca7e <_dtoa_r+0x65e>
 800cb02:	4b7b      	ldr	r3, [pc, #492]	@ (800ccf0 <_dtoa_r+0x8d0>)
 800cb04:	2200      	movs	r2, #0
 800cb06:	f7f3 fd77 	bl	80005f8 <__aeabi_dmul>
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	4604      	mov	r4, r0
 800cb10:	460d      	mov	r5, r1
 800cb12:	f7f3 ffd9 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb16:	2800      	cmp	r0, #0
 800cb18:	f43f aebb 	beq.w	800c892 <_dtoa_r+0x472>
 800cb1c:	e6f0      	b.n	800c900 <_dtoa_r+0x4e0>
 800cb1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cb20:	2a00      	cmp	r2, #0
 800cb22:	f000 80db 	beq.w	800ccdc <_dtoa_r+0x8bc>
 800cb26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb28:	2a01      	cmp	r2, #1
 800cb2a:	f300 80bf 	bgt.w	800ccac <_dtoa_r+0x88c>
 800cb2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800cb30:	2a00      	cmp	r2, #0
 800cb32:	f000 80b7 	beq.w	800cca4 <_dtoa_r+0x884>
 800cb36:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cb3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cb3c:	4646      	mov	r6, r8
 800cb3e:	9a08      	ldr	r2, [sp, #32]
 800cb40:	2101      	movs	r1, #1
 800cb42:	441a      	add	r2, r3
 800cb44:	4658      	mov	r0, fp
 800cb46:	4498      	add	r8, r3
 800cb48:	9208      	str	r2, [sp, #32]
 800cb4a:	f000 fb6b 	bl	800d224 <__i2b>
 800cb4e:	4605      	mov	r5, r0
 800cb50:	b15e      	cbz	r6, 800cb6a <_dtoa_r+0x74a>
 800cb52:	9b08      	ldr	r3, [sp, #32]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	dd08      	ble.n	800cb6a <_dtoa_r+0x74a>
 800cb58:	42b3      	cmp	r3, r6
 800cb5a:	9a08      	ldr	r2, [sp, #32]
 800cb5c:	bfa8      	it	ge
 800cb5e:	4633      	movge	r3, r6
 800cb60:	eba8 0803 	sub.w	r8, r8, r3
 800cb64:	1af6      	subs	r6, r6, r3
 800cb66:	1ad3      	subs	r3, r2, r3
 800cb68:	9308      	str	r3, [sp, #32]
 800cb6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb6c:	b1f3      	cbz	r3, 800cbac <_dtoa_r+0x78c>
 800cb6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	f000 80b7 	beq.w	800cce4 <_dtoa_r+0x8c4>
 800cb76:	b18c      	cbz	r4, 800cb9c <_dtoa_r+0x77c>
 800cb78:	4629      	mov	r1, r5
 800cb7a:	4622      	mov	r2, r4
 800cb7c:	4658      	mov	r0, fp
 800cb7e:	f000 fc11 	bl	800d3a4 <__pow5mult>
 800cb82:	464a      	mov	r2, r9
 800cb84:	4601      	mov	r1, r0
 800cb86:	4605      	mov	r5, r0
 800cb88:	4658      	mov	r0, fp
 800cb8a:	f000 fb61 	bl	800d250 <__multiply>
 800cb8e:	4649      	mov	r1, r9
 800cb90:	9004      	str	r0, [sp, #16]
 800cb92:	4658      	mov	r0, fp
 800cb94:	f000 fa92 	bl	800d0bc <_Bfree>
 800cb98:	9b04      	ldr	r3, [sp, #16]
 800cb9a:	4699      	mov	r9, r3
 800cb9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb9e:	1b1a      	subs	r2, r3, r4
 800cba0:	d004      	beq.n	800cbac <_dtoa_r+0x78c>
 800cba2:	4649      	mov	r1, r9
 800cba4:	4658      	mov	r0, fp
 800cba6:	f000 fbfd 	bl	800d3a4 <__pow5mult>
 800cbaa:	4681      	mov	r9, r0
 800cbac:	2101      	movs	r1, #1
 800cbae:	4658      	mov	r0, fp
 800cbb0:	f000 fb38 	bl	800d224 <__i2b>
 800cbb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbb6:	4604      	mov	r4, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	f000 81cf 	beq.w	800cf5c <_dtoa_r+0xb3c>
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	4601      	mov	r1, r0
 800cbc2:	4658      	mov	r0, fp
 800cbc4:	f000 fbee 	bl	800d3a4 <__pow5mult>
 800cbc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	4604      	mov	r4, r0
 800cbce:	f300 8095 	bgt.w	800ccfc <_dtoa_r+0x8dc>
 800cbd2:	9b02      	ldr	r3, [sp, #8]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	f040 8087 	bne.w	800cce8 <_dtoa_r+0x8c8>
 800cbda:	9b03      	ldr	r3, [sp, #12]
 800cbdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	f040 8089 	bne.w	800ccf8 <_dtoa_r+0x8d8>
 800cbe6:	9b03      	ldr	r3, [sp, #12]
 800cbe8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cbec:	0d1b      	lsrs	r3, r3, #20
 800cbee:	051b      	lsls	r3, r3, #20
 800cbf0:	b12b      	cbz	r3, 800cbfe <_dtoa_r+0x7de>
 800cbf2:	9b08      	ldr	r3, [sp, #32]
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	9308      	str	r3, [sp, #32]
 800cbf8:	f108 0801 	add.w	r8, r8, #1
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	f000 81b0 	beq.w	800cf68 <_dtoa_r+0xb48>
 800cc08:	6923      	ldr	r3, [r4, #16]
 800cc0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cc0e:	6918      	ldr	r0, [r3, #16]
 800cc10:	f000 fabc 	bl	800d18c <__hi0bits>
 800cc14:	f1c0 0020 	rsb	r0, r0, #32
 800cc18:	9b08      	ldr	r3, [sp, #32]
 800cc1a:	4418      	add	r0, r3
 800cc1c:	f010 001f 	ands.w	r0, r0, #31
 800cc20:	d077      	beq.n	800cd12 <_dtoa_r+0x8f2>
 800cc22:	f1c0 0320 	rsb	r3, r0, #32
 800cc26:	2b04      	cmp	r3, #4
 800cc28:	dd6b      	ble.n	800cd02 <_dtoa_r+0x8e2>
 800cc2a:	9b08      	ldr	r3, [sp, #32]
 800cc2c:	f1c0 001c 	rsb	r0, r0, #28
 800cc30:	4403      	add	r3, r0
 800cc32:	4480      	add	r8, r0
 800cc34:	4406      	add	r6, r0
 800cc36:	9308      	str	r3, [sp, #32]
 800cc38:	f1b8 0f00 	cmp.w	r8, #0
 800cc3c:	dd05      	ble.n	800cc4a <_dtoa_r+0x82a>
 800cc3e:	4649      	mov	r1, r9
 800cc40:	4642      	mov	r2, r8
 800cc42:	4658      	mov	r0, fp
 800cc44:	f000 fc08 	bl	800d458 <__lshift>
 800cc48:	4681      	mov	r9, r0
 800cc4a:	9b08      	ldr	r3, [sp, #32]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	dd05      	ble.n	800cc5c <_dtoa_r+0x83c>
 800cc50:	4621      	mov	r1, r4
 800cc52:	461a      	mov	r2, r3
 800cc54:	4658      	mov	r0, fp
 800cc56:	f000 fbff 	bl	800d458 <__lshift>
 800cc5a:	4604      	mov	r4, r0
 800cc5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d059      	beq.n	800cd16 <_dtoa_r+0x8f6>
 800cc62:	4621      	mov	r1, r4
 800cc64:	4648      	mov	r0, r9
 800cc66:	f000 fc63 	bl	800d530 <__mcmp>
 800cc6a:	2800      	cmp	r0, #0
 800cc6c:	da53      	bge.n	800cd16 <_dtoa_r+0x8f6>
 800cc6e:	1e7b      	subs	r3, r7, #1
 800cc70:	9304      	str	r3, [sp, #16]
 800cc72:	4649      	mov	r1, r9
 800cc74:	2300      	movs	r3, #0
 800cc76:	220a      	movs	r2, #10
 800cc78:	4658      	mov	r0, fp
 800cc7a:	f000 fa41 	bl	800d100 <__multadd>
 800cc7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc80:	4681      	mov	r9, r0
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	f000 8172 	beq.w	800cf6c <_dtoa_r+0xb4c>
 800cc88:	2300      	movs	r3, #0
 800cc8a:	4629      	mov	r1, r5
 800cc8c:	220a      	movs	r2, #10
 800cc8e:	4658      	mov	r0, fp
 800cc90:	f000 fa36 	bl	800d100 <__multadd>
 800cc94:	9b00      	ldr	r3, [sp, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	4605      	mov	r5, r0
 800cc9a:	dc67      	bgt.n	800cd6c <_dtoa_r+0x94c>
 800cc9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc9e:	2b02      	cmp	r3, #2
 800cca0:	dc41      	bgt.n	800cd26 <_dtoa_r+0x906>
 800cca2:	e063      	b.n	800cd6c <_dtoa_r+0x94c>
 800cca4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cca6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ccaa:	e746      	b.n	800cb3a <_dtoa_r+0x71a>
 800ccac:	9b07      	ldr	r3, [sp, #28]
 800ccae:	1e5c      	subs	r4, r3, #1
 800ccb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccb2:	42a3      	cmp	r3, r4
 800ccb4:	bfbf      	itttt	lt
 800ccb6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ccb8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ccba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ccbc:	1ae3      	sublt	r3, r4, r3
 800ccbe:	bfb4      	ite	lt
 800ccc0:	18d2      	addlt	r2, r2, r3
 800ccc2:	1b1c      	subge	r4, r3, r4
 800ccc4:	9b07      	ldr	r3, [sp, #28]
 800ccc6:	bfbc      	itt	lt
 800ccc8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ccca:	2400      	movlt	r4, #0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	bfb5      	itete	lt
 800ccd0:	eba8 0603 	sublt.w	r6, r8, r3
 800ccd4:	9b07      	ldrge	r3, [sp, #28]
 800ccd6:	2300      	movlt	r3, #0
 800ccd8:	4646      	movge	r6, r8
 800ccda:	e730      	b.n	800cb3e <_dtoa_r+0x71e>
 800ccdc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ccde:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cce0:	4646      	mov	r6, r8
 800cce2:	e735      	b.n	800cb50 <_dtoa_r+0x730>
 800cce4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cce6:	e75c      	b.n	800cba2 <_dtoa_r+0x782>
 800cce8:	2300      	movs	r3, #0
 800ccea:	e788      	b.n	800cbfe <_dtoa_r+0x7de>
 800ccec:	3fe00000 	.word	0x3fe00000
 800ccf0:	40240000 	.word	0x40240000
 800ccf4:	40140000 	.word	0x40140000
 800ccf8:	9b02      	ldr	r3, [sp, #8]
 800ccfa:	e780      	b.n	800cbfe <_dtoa_r+0x7de>
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd00:	e782      	b.n	800cc08 <_dtoa_r+0x7e8>
 800cd02:	d099      	beq.n	800cc38 <_dtoa_r+0x818>
 800cd04:	9a08      	ldr	r2, [sp, #32]
 800cd06:	331c      	adds	r3, #28
 800cd08:	441a      	add	r2, r3
 800cd0a:	4498      	add	r8, r3
 800cd0c:	441e      	add	r6, r3
 800cd0e:	9208      	str	r2, [sp, #32]
 800cd10:	e792      	b.n	800cc38 <_dtoa_r+0x818>
 800cd12:	4603      	mov	r3, r0
 800cd14:	e7f6      	b.n	800cd04 <_dtoa_r+0x8e4>
 800cd16:	9b07      	ldr	r3, [sp, #28]
 800cd18:	9704      	str	r7, [sp, #16]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	dc20      	bgt.n	800cd60 <_dtoa_r+0x940>
 800cd1e:	9300      	str	r3, [sp, #0]
 800cd20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd22:	2b02      	cmp	r3, #2
 800cd24:	dd1e      	ble.n	800cd64 <_dtoa_r+0x944>
 800cd26:	9b00      	ldr	r3, [sp, #0]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	f47f aec0 	bne.w	800caae <_dtoa_r+0x68e>
 800cd2e:	4621      	mov	r1, r4
 800cd30:	2205      	movs	r2, #5
 800cd32:	4658      	mov	r0, fp
 800cd34:	f000 f9e4 	bl	800d100 <__multadd>
 800cd38:	4601      	mov	r1, r0
 800cd3a:	4604      	mov	r4, r0
 800cd3c:	4648      	mov	r0, r9
 800cd3e:	f000 fbf7 	bl	800d530 <__mcmp>
 800cd42:	2800      	cmp	r0, #0
 800cd44:	f77f aeb3 	ble.w	800caae <_dtoa_r+0x68e>
 800cd48:	4656      	mov	r6, sl
 800cd4a:	2331      	movs	r3, #49	@ 0x31
 800cd4c:	f806 3b01 	strb.w	r3, [r6], #1
 800cd50:	9b04      	ldr	r3, [sp, #16]
 800cd52:	3301      	adds	r3, #1
 800cd54:	9304      	str	r3, [sp, #16]
 800cd56:	e6ae      	b.n	800cab6 <_dtoa_r+0x696>
 800cd58:	9c07      	ldr	r4, [sp, #28]
 800cd5a:	9704      	str	r7, [sp, #16]
 800cd5c:	4625      	mov	r5, r4
 800cd5e:	e7f3      	b.n	800cd48 <_dtoa_r+0x928>
 800cd60:	9b07      	ldr	r3, [sp, #28]
 800cd62:	9300      	str	r3, [sp, #0]
 800cd64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	f000 8104 	beq.w	800cf74 <_dtoa_r+0xb54>
 800cd6c:	2e00      	cmp	r6, #0
 800cd6e:	dd05      	ble.n	800cd7c <_dtoa_r+0x95c>
 800cd70:	4629      	mov	r1, r5
 800cd72:	4632      	mov	r2, r6
 800cd74:	4658      	mov	r0, fp
 800cd76:	f000 fb6f 	bl	800d458 <__lshift>
 800cd7a:	4605      	mov	r5, r0
 800cd7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d05a      	beq.n	800ce38 <_dtoa_r+0xa18>
 800cd82:	6869      	ldr	r1, [r5, #4]
 800cd84:	4658      	mov	r0, fp
 800cd86:	f000 f959 	bl	800d03c <_Balloc>
 800cd8a:	4606      	mov	r6, r0
 800cd8c:	b928      	cbnz	r0, 800cd9a <_dtoa_r+0x97a>
 800cd8e:	4b84      	ldr	r3, [pc, #528]	@ (800cfa0 <_dtoa_r+0xb80>)
 800cd90:	4602      	mov	r2, r0
 800cd92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cd96:	f7ff bb5a 	b.w	800c44e <_dtoa_r+0x2e>
 800cd9a:	692a      	ldr	r2, [r5, #16]
 800cd9c:	3202      	adds	r2, #2
 800cd9e:	0092      	lsls	r2, r2, #2
 800cda0:	f105 010c 	add.w	r1, r5, #12
 800cda4:	300c      	adds	r0, #12
 800cda6:	f000 fee9 	bl	800db7c <memcpy>
 800cdaa:	2201      	movs	r2, #1
 800cdac:	4631      	mov	r1, r6
 800cdae:	4658      	mov	r0, fp
 800cdb0:	f000 fb52 	bl	800d458 <__lshift>
 800cdb4:	f10a 0301 	add.w	r3, sl, #1
 800cdb8:	9307      	str	r3, [sp, #28]
 800cdba:	9b00      	ldr	r3, [sp, #0]
 800cdbc:	4453      	add	r3, sl
 800cdbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cdc0:	9b02      	ldr	r3, [sp, #8]
 800cdc2:	f003 0301 	and.w	r3, r3, #1
 800cdc6:	462f      	mov	r7, r5
 800cdc8:	930a      	str	r3, [sp, #40]	@ 0x28
 800cdca:	4605      	mov	r5, r0
 800cdcc:	9b07      	ldr	r3, [sp, #28]
 800cdce:	4621      	mov	r1, r4
 800cdd0:	3b01      	subs	r3, #1
 800cdd2:	4648      	mov	r0, r9
 800cdd4:	9300      	str	r3, [sp, #0]
 800cdd6:	f7ff fa98 	bl	800c30a <quorem>
 800cdda:	4639      	mov	r1, r7
 800cddc:	9002      	str	r0, [sp, #8]
 800cdde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cde2:	4648      	mov	r0, r9
 800cde4:	f000 fba4 	bl	800d530 <__mcmp>
 800cde8:	462a      	mov	r2, r5
 800cdea:	9008      	str	r0, [sp, #32]
 800cdec:	4621      	mov	r1, r4
 800cdee:	4658      	mov	r0, fp
 800cdf0:	f000 fbba 	bl	800d568 <__mdiff>
 800cdf4:	68c2      	ldr	r2, [r0, #12]
 800cdf6:	4606      	mov	r6, r0
 800cdf8:	bb02      	cbnz	r2, 800ce3c <_dtoa_r+0xa1c>
 800cdfa:	4601      	mov	r1, r0
 800cdfc:	4648      	mov	r0, r9
 800cdfe:	f000 fb97 	bl	800d530 <__mcmp>
 800ce02:	4602      	mov	r2, r0
 800ce04:	4631      	mov	r1, r6
 800ce06:	4658      	mov	r0, fp
 800ce08:	920e      	str	r2, [sp, #56]	@ 0x38
 800ce0a:	f000 f957 	bl	800d0bc <_Bfree>
 800ce0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce12:	9e07      	ldr	r6, [sp, #28]
 800ce14:	ea43 0102 	orr.w	r1, r3, r2
 800ce18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce1a:	4319      	orrs	r1, r3
 800ce1c:	d110      	bne.n	800ce40 <_dtoa_r+0xa20>
 800ce1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ce22:	d029      	beq.n	800ce78 <_dtoa_r+0xa58>
 800ce24:	9b08      	ldr	r3, [sp, #32]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	dd02      	ble.n	800ce30 <_dtoa_r+0xa10>
 800ce2a:	9b02      	ldr	r3, [sp, #8]
 800ce2c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ce30:	9b00      	ldr	r3, [sp, #0]
 800ce32:	f883 8000 	strb.w	r8, [r3]
 800ce36:	e63f      	b.n	800cab8 <_dtoa_r+0x698>
 800ce38:	4628      	mov	r0, r5
 800ce3a:	e7bb      	b.n	800cdb4 <_dtoa_r+0x994>
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	e7e1      	b.n	800ce04 <_dtoa_r+0x9e4>
 800ce40:	9b08      	ldr	r3, [sp, #32]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	db04      	blt.n	800ce50 <_dtoa_r+0xa30>
 800ce46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce48:	430b      	orrs	r3, r1
 800ce4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ce4c:	430b      	orrs	r3, r1
 800ce4e:	d120      	bne.n	800ce92 <_dtoa_r+0xa72>
 800ce50:	2a00      	cmp	r2, #0
 800ce52:	dded      	ble.n	800ce30 <_dtoa_r+0xa10>
 800ce54:	4649      	mov	r1, r9
 800ce56:	2201      	movs	r2, #1
 800ce58:	4658      	mov	r0, fp
 800ce5a:	f000 fafd 	bl	800d458 <__lshift>
 800ce5e:	4621      	mov	r1, r4
 800ce60:	4681      	mov	r9, r0
 800ce62:	f000 fb65 	bl	800d530 <__mcmp>
 800ce66:	2800      	cmp	r0, #0
 800ce68:	dc03      	bgt.n	800ce72 <_dtoa_r+0xa52>
 800ce6a:	d1e1      	bne.n	800ce30 <_dtoa_r+0xa10>
 800ce6c:	f018 0f01 	tst.w	r8, #1
 800ce70:	d0de      	beq.n	800ce30 <_dtoa_r+0xa10>
 800ce72:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ce76:	d1d8      	bne.n	800ce2a <_dtoa_r+0xa0a>
 800ce78:	9a00      	ldr	r2, [sp, #0]
 800ce7a:	2339      	movs	r3, #57	@ 0x39
 800ce7c:	7013      	strb	r3, [r2, #0]
 800ce7e:	4633      	mov	r3, r6
 800ce80:	461e      	mov	r6, r3
 800ce82:	3b01      	subs	r3, #1
 800ce84:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ce88:	2a39      	cmp	r2, #57	@ 0x39
 800ce8a:	d052      	beq.n	800cf32 <_dtoa_r+0xb12>
 800ce8c:	3201      	adds	r2, #1
 800ce8e:	701a      	strb	r2, [r3, #0]
 800ce90:	e612      	b.n	800cab8 <_dtoa_r+0x698>
 800ce92:	2a00      	cmp	r2, #0
 800ce94:	dd07      	ble.n	800cea6 <_dtoa_r+0xa86>
 800ce96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ce9a:	d0ed      	beq.n	800ce78 <_dtoa_r+0xa58>
 800ce9c:	9a00      	ldr	r2, [sp, #0]
 800ce9e:	f108 0301 	add.w	r3, r8, #1
 800cea2:	7013      	strb	r3, [r2, #0]
 800cea4:	e608      	b.n	800cab8 <_dtoa_r+0x698>
 800cea6:	9b07      	ldr	r3, [sp, #28]
 800cea8:	9a07      	ldr	r2, [sp, #28]
 800ceaa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ceae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d028      	beq.n	800cf06 <_dtoa_r+0xae6>
 800ceb4:	4649      	mov	r1, r9
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	220a      	movs	r2, #10
 800ceba:	4658      	mov	r0, fp
 800cebc:	f000 f920 	bl	800d100 <__multadd>
 800cec0:	42af      	cmp	r7, r5
 800cec2:	4681      	mov	r9, r0
 800cec4:	f04f 0300 	mov.w	r3, #0
 800cec8:	f04f 020a 	mov.w	r2, #10
 800cecc:	4639      	mov	r1, r7
 800cece:	4658      	mov	r0, fp
 800ced0:	d107      	bne.n	800cee2 <_dtoa_r+0xac2>
 800ced2:	f000 f915 	bl	800d100 <__multadd>
 800ced6:	4607      	mov	r7, r0
 800ced8:	4605      	mov	r5, r0
 800ceda:	9b07      	ldr	r3, [sp, #28]
 800cedc:	3301      	adds	r3, #1
 800cede:	9307      	str	r3, [sp, #28]
 800cee0:	e774      	b.n	800cdcc <_dtoa_r+0x9ac>
 800cee2:	f000 f90d 	bl	800d100 <__multadd>
 800cee6:	4629      	mov	r1, r5
 800cee8:	4607      	mov	r7, r0
 800ceea:	2300      	movs	r3, #0
 800ceec:	220a      	movs	r2, #10
 800ceee:	4658      	mov	r0, fp
 800cef0:	f000 f906 	bl	800d100 <__multadd>
 800cef4:	4605      	mov	r5, r0
 800cef6:	e7f0      	b.n	800ceda <_dtoa_r+0xaba>
 800cef8:	9b00      	ldr	r3, [sp, #0]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	bfcc      	ite	gt
 800cefe:	461e      	movgt	r6, r3
 800cf00:	2601      	movle	r6, #1
 800cf02:	4456      	add	r6, sl
 800cf04:	2700      	movs	r7, #0
 800cf06:	4649      	mov	r1, r9
 800cf08:	2201      	movs	r2, #1
 800cf0a:	4658      	mov	r0, fp
 800cf0c:	f000 faa4 	bl	800d458 <__lshift>
 800cf10:	4621      	mov	r1, r4
 800cf12:	4681      	mov	r9, r0
 800cf14:	f000 fb0c 	bl	800d530 <__mcmp>
 800cf18:	2800      	cmp	r0, #0
 800cf1a:	dcb0      	bgt.n	800ce7e <_dtoa_r+0xa5e>
 800cf1c:	d102      	bne.n	800cf24 <_dtoa_r+0xb04>
 800cf1e:	f018 0f01 	tst.w	r8, #1
 800cf22:	d1ac      	bne.n	800ce7e <_dtoa_r+0xa5e>
 800cf24:	4633      	mov	r3, r6
 800cf26:	461e      	mov	r6, r3
 800cf28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf2c:	2a30      	cmp	r2, #48	@ 0x30
 800cf2e:	d0fa      	beq.n	800cf26 <_dtoa_r+0xb06>
 800cf30:	e5c2      	b.n	800cab8 <_dtoa_r+0x698>
 800cf32:	459a      	cmp	sl, r3
 800cf34:	d1a4      	bne.n	800ce80 <_dtoa_r+0xa60>
 800cf36:	9b04      	ldr	r3, [sp, #16]
 800cf38:	3301      	adds	r3, #1
 800cf3a:	9304      	str	r3, [sp, #16]
 800cf3c:	2331      	movs	r3, #49	@ 0x31
 800cf3e:	f88a 3000 	strb.w	r3, [sl]
 800cf42:	e5b9      	b.n	800cab8 <_dtoa_r+0x698>
 800cf44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cf46:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cfa4 <_dtoa_r+0xb84>
 800cf4a:	b11b      	cbz	r3, 800cf54 <_dtoa_r+0xb34>
 800cf4c:	f10a 0308 	add.w	r3, sl, #8
 800cf50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cf52:	6013      	str	r3, [r2, #0]
 800cf54:	4650      	mov	r0, sl
 800cf56:	b019      	add	sp, #100	@ 0x64
 800cf58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	f77f ae37 	ble.w	800cbd2 <_dtoa_r+0x7b2>
 800cf64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf66:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf68:	2001      	movs	r0, #1
 800cf6a:	e655      	b.n	800cc18 <_dtoa_r+0x7f8>
 800cf6c:	9b00      	ldr	r3, [sp, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	f77f aed6 	ble.w	800cd20 <_dtoa_r+0x900>
 800cf74:	4656      	mov	r6, sl
 800cf76:	4621      	mov	r1, r4
 800cf78:	4648      	mov	r0, r9
 800cf7a:	f7ff f9c6 	bl	800c30a <quorem>
 800cf7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cf82:	f806 8b01 	strb.w	r8, [r6], #1
 800cf86:	9b00      	ldr	r3, [sp, #0]
 800cf88:	eba6 020a 	sub.w	r2, r6, sl
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	ddb3      	ble.n	800cef8 <_dtoa_r+0xad8>
 800cf90:	4649      	mov	r1, r9
 800cf92:	2300      	movs	r3, #0
 800cf94:	220a      	movs	r2, #10
 800cf96:	4658      	mov	r0, fp
 800cf98:	f000 f8b2 	bl	800d100 <__multadd>
 800cf9c:	4681      	mov	r9, r0
 800cf9e:	e7ea      	b.n	800cf76 <_dtoa_r+0xb56>
 800cfa0:	0800f258 	.word	0x0800f258
 800cfa4:	0800f1dc 	.word	0x0800f1dc

0800cfa8 <_free_r>:
 800cfa8:	b538      	push	{r3, r4, r5, lr}
 800cfaa:	4605      	mov	r5, r0
 800cfac:	2900      	cmp	r1, #0
 800cfae:	d041      	beq.n	800d034 <_free_r+0x8c>
 800cfb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfb4:	1f0c      	subs	r4, r1, #4
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	bfb8      	it	lt
 800cfba:	18e4      	addlt	r4, r4, r3
 800cfbc:	f7fe fb7e 	bl	800b6bc <__malloc_lock>
 800cfc0:	4a1d      	ldr	r2, [pc, #116]	@ (800d038 <_free_r+0x90>)
 800cfc2:	6813      	ldr	r3, [r2, #0]
 800cfc4:	b933      	cbnz	r3, 800cfd4 <_free_r+0x2c>
 800cfc6:	6063      	str	r3, [r4, #4]
 800cfc8:	6014      	str	r4, [r2, #0]
 800cfca:	4628      	mov	r0, r5
 800cfcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfd0:	f7fe bb7a 	b.w	800b6c8 <__malloc_unlock>
 800cfd4:	42a3      	cmp	r3, r4
 800cfd6:	d908      	bls.n	800cfea <_free_r+0x42>
 800cfd8:	6820      	ldr	r0, [r4, #0]
 800cfda:	1821      	adds	r1, r4, r0
 800cfdc:	428b      	cmp	r3, r1
 800cfde:	bf01      	itttt	eq
 800cfe0:	6819      	ldreq	r1, [r3, #0]
 800cfe2:	685b      	ldreq	r3, [r3, #4]
 800cfe4:	1809      	addeq	r1, r1, r0
 800cfe6:	6021      	streq	r1, [r4, #0]
 800cfe8:	e7ed      	b.n	800cfc6 <_free_r+0x1e>
 800cfea:	461a      	mov	r2, r3
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	b10b      	cbz	r3, 800cff4 <_free_r+0x4c>
 800cff0:	42a3      	cmp	r3, r4
 800cff2:	d9fa      	bls.n	800cfea <_free_r+0x42>
 800cff4:	6811      	ldr	r1, [r2, #0]
 800cff6:	1850      	adds	r0, r2, r1
 800cff8:	42a0      	cmp	r0, r4
 800cffa:	d10b      	bne.n	800d014 <_free_r+0x6c>
 800cffc:	6820      	ldr	r0, [r4, #0]
 800cffe:	4401      	add	r1, r0
 800d000:	1850      	adds	r0, r2, r1
 800d002:	4283      	cmp	r3, r0
 800d004:	6011      	str	r1, [r2, #0]
 800d006:	d1e0      	bne.n	800cfca <_free_r+0x22>
 800d008:	6818      	ldr	r0, [r3, #0]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	6053      	str	r3, [r2, #4]
 800d00e:	4408      	add	r0, r1
 800d010:	6010      	str	r0, [r2, #0]
 800d012:	e7da      	b.n	800cfca <_free_r+0x22>
 800d014:	d902      	bls.n	800d01c <_free_r+0x74>
 800d016:	230c      	movs	r3, #12
 800d018:	602b      	str	r3, [r5, #0]
 800d01a:	e7d6      	b.n	800cfca <_free_r+0x22>
 800d01c:	6820      	ldr	r0, [r4, #0]
 800d01e:	1821      	adds	r1, r4, r0
 800d020:	428b      	cmp	r3, r1
 800d022:	bf04      	itt	eq
 800d024:	6819      	ldreq	r1, [r3, #0]
 800d026:	685b      	ldreq	r3, [r3, #4]
 800d028:	6063      	str	r3, [r4, #4]
 800d02a:	bf04      	itt	eq
 800d02c:	1809      	addeq	r1, r1, r0
 800d02e:	6021      	streq	r1, [r4, #0]
 800d030:	6054      	str	r4, [r2, #4]
 800d032:	e7ca      	b.n	800cfca <_free_r+0x22>
 800d034:	bd38      	pop	{r3, r4, r5, pc}
 800d036:	bf00      	nop
 800d038:	2000178c 	.word	0x2000178c

0800d03c <_Balloc>:
 800d03c:	b570      	push	{r4, r5, r6, lr}
 800d03e:	69c6      	ldr	r6, [r0, #28]
 800d040:	4604      	mov	r4, r0
 800d042:	460d      	mov	r5, r1
 800d044:	b976      	cbnz	r6, 800d064 <_Balloc+0x28>
 800d046:	2010      	movs	r0, #16
 800d048:	f7fe fa86 	bl	800b558 <malloc>
 800d04c:	4602      	mov	r2, r0
 800d04e:	61e0      	str	r0, [r4, #28]
 800d050:	b920      	cbnz	r0, 800d05c <_Balloc+0x20>
 800d052:	4b18      	ldr	r3, [pc, #96]	@ (800d0b4 <_Balloc+0x78>)
 800d054:	4818      	ldr	r0, [pc, #96]	@ (800d0b8 <_Balloc+0x7c>)
 800d056:	216b      	movs	r1, #107	@ 0x6b
 800d058:	f000 fd9e 	bl	800db98 <__assert_func>
 800d05c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d060:	6006      	str	r6, [r0, #0]
 800d062:	60c6      	str	r6, [r0, #12]
 800d064:	69e6      	ldr	r6, [r4, #28]
 800d066:	68f3      	ldr	r3, [r6, #12]
 800d068:	b183      	cbz	r3, 800d08c <_Balloc+0x50>
 800d06a:	69e3      	ldr	r3, [r4, #28]
 800d06c:	68db      	ldr	r3, [r3, #12]
 800d06e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d072:	b9b8      	cbnz	r0, 800d0a4 <_Balloc+0x68>
 800d074:	2101      	movs	r1, #1
 800d076:	fa01 f605 	lsl.w	r6, r1, r5
 800d07a:	1d72      	adds	r2, r6, #5
 800d07c:	0092      	lsls	r2, r2, #2
 800d07e:	4620      	mov	r0, r4
 800d080:	f000 fda8 	bl	800dbd4 <_calloc_r>
 800d084:	b160      	cbz	r0, 800d0a0 <_Balloc+0x64>
 800d086:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d08a:	e00e      	b.n	800d0aa <_Balloc+0x6e>
 800d08c:	2221      	movs	r2, #33	@ 0x21
 800d08e:	2104      	movs	r1, #4
 800d090:	4620      	mov	r0, r4
 800d092:	f000 fd9f 	bl	800dbd4 <_calloc_r>
 800d096:	69e3      	ldr	r3, [r4, #28]
 800d098:	60f0      	str	r0, [r6, #12]
 800d09a:	68db      	ldr	r3, [r3, #12]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d1e4      	bne.n	800d06a <_Balloc+0x2e>
 800d0a0:	2000      	movs	r0, #0
 800d0a2:	bd70      	pop	{r4, r5, r6, pc}
 800d0a4:	6802      	ldr	r2, [r0, #0]
 800d0a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d0b0:	e7f7      	b.n	800d0a2 <_Balloc+0x66>
 800d0b2:	bf00      	nop
 800d0b4:	0800f1e9 	.word	0x0800f1e9
 800d0b8:	0800f269 	.word	0x0800f269

0800d0bc <_Bfree>:
 800d0bc:	b570      	push	{r4, r5, r6, lr}
 800d0be:	69c6      	ldr	r6, [r0, #28]
 800d0c0:	4605      	mov	r5, r0
 800d0c2:	460c      	mov	r4, r1
 800d0c4:	b976      	cbnz	r6, 800d0e4 <_Bfree+0x28>
 800d0c6:	2010      	movs	r0, #16
 800d0c8:	f7fe fa46 	bl	800b558 <malloc>
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	61e8      	str	r0, [r5, #28]
 800d0d0:	b920      	cbnz	r0, 800d0dc <_Bfree+0x20>
 800d0d2:	4b09      	ldr	r3, [pc, #36]	@ (800d0f8 <_Bfree+0x3c>)
 800d0d4:	4809      	ldr	r0, [pc, #36]	@ (800d0fc <_Bfree+0x40>)
 800d0d6:	218f      	movs	r1, #143	@ 0x8f
 800d0d8:	f000 fd5e 	bl	800db98 <__assert_func>
 800d0dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0e0:	6006      	str	r6, [r0, #0]
 800d0e2:	60c6      	str	r6, [r0, #12]
 800d0e4:	b13c      	cbz	r4, 800d0f6 <_Bfree+0x3a>
 800d0e6:	69eb      	ldr	r3, [r5, #28]
 800d0e8:	6862      	ldr	r2, [r4, #4]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d0f0:	6021      	str	r1, [r4, #0]
 800d0f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d0f6:	bd70      	pop	{r4, r5, r6, pc}
 800d0f8:	0800f1e9 	.word	0x0800f1e9
 800d0fc:	0800f269 	.word	0x0800f269

0800d100 <__multadd>:
 800d100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d104:	690d      	ldr	r5, [r1, #16]
 800d106:	4607      	mov	r7, r0
 800d108:	460c      	mov	r4, r1
 800d10a:	461e      	mov	r6, r3
 800d10c:	f101 0c14 	add.w	ip, r1, #20
 800d110:	2000      	movs	r0, #0
 800d112:	f8dc 3000 	ldr.w	r3, [ip]
 800d116:	b299      	uxth	r1, r3
 800d118:	fb02 6101 	mla	r1, r2, r1, r6
 800d11c:	0c1e      	lsrs	r6, r3, #16
 800d11e:	0c0b      	lsrs	r3, r1, #16
 800d120:	fb02 3306 	mla	r3, r2, r6, r3
 800d124:	b289      	uxth	r1, r1
 800d126:	3001      	adds	r0, #1
 800d128:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d12c:	4285      	cmp	r5, r0
 800d12e:	f84c 1b04 	str.w	r1, [ip], #4
 800d132:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d136:	dcec      	bgt.n	800d112 <__multadd+0x12>
 800d138:	b30e      	cbz	r6, 800d17e <__multadd+0x7e>
 800d13a:	68a3      	ldr	r3, [r4, #8]
 800d13c:	42ab      	cmp	r3, r5
 800d13e:	dc19      	bgt.n	800d174 <__multadd+0x74>
 800d140:	6861      	ldr	r1, [r4, #4]
 800d142:	4638      	mov	r0, r7
 800d144:	3101      	adds	r1, #1
 800d146:	f7ff ff79 	bl	800d03c <_Balloc>
 800d14a:	4680      	mov	r8, r0
 800d14c:	b928      	cbnz	r0, 800d15a <__multadd+0x5a>
 800d14e:	4602      	mov	r2, r0
 800d150:	4b0c      	ldr	r3, [pc, #48]	@ (800d184 <__multadd+0x84>)
 800d152:	480d      	ldr	r0, [pc, #52]	@ (800d188 <__multadd+0x88>)
 800d154:	21ba      	movs	r1, #186	@ 0xba
 800d156:	f000 fd1f 	bl	800db98 <__assert_func>
 800d15a:	6922      	ldr	r2, [r4, #16]
 800d15c:	3202      	adds	r2, #2
 800d15e:	f104 010c 	add.w	r1, r4, #12
 800d162:	0092      	lsls	r2, r2, #2
 800d164:	300c      	adds	r0, #12
 800d166:	f000 fd09 	bl	800db7c <memcpy>
 800d16a:	4621      	mov	r1, r4
 800d16c:	4638      	mov	r0, r7
 800d16e:	f7ff ffa5 	bl	800d0bc <_Bfree>
 800d172:	4644      	mov	r4, r8
 800d174:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d178:	3501      	adds	r5, #1
 800d17a:	615e      	str	r6, [r3, #20]
 800d17c:	6125      	str	r5, [r4, #16]
 800d17e:	4620      	mov	r0, r4
 800d180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d184:	0800f258 	.word	0x0800f258
 800d188:	0800f269 	.word	0x0800f269

0800d18c <__hi0bits>:
 800d18c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d190:	4603      	mov	r3, r0
 800d192:	bf36      	itet	cc
 800d194:	0403      	lslcc	r3, r0, #16
 800d196:	2000      	movcs	r0, #0
 800d198:	2010      	movcc	r0, #16
 800d19a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d19e:	bf3c      	itt	cc
 800d1a0:	021b      	lslcc	r3, r3, #8
 800d1a2:	3008      	addcc	r0, #8
 800d1a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d1a8:	bf3c      	itt	cc
 800d1aa:	011b      	lslcc	r3, r3, #4
 800d1ac:	3004      	addcc	r0, #4
 800d1ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d1b2:	bf3c      	itt	cc
 800d1b4:	009b      	lslcc	r3, r3, #2
 800d1b6:	3002      	addcc	r0, #2
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	db05      	blt.n	800d1c8 <__hi0bits+0x3c>
 800d1bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d1c0:	f100 0001 	add.w	r0, r0, #1
 800d1c4:	bf08      	it	eq
 800d1c6:	2020      	moveq	r0, #32
 800d1c8:	4770      	bx	lr

0800d1ca <__lo0bits>:
 800d1ca:	6803      	ldr	r3, [r0, #0]
 800d1cc:	4602      	mov	r2, r0
 800d1ce:	f013 0007 	ands.w	r0, r3, #7
 800d1d2:	d00b      	beq.n	800d1ec <__lo0bits+0x22>
 800d1d4:	07d9      	lsls	r1, r3, #31
 800d1d6:	d421      	bmi.n	800d21c <__lo0bits+0x52>
 800d1d8:	0798      	lsls	r0, r3, #30
 800d1da:	bf49      	itett	mi
 800d1dc:	085b      	lsrmi	r3, r3, #1
 800d1de:	089b      	lsrpl	r3, r3, #2
 800d1e0:	2001      	movmi	r0, #1
 800d1e2:	6013      	strmi	r3, [r2, #0]
 800d1e4:	bf5c      	itt	pl
 800d1e6:	6013      	strpl	r3, [r2, #0]
 800d1e8:	2002      	movpl	r0, #2
 800d1ea:	4770      	bx	lr
 800d1ec:	b299      	uxth	r1, r3
 800d1ee:	b909      	cbnz	r1, 800d1f4 <__lo0bits+0x2a>
 800d1f0:	0c1b      	lsrs	r3, r3, #16
 800d1f2:	2010      	movs	r0, #16
 800d1f4:	b2d9      	uxtb	r1, r3
 800d1f6:	b909      	cbnz	r1, 800d1fc <__lo0bits+0x32>
 800d1f8:	3008      	adds	r0, #8
 800d1fa:	0a1b      	lsrs	r3, r3, #8
 800d1fc:	0719      	lsls	r1, r3, #28
 800d1fe:	bf04      	itt	eq
 800d200:	091b      	lsreq	r3, r3, #4
 800d202:	3004      	addeq	r0, #4
 800d204:	0799      	lsls	r1, r3, #30
 800d206:	bf04      	itt	eq
 800d208:	089b      	lsreq	r3, r3, #2
 800d20a:	3002      	addeq	r0, #2
 800d20c:	07d9      	lsls	r1, r3, #31
 800d20e:	d403      	bmi.n	800d218 <__lo0bits+0x4e>
 800d210:	085b      	lsrs	r3, r3, #1
 800d212:	f100 0001 	add.w	r0, r0, #1
 800d216:	d003      	beq.n	800d220 <__lo0bits+0x56>
 800d218:	6013      	str	r3, [r2, #0]
 800d21a:	4770      	bx	lr
 800d21c:	2000      	movs	r0, #0
 800d21e:	4770      	bx	lr
 800d220:	2020      	movs	r0, #32
 800d222:	4770      	bx	lr

0800d224 <__i2b>:
 800d224:	b510      	push	{r4, lr}
 800d226:	460c      	mov	r4, r1
 800d228:	2101      	movs	r1, #1
 800d22a:	f7ff ff07 	bl	800d03c <_Balloc>
 800d22e:	4602      	mov	r2, r0
 800d230:	b928      	cbnz	r0, 800d23e <__i2b+0x1a>
 800d232:	4b05      	ldr	r3, [pc, #20]	@ (800d248 <__i2b+0x24>)
 800d234:	4805      	ldr	r0, [pc, #20]	@ (800d24c <__i2b+0x28>)
 800d236:	f240 1145 	movw	r1, #325	@ 0x145
 800d23a:	f000 fcad 	bl	800db98 <__assert_func>
 800d23e:	2301      	movs	r3, #1
 800d240:	6144      	str	r4, [r0, #20]
 800d242:	6103      	str	r3, [r0, #16]
 800d244:	bd10      	pop	{r4, pc}
 800d246:	bf00      	nop
 800d248:	0800f258 	.word	0x0800f258
 800d24c:	0800f269 	.word	0x0800f269

0800d250 <__multiply>:
 800d250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d254:	4614      	mov	r4, r2
 800d256:	690a      	ldr	r2, [r1, #16]
 800d258:	6923      	ldr	r3, [r4, #16]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	bfa8      	it	ge
 800d25e:	4623      	movge	r3, r4
 800d260:	460f      	mov	r7, r1
 800d262:	bfa4      	itt	ge
 800d264:	460c      	movge	r4, r1
 800d266:	461f      	movge	r7, r3
 800d268:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d26c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d270:	68a3      	ldr	r3, [r4, #8]
 800d272:	6861      	ldr	r1, [r4, #4]
 800d274:	eb0a 0609 	add.w	r6, sl, r9
 800d278:	42b3      	cmp	r3, r6
 800d27a:	b085      	sub	sp, #20
 800d27c:	bfb8      	it	lt
 800d27e:	3101      	addlt	r1, #1
 800d280:	f7ff fedc 	bl	800d03c <_Balloc>
 800d284:	b930      	cbnz	r0, 800d294 <__multiply+0x44>
 800d286:	4602      	mov	r2, r0
 800d288:	4b44      	ldr	r3, [pc, #272]	@ (800d39c <__multiply+0x14c>)
 800d28a:	4845      	ldr	r0, [pc, #276]	@ (800d3a0 <__multiply+0x150>)
 800d28c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d290:	f000 fc82 	bl	800db98 <__assert_func>
 800d294:	f100 0514 	add.w	r5, r0, #20
 800d298:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d29c:	462b      	mov	r3, r5
 800d29e:	2200      	movs	r2, #0
 800d2a0:	4543      	cmp	r3, r8
 800d2a2:	d321      	bcc.n	800d2e8 <__multiply+0x98>
 800d2a4:	f107 0114 	add.w	r1, r7, #20
 800d2a8:	f104 0214 	add.w	r2, r4, #20
 800d2ac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d2b0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d2b4:	9302      	str	r3, [sp, #8]
 800d2b6:	1b13      	subs	r3, r2, r4
 800d2b8:	3b15      	subs	r3, #21
 800d2ba:	f023 0303 	bic.w	r3, r3, #3
 800d2be:	3304      	adds	r3, #4
 800d2c0:	f104 0715 	add.w	r7, r4, #21
 800d2c4:	42ba      	cmp	r2, r7
 800d2c6:	bf38      	it	cc
 800d2c8:	2304      	movcc	r3, #4
 800d2ca:	9301      	str	r3, [sp, #4]
 800d2cc:	9b02      	ldr	r3, [sp, #8]
 800d2ce:	9103      	str	r1, [sp, #12]
 800d2d0:	428b      	cmp	r3, r1
 800d2d2:	d80c      	bhi.n	800d2ee <__multiply+0x9e>
 800d2d4:	2e00      	cmp	r6, #0
 800d2d6:	dd03      	ble.n	800d2e0 <__multiply+0x90>
 800d2d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d05b      	beq.n	800d398 <__multiply+0x148>
 800d2e0:	6106      	str	r6, [r0, #16]
 800d2e2:	b005      	add	sp, #20
 800d2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e8:	f843 2b04 	str.w	r2, [r3], #4
 800d2ec:	e7d8      	b.n	800d2a0 <__multiply+0x50>
 800d2ee:	f8b1 a000 	ldrh.w	sl, [r1]
 800d2f2:	f1ba 0f00 	cmp.w	sl, #0
 800d2f6:	d024      	beq.n	800d342 <__multiply+0xf2>
 800d2f8:	f104 0e14 	add.w	lr, r4, #20
 800d2fc:	46a9      	mov	r9, r5
 800d2fe:	f04f 0c00 	mov.w	ip, #0
 800d302:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d306:	f8d9 3000 	ldr.w	r3, [r9]
 800d30a:	fa1f fb87 	uxth.w	fp, r7
 800d30e:	b29b      	uxth	r3, r3
 800d310:	fb0a 330b 	mla	r3, sl, fp, r3
 800d314:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d318:	f8d9 7000 	ldr.w	r7, [r9]
 800d31c:	4463      	add	r3, ip
 800d31e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d322:	fb0a c70b 	mla	r7, sl, fp, ip
 800d326:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d330:	4572      	cmp	r2, lr
 800d332:	f849 3b04 	str.w	r3, [r9], #4
 800d336:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d33a:	d8e2      	bhi.n	800d302 <__multiply+0xb2>
 800d33c:	9b01      	ldr	r3, [sp, #4]
 800d33e:	f845 c003 	str.w	ip, [r5, r3]
 800d342:	9b03      	ldr	r3, [sp, #12]
 800d344:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d348:	3104      	adds	r1, #4
 800d34a:	f1b9 0f00 	cmp.w	r9, #0
 800d34e:	d021      	beq.n	800d394 <__multiply+0x144>
 800d350:	682b      	ldr	r3, [r5, #0]
 800d352:	f104 0c14 	add.w	ip, r4, #20
 800d356:	46ae      	mov	lr, r5
 800d358:	f04f 0a00 	mov.w	sl, #0
 800d35c:	f8bc b000 	ldrh.w	fp, [ip]
 800d360:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d364:	fb09 770b 	mla	r7, r9, fp, r7
 800d368:	4457      	add	r7, sl
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d370:	f84e 3b04 	str.w	r3, [lr], #4
 800d374:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d378:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d37c:	f8be 3000 	ldrh.w	r3, [lr]
 800d380:	fb09 330a 	mla	r3, r9, sl, r3
 800d384:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d388:	4562      	cmp	r2, ip
 800d38a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d38e:	d8e5      	bhi.n	800d35c <__multiply+0x10c>
 800d390:	9f01      	ldr	r7, [sp, #4]
 800d392:	51eb      	str	r3, [r5, r7]
 800d394:	3504      	adds	r5, #4
 800d396:	e799      	b.n	800d2cc <__multiply+0x7c>
 800d398:	3e01      	subs	r6, #1
 800d39a:	e79b      	b.n	800d2d4 <__multiply+0x84>
 800d39c:	0800f258 	.word	0x0800f258
 800d3a0:	0800f269 	.word	0x0800f269

0800d3a4 <__pow5mult>:
 800d3a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3a8:	4615      	mov	r5, r2
 800d3aa:	f012 0203 	ands.w	r2, r2, #3
 800d3ae:	4607      	mov	r7, r0
 800d3b0:	460e      	mov	r6, r1
 800d3b2:	d007      	beq.n	800d3c4 <__pow5mult+0x20>
 800d3b4:	4c25      	ldr	r4, [pc, #148]	@ (800d44c <__pow5mult+0xa8>)
 800d3b6:	3a01      	subs	r2, #1
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d3be:	f7ff fe9f 	bl	800d100 <__multadd>
 800d3c2:	4606      	mov	r6, r0
 800d3c4:	10ad      	asrs	r5, r5, #2
 800d3c6:	d03d      	beq.n	800d444 <__pow5mult+0xa0>
 800d3c8:	69fc      	ldr	r4, [r7, #28]
 800d3ca:	b97c      	cbnz	r4, 800d3ec <__pow5mult+0x48>
 800d3cc:	2010      	movs	r0, #16
 800d3ce:	f7fe f8c3 	bl	800b558 <malloc>
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	61f8      	str	r0, [r7, #28]
 800d3d6:	b928      	cbnz	r0, 800d3e4 <__pow5mult+0x40>
 800d3d8:	4b1d      	ldr	r3, [pc, #116]	@ (800d450 <__pow5mult+0xac>)
 800d3da:	481e      	ldr	r0, [pc, #120]	@ (800d454 <__pow5mult+0xb0>)
 800d3dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d3e0:	f000 fbda 	bl	800db98 <__assert_func>
 800d3e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d3e8:	6004      	str	r4, [r0, #0]
 800d3ea:	60c4      	str	r4, [r0, #12]
 800d3ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d3f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d3f4:	b94c      	cbnz	r4, 800d40a <__pow5mult+0x66>
 800d3f6:	f240 2171 	movw	r1, #625	@ 0x271
 800d3fa:	4638      	mov	r0, r7
 800d3fc:	f7ff ff12 	bl	800d224 <__i2b>
 800d400:	2300      	movs	r3, #0
 800d402:	f8c8 0008 	str.w	r0, [r8, #8]
 800d406:	4604      	mov	r4, r0
 800d408:	6003      	str	r3, [r0, #0]
 800d40a:	f04f 0900 	mov.w	r9, #0
 800d40e:	07eb      	lsls	r3, r5, #31
 800d410:	d50a      	bpl.n	800d428 <__pow5mult+0x84>
 800d412:	4631      	mov	r1, r6
 800d414:	4622      	mov	r2, r4
 800d416:	4638      	mov	r0, r7
 800d418:	f7ff ff1a 	bl	800d250 <__multiply>
 800d41c:	4631      	mov	r1, r6
 800d41e:	4680      	mov	r8, r0
 800d420:	4638      	mov	r0, r7
 800d422:	f7ff fe4b 	bl	800d0bc <_Bfree>
 800d426:	4646      	mov	r6, r8
 800d428:	106d      	asrs	r5, r5, #1
 800d42a:	d00b      	beq.n	800d444 <__pow5mult+0xa0>
 800d42c:	6820      	ldr	r0, [r4, #0]
 800d42e:	b938      	cbnz	r0, 800d440 <__pow5mult+0x9c>
 800d430:	4622      	mov	r2, r4
 800d432:	4621      	mov	r1, r4
 800d434:	4638      	mov	r0, r7
 800d436:	f7ff ff0b 	bl	800d250 <__multiply>
 800d43a:	6020      	str	r0, [r4, #0]
 800d43c:	f8c0 9000 	str.w	r9, [r0]
 800d440:	4604      	mov	r4, r0
 800d442:	e7e4      	b.n	800d40e <__pow5mult+0x6a>
 800d444:	4630      	mov	r0, r6
 800d446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d44a:	bf00      	nop
 800d44c:	0800f2c4 	.word	0x0800f2c4
 800d450:	0800f1e9 	.word	0x0800f1e9
 800d454:	0800f269 	.word	0x0800f269

0800d458 <__lshift>:
 800d458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d45c:	460c      	mov	r4, r1
 800d45e:	6849      	ldr	r1, [r1, #4]
 800d460:	6923      	ldr	r3, [r4, #16]
 800d462:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d466:	68a3      	ldr	r3, [r4, #8]
 800d468:	4607      	mov	r7, r0
 800d46a:	4691      	mov	r9, r2
 800d46c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d470:	f108 0601 	add.w	r6, r8, #1
 800d474:	42b3      	cmp	r3, r6
 800d476:	db0b      	blt.n	800d490 <__lshift+0x38>
 800d478:	4638      	mov	r0, r7
 800d47a:	f7ff fddf 	bl	800d03c <_Balloc>
 800d47e:	4605      	mov	r5, r0
 800d480:	b948      	cbnz	r0, 800d496 <__lshift+0x3e>
 800d482:	4602      	mov	r2, r0
 800d484:	4b28      	ldr	r3, [pc, #160]	@ (800d528 <__lshift+0xd0>)
 800d486:	4829      	ldr	r0, [pc, #164]	@ (800d52c <__lshift+0xd4>)
 800d488:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d48c:	f000 fb84 	bl	800db98 <__assert_func>
 800d490:	3101      	adds	r1, #1
 800d492:	005b      	lsls	r3, r3, #1
 800d494:	e7ee      	b.n	800d474 <__lshift+0x1c>
 800d496:	2300      	movs	r3, #0
 800d498:	f100 0114 	add.w	r1, r0, #20
 800d49c:	f100 0210 	add.w	r2, r0, #16
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	4553      	cmp	r3, sl
 800d4a4:	db33      	blt.n	800d50e <__lshift+0xb6>
 800d4a6:	6920      	ldr	r0, [r4, #16]
 800d4a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d4ac:	f104 0314 	add.w	r3, r4, #20
 800d4b0:	f019 091f 	ands.w	r9, r9, #31
 800d4b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d4b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d4bc:	d02b      	beq.n	800d516 <__lshift+0xbe>
 800d4be:	f1c9 0e20 	rsb	lr, r9, #32
 800d4c2:	468a      	mov	sl, r1
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	6818      	ldr	r0, [r3, #0]
 800d4c8:	fa00 f009 	lsl.w	r0, r0, r9
 800d4cc:	4310      	orrs	r0, r2
 800d4ce:	f84a 0b04 	str.w	r0, [sl], #4
 800d4d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4d6:	459c      	cmp	ip, r3
 800d4d8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d4dc:	d8f3      	bhi.n	800d4c6 <__lshift+0x6e>
 800d4de:	ebac 0304 	sub.w	r3, ip, r4
 800d4e2:	3b15      	subs	r3, #21
 800d4e4:	f023 0303 	bic.w	r3, r3, #3
 800d4e8:	3304      	adds	r3, #4
 800d4ea:	f104 0015 	add.w	r0, r4, #21
 800d4ee:	4584      	cmp	ip, r0
 800d4f0:	bf38      	it	cc
 800d4f2:	2304      	movcc	r3, #4
 800d4f4:	50ca      	str	r2, [r1, r3]
 800d4f6:	b10a      	cbz	r2, 800d4fc <__lshift+0xa4>
 800d4f8:	f108 0602 	add.w	r6, r8, #2
 800d4fc:	3e01      	subs	r6, #1
 800d4fe:	4638      	mov	r0, r7
 800d500:	612e      	str	r6, [r5, #16]
 800d502:	4621      	mov	r1, r4
 800d504:	f7ff fdda 	bl	800d0bc <_Bfree>
 800d508:	4628      	mov	r0, r5
 800d50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d50e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d512:	3301      	adds	r3, #1
 800d514:	e7c5      	b.n	800d4a2 <__lshift+0x4a>
 800d516:	3904      	subs	r1, #4
 800d518:	f853 2b04 	ldr.w	r2, [r3], #4
 800d51c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d520:	459c      	cmp	ip, r3
 800d522:	d8f9      	bhi.n	800d518 <__lshift+0xc0>
 800d524:	e7ea      	b.n	800d4fc <__lshift+0xa4>
 800d526:	bf00      	nop
 800d528:	0800f258 	.word	0x0800f258
 800d52c:	0800f269 	.word	0x0800f269

0800d530 <__mcmp>:
 800d530:	690a      	ldr	r2, [r1, #16]
 800d532:	4603      	mov	r3, r0
 800d534:	6900      	ldr	r0, [r0, #16]
 800d536:	1a80      	subs	r0, r0, r2
 800d538:	b530      	push	{r4, r5, lr}
 800d53a:	d10e      	bne.n	800d55a <__mcmp+0x2a>
 800d53c:	3314      	adds	r3, #20
 800d53e:	3114      	adds	r1, #20
 800d540:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d544:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d548:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d54c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d550:	4295      	cmp	r5, r2
 800d552:	d003      	beq.n	800d55c <__mcmp+0x2c>
 800d554:	d205      	bcs.n	800d562 <__mcmp+0x32>
 800d556:	f04f 30ff 	mov.w	r0, #4294967295
 800d55a:	bd30      	pop	{r4, r5, pc}
 800d55c:	42a3      	cmp	r3, r4
 800d55e:	d3f3      	bcc.n	800d548 <__mcmp+0x18>
 800d560:	e7fb      	b.n	800d55a <__mcmp+0x2a>
 800d562:	2001      	movs	r0, #1
 800d564:	e7f9      	b.n	800d55a <__mcmp+0x2a>
	...

0800d568 <__mdiff>:
 800d568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d56c:	4689      	mov	r9, r1
 800d56e:	4606      	mov	r6, r0
 800d570:	4611      	mov	r1, r2
 800d572:	4648      	mov	r0, r9
 800d574:	4614      	mov	r4, r2
 800d576:	f7ff ffdb 	bl	800d530 <__mcmp>
 800d57a:	1e05      	subs	r5, r0, #0
 800d57c:	d112      	bne.n	800d5a4 <__mdiff+0x3c>
 800d57e:	4629      	mov	r1, r5
 800d580:	4630      	mov	r0, r6
 800d582:	f7ff fd5b 	bl	800d03c <_Balloc>
 800d586:	4602      	mov	r2, r0
 800d588:	b928      	cbnz	r0, 800d596 <__mdiff+0x2e>
 800d58a:	4b3f      	ldr	r3, [pc, #252]	@ (800d688 <__mdiff+0x120>)
 800d58c:	f240 2137 	movw	r1, #567	@ 0x237
 800d590:	483e      	ldr	r0, [pc, #248]	@ (800d68c <__mdiff+0x124>)
 800d592:	f000 fb01 	bl	800db98 <__assert_func>
 800d596:	2301      	movs	r3, #1
 800d598:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d59c:	4610      	mov	r0, r2
 800d59e:	b003      	add	sp, #12
 800d5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5a4:	bfbc      	itt	lt
 800d5a6:	464b      	movlt	r3, r9
 800d5a8:	46a1      	movlt	r9, r4
 800d5aa:	4630      	mov	r0, r6
 800d5ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d5b0:	bfba      	itte	lt
 800d5b2:	461c      	movlt	r4, r3
 800d5b4:	2501      	movlt	r5, #1
 800d5b6:	2500      	movge	r5, #0
 800d5b8:	f7ff fd40 	bl	800d03c <_Balloc>
 800d5bc:	4602      	mov	r2, r0
 800d5be:	b918      	cbnz	r0, 800d5c8 <__mdiff+0x60>
 800d5c0:	4b31      	ldr	r3, [pc, #196]	@ (800d688 <__mdiff+0x120>)
 800d5c2:	f240 2145 	movw	r1, #581	@ 0x245
 800d5c6:	e7e3      	b.n	800d590 <__mdiff+0x28>
 800d5c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d5cc:	6926      	ldr	r6, [r4, #16]
 800d5ce:	60c5      	str	r5, [r0, #12]
 800d5d0:	f109 0310 	add.w	r3, r9, #16
 800d5d4:	f109 0514 	add.w	r5, r9, #20
 800d5d8:	f104 0e14 	add.w	lr, r4, #20
 800d5dc:	f100 0b14 	add.w	fp, r0, #20
 800d5e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d5e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d5e8:	9301      	str	r3, [sp, #4]
 800d5ea:	46d9      	mov	r9, fp
 800d5ec:	f04f 0c00 	mov.w	ip, #0
 800d5f0:	9b01      	ldr	r3, [sp, #4]
 800d5f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d5f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d5fa:	9301      	str	r3, [sp, #4]
 800d5fc:	fa1f f38a 	uxth.w	r3, sl
 800d600:	4619      	mov	r1, r3
 800d602:	b283      	uxth	r3, r0
 800d604:	1acb      	subs	r3, r1, r3
 800d606:	0c00      	lsrs	r0, r0, #16
 800d608:	4463      	add	r3, ip
 800d60a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d60e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d612:	b29b      	uxth	r3, r3
 800d614:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d618:	4576      	cmp	r6, lr
 800d61a:	f849 3b04 	str.w	r3, [r9], #4
 800d61e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d622:	d8e5      	bhi.n	800d5f0 <__mdiff+0x88>
 800d624:	1b33      	subs	r3, r6, r4
 800d626:	3b15      	subs	r3, #21
 800d628:	f023 0303 	bic.w	r3, r3, #3
 800d62c:	3415      	adds	r4, #21
 800d62e:	3304      	adds	r3, #4
 800d630:	42a6      	cmp	r6, r4
 800d632:	bf38      	it	cc
 800d634:	2304      	movcc	r3, #4
 800d636:	441d      	add	r5, r3
 800d638:	445b      	add	r3, fp
 800d63a:	461e      	mov	r6, r3
 800d63c:	462c      	mov	r4, r5
 800d63e:	4544      	cmp	r4, r8
 800d640:	d30e      	bcc.n	800d660 <__mdiff+0xf8>
 800d642:	f108 0103 	add.w	r1, r8, #3
 800d646:	1b49      	subs	r1, r1, r5
 800d648:	f021 0103 	bic.w	r1, r1, #3
 800d64c:	3d03      	subs	r5, #3
 800d64e:	45a8      	cmp	r8, r5
 800d650:	bf38      	it	cc
 800d652:	2100      	movcc	r1, #0
 800d654:	440b      	add	r3, r1
 800d656:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d65a:	b191      	cbz	r1, 800d682 <__mdiff+0x11a>
 800d65c:	6117      	str	r7, [r2, #16]
 800d65e:	e79d      	b.n	800d59c <__mdiff+0x34>
 800d660:	f854 1b04 	ldr.w	r1, [r4], #4
 800d664:	46e6      	mov	lr, ip
 800d666:	0c08      	lsrs	r0, r1, #16
 800d668:	fa1c fc81 	uxtah	ip, ip, r1
 800d66c:	4471      	add	r1, lr
 800d66e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d672:	b289      	uxth	r1, r1
 800d674:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d678:	f846 1b04 	str.w	r1, [r6], #4
 800d67c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d680:	e7dd      	b.n	800d63e <__mdiff+0xd6>
 800d682:	3f01      	subs	r7, #1
 800d684:	e7e7      	b.n	800d656 <__mdiff+0xee>
 800d686:	bf00      	nop
 800d688:	0800f258 	.word	0x0800f258
 800d68c:	0800f269 	.word	0x0800f269

0800d690 <__d2b>:
 800d690:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d694:	460f      	mov	r7, r1
 800d696:	2101      	movs	r1, #1
 800d698:	ec59 8b10 	vmov	r8, r9, d0
 800d69c:	4616      	mov	r6, r2
 800d69e:	f7ff fccd 	bl	800d03c <_Balloc>
 800d6a2:	4604      	mov	r4, r0
 800d6a4:	b930      	cbnz	r0, 800d6b4 <__d2b+0x24>
 800d6a6:	4602      	mov	r2, r0
 800d6a8:	4b23      	ldr	r3, [pc, #140]	@ (800d738 <__d2b+0xa8>)
 800d6aa:	4824      	ldr	r0, [pc, #144]	@ (800d73c <__d2b+0xac>)
 800d6ac:	f240 310f 	movw	r1, #783	@ 0x30f
 800d6b0:	f000 fa72 	bl	800db98 <__assert_func>
 800d6b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d6b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d6bc:	b10d      	cbz	r5, 800d6c2 <__d2b+0x32>
 800d6be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d6c2:	9301      	str	r3, [sp, #4]
 800d6c4:	f1b8 0300 	subs.w	r3, r8, #0
 800d6c8:	d023      	beq.n	800d712 <__d2b+0x82>
 800d6ca:	4668      	mov	r0, sp
 800d6cc:	9300      	str	r3, [sp, #0]
 800d6ce:	f7ff fd7c 	bl	800d1ca <__lo0bits>
 800d6d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d6d6:	b1d0      	cbz	r0, 800d70e <__d2b+0x7e>
 800d6d8:	f1c0 0320 	rsb	r3, r0, #32
 800d6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800d6e0:	430b      	orrs	r3, r1
 800d6e2:	40c2      	lsrs	r2, r0
 800d6e4:	6163      	str	r3, [r4, #20]
 800d6e6:	9201      	str	r2, [sp, #4]
 800d6e8:	9b01      	ldr	r3, [sp, #4]
 800d6ea:	61a3      	str	r3, [r4, #24]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	bf0c      	ite	eq
 800d6f0:	2201      	moveq	r2, #1
 800d6f2:	2202      	movne	r2, #2
 800d6f4:	6122      	str	r2, [r4, #16]
 800d6f6:	b1a5      	cbz	r5, 800d722 <__d2b+0x92>
 800d6f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d6fc:	4405      	add	r5, r0
 800d6fe:	603d      	str	r5, [r7, #0]
 800d700:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d704:	6030      	str	r0, [r6, #0]
 800d706:	4620      	mov	r0, r4
 800d708:	b003      	add	sp, #12
 800d70a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d70e:	6161      	str	r1, [r4, #20]
 800d710:	e7ea      	b.n	800d6e8 <__d2b+0x58>
 800d712:	a801      	add	r0, sp, #4
 800d714:	f7ff fd59 	bl	800d1ca <__lo0bits>
 800d718:	9b01      	ldr	r3, [sp, #4]
 800d71a:	6163      	str	r3, [r4, #20]
 800d71c:	3020      	adds	r0, #32
 800d71e:	2201      	movs	r2, #1
 800d720:	e7e8      	b.n	800d6f4 <__d2b+0x64>
 800d722:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d726:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d72a:	6038      	str	r0, [r7, #0]
 800d72c:	6918      	ldr	r0, [r3, #16]
 800d72e:	f7ff fd2d 	bl	800d18c <__hi0bits>
 800d732:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d736:	e7e5      	b.n	800d704 <__d2b+0x74>
 800d738:	0800f258 	.word	0x0800f258
 800d73c:	0800f269 	.word	0x0800f269

0800d740 <__ssputs_r>:
 800d740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d744:	688e      	ldr	r6, [r1, #8]
 800d746:	461f      	mov	r7, r3
 800d748:	42be      	cmp	r6, r7
 800d74a:	680b      	ldr	r3, [r1, #0]
 800d74c:	4682      	mov	sl, r0
 800d74e:	460c      	mov	r4, r1
 800d750:	4690      	mov	r8, r2
 800d752:	d82d      	bhi.n	800d7b0 <__ssputs_r+0x70>
 800d754:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d758:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d75c:	d026      	beq.n	800d7ac <__ssputs_r+0x6c>
 800d75e:	6965      	ldr	r5, [r4, #20]
 800d760:	6909      	ldr	r1, [r1, #16]
 800d762:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d766:	eba3 0901 	sub.w	r9, r3, r1
 800d76a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d76e:	1c7b      	adds	r3, r7, #1
 800d770:	444b      	add	r3, r9
 800d772:	106d      	asrs	r5, r5, #1
 800d774:	429d      	cmp	r5, r3
 800d776:	bf38      	it	cc
 800d778:	461d      	movcc	r5, r3
 800d77a:	0553      	lsls	r3, r2, #21
 800d77c:	d527      	bpl.n	800d7ce <__ssputs_r+0x8e>
 800d77e:	4629      	mov	r1, r5
 800d780:	f7fd ff1c 	bl	800b5bc <_malloc_r>
 800d784:	4606      	mov	r6, r0
 800d786:	b360      	cbz	r0, 800d7e2 <__ssputs_r+0xa2>
 800d788:	6921      	ldr	r1, [r4, #16]
 800d78a:	464a      	mov	r2, r9
 800d78c:	f000 f9f6 	bl	800db7c <memcpy>
 800d790:	89a3      	ldrh	r3, [r4, #12]
 800d792:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d79a:	81a3      	strh	r3, [r4, #12]
 800d79c:	6126      	str	r6, [r4, #16]
 800d79e:	6165      	str	r5, [r4, #20]
 800d7a0:	444e      	add	r6, r9
 800d7a2:	eba5 0509 	sub.w	r5, r5, r9
 800d7a6:	6026      	str	r6, [r4, #0]
 800d7a8:	60a5      	str	r5, [r4, #8]
 800d7aa:	463e      	mov	r6, r7
 800d7ac:	42be      	cmp	r6, r7
 800d7ae:	d900      	bls.n	800d7b2 <__ssputs_r+0x72>
 800d7b0:	463e      	mov	r6, r7
 800d7b2:	6820      	ldr	r0, [r4, #0]
 800d7b4:	4632      	mov	r2, r6
 800d7b6:	4641      	mov	r1, r8
 800d7b8:	f000 f9c6 	bl	800db48 <memmove>
 800d7bc:	68a3      	ldr	r3, [r4, #8]
 800d7be:	1b9b      	subs	r3, r3, r6
 800d7c0:	60a3      	str	r3, [r4, #8]
 800d7c2:	6823      	ldr	r3, [r4, #0]
 800d7c4:	4433      	add	r3, r6
 800d7c6:	6023      	str	r3, [r4, #0]
 800d7c8:	2000      	movs	r0, #0
 800d7ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ce:	462a      	mov	r2, r5
 800d7d0:	f000 fa26 	bl	800dc20 <_realloc_r>
 800d7d4:	4606      	mov	r6, r0
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	d1e0      	bne.n	800d79c <__ssputs_r+0x5c>
 800d7da:	6921      	ldr	r1, [r4, #16]
 800d7dc:	4650      	mov	r0, sl
 800d7de:	f7ff fbe3 	bl	800cfa8 <_free_r>
 800d7e2:	230c      	movs	r3, #12
 800d7e4:	f8ca 3000 	str.w	r3, [sl]
 800d7e8:	89a3      	ldrh	r3, [r4, #12]
 800d7ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7ee:	81a3      	strh	r3, [r4, #12]
 800d7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7f4:	e7e9      	b.n	800d7ca <__ssputs_r+0x8a>
	...

0800d7f8 <_svfiprintf_r>:
 800d7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7fc:	4698      	mov	r8, r3
 800d7fe:	898b      	ldrh	r3, [r1, #12]
 800d800:	061b      	lsls	r3, r3, #24
 800d802:	b09d      	sub	sp, #116	@ 0x74
 800d804:	4607      	mov	r7, r0
 800d806:	460d      	mov	r5, r1
 800d808:	4614      	mov	r4, r2
 800d80a:	d510      	bpl.n	800d82e <_svfiprintf_r+0x36>
 800d80c:	690b      	ldr	r3, [r1, #16]
 800d80e:	b973      	cbnz	r3, 800d82e <_svfiprintf_r+0x36>
 800d810:	2140      	movs	r1, #64	@ 0x40
 800d812:	f7fd fed3 	bl	800b5bc <_malloc_r>
 800d816:	6028      	str	r0, [r5, #0]
 800d818:	6128      	str	r0, [r5, #16]
 800d81a:	b930      	cbnz	r0, 800d82a <_svfiprintf_r+0x32>
 800d81c:	230c      	movs	r3, #12
 800d81e:	603b      	str	r3, [r7, #0]
 800d820:	f04f 30ff 	mov.w	r0, #4294967295
 800d824:	b01d      	add	sp, #116	@ 0x74
 800d826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d82a:	2340      	movs	r3, #64	@ 0x40
 800d82c:	616b      	str	r3, [r5, #20]
 800d82e:	2300      	movs	r3, #0
 800d830:	9309      	str	r3, [sp, #36]	@ 0x24
 800d832:	2320      	movs	r3, #32
 800d834:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d838:	f8cd 800c 	str.w	r8, [sp, #12]
 800d83c:	2330      	movs	r3, #48	@ 0x30
 800d83e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d9dc <_svfiprintf_r+0x1e4>
 800d842:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d846:	f04f 0901 	mov.w	r9, #1
 800d84a:	4623      	mov	r3, r4
 800d84c:	469a      	mov	sl, r3
 800d84e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d852:	b10a      	cbz	r2, 800d858 <_svfiprintf_r+0x60>
 800d854:	2a25      	cmp	r2, #37	@ 0x25
 800d856:	d1f9      	bne.n	800d84c <_svfiprintf_r+0x54>
 800d858:	ebba 0b04 	subs.w	fp, sl, r4
 800d85c:	d00b      	beq.n	800d876 <_svfiprintf_r+0x7e>
 800d85e:	465b      	mov	r3, fp
 800d860:	4622      	mov	r2, r4
 800d862:	4629      	mov	r1, r5
 800d864:	4638      	mov	r0, r7
 800d866:	f7ff ff6b 	bl	800d740 <__ssputs_r>
 800d86a:	3001      	adds	r0, #1
 800d86c:	f000 80a7 	beq.w	800d9be <_svfiprintf_r+0x1c6>
 800d870:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d872:	445a      	add	r2, fp
 800d874:	9209      	str	r2, [sp, #36]	@ 0x24
 800d876:	f89a 3000 	ldrb.w	r3, [sl]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	f000 809f 	beq.w	800d9be <_svfiprintf_r+0x1c6>
 800d880:	2300      	movs	r3, #0
 800d882:	f04f 32ff 	mov.w	r2, #4294967295
 800d886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d88a:	f10a 0a01 	add.w	sl, sl, #1
 800d88e:	9304      	str	r3, [sp, #16]
 800d890:	9307      	str	r3, [sp, #28]
 800d892:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d896:	931a      	str	r3, [sp, #104]	@ 0x68
 800d898:	4654      	mov	r4, sl
 800d89a:	2205      	movs	r2, #5
 800d89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8a0:	484e      	ldr	r0, [pc, #312]	@ (800d9dc <_svfiprintf_r+0x1e4>)
 800d8a2:	f7f2 fc95 	bl	80001d0 <memchr>
 800d8a6:	9a04      	ldr	r2, [sp, #16]
 800d8a8:	b9d8      	cbnz	r0, 800d8e2 <_svfiprintf_r+0xea>
 800d8aa:	06d0      	lsls	r0, r2, #27
 800d8ac:	bf44      	itt	mi
 800d8ae:	2320      	movmi	r3, #32
 800d8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8b4:	0711      	lsls	r1, r2, #28
 800d8b6:	bf44      	itt	mi
 800d8b8:	232b      	movmi	r3, #43	@ 0x2b
 800d8ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d8be:	f89a 3000 	ldrb.w	r3, [sl]
 800d8c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8c4:	d015      	beq.n	800d8f2 <_svfiprintf_r+0xfa>
 800d8c6:	9a07      	ldr	r2, [sp, #28]
 800d8c8:	4654      	mov	r4, sl
 800d8ca:	2000      	movs	r0, #0
 800d8cc:	f04f 0c0a 	mov.w	ip, #10
 800d8d0:	4621      	mov	r1, r4
 800d8d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8d6:	3b30      	subs	r3, #48	@ 0x30
 800d8d8:	2b09      	cmp	r3, #9
 800d8da:	d94b      	bls.n	800d974 <_svfiprintf_r+0x17c>
 800d8dc:	b1b0      	cbz	r0, 800d90c <_svfiprintf_r+0x114>
 800d8de:	9207      	str	r2, [sp, #28]
 800d8e0:	e014      	b.n	800d90c <_svfiprintf_r+0x114>
 800d8e2:	eba0 0308 	sub.w	r3, r0, r8
 800d8e6:	fa09 f303 	lsl.w	r3, r9, r3
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	9304      	str	r3, [sp, #16]
 800d8ee:	46a2      	mov	sl, r4
 800d8f0:	e7d2      	b.n	800d898 <_svfiprintf_r+0xa0>
 800d8f2:	9b03      	ldr	r3, [sp, #12]
 800d8f4:	1d19      	adds	r1, r3, #4
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	9103      	str	r1, [sp, #12]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	bfbb      	ittet	lt
 800d8fe:	425b      	neglt	r3, r3
 800d900:	f042 0202 	orrlt.w	r2, r2, #2
 800d904:	9307      	strge	r3, [sp, #28]
 800d906:	9307      	strlt	r3, [sp, #28]
 800d908:	bfb8      	it	lt
 800d90a:	9204      	strlt	r2, [sp, #16]
 800d90c:	7823      	ldrb	r3, [r4, #0]
 800d90e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d910:	d10a      	bne.n	800d928 <_svfiprintf_r+0x130>
 800d912:	7863      	ldrb	r3, [r4, #1]
 800d914:	2b2a      	cmp	r3, #42	@ 0x2a
 800d916:	d132      	bne.n	800d97e <_svfiprintf_r+0x186>
 800d918:	9b03      	ldr	r3, [sp, #12]
 800d91a:	1d1a      	adds	r2, r3, #4
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	9203      	str	r2, [sp, #12]
 800d920:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d924:	3402      	adds	r4, #2
 800d926:	9305      	str	r3, [sp, #20]
 800d928:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d9ec <_svfiprintf_r+0x1f4>
 800d92c:	7821      	ldrb	r1, [r4, #0]
 800d92e:	2203      	movs	r2, #3
 800d930:	4650      	mov	r0, sl
 800d932:	f7f2 fc4d 	bl	80001d0 <memchr>
 800d936:	b138      	cbz	r0, 800d948 <_svfiprintf_r+0x150>
 800d938:	9b04      	ldr	r3, [sp, #16]
 800d93a:	eba0 000a 	sub.w	r0, r0, sl
 800d93e:	2240      	movs	r2, #64	@ 0x40
 800d940:	4082      	lsls	r2, r0
 800d942:	4313      	orrs	r3, r2
 800d944:	3401      	adds	r4, #1
 800d946:	9304      	str	r3, [sp, #16]
 800d948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d94c:	4824      	ldr	r0, [pc, #144]	@ (800d9e0 <_svfiprintf_r+0x1e8>)
 800d94e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d952:	2206      	movs	r2, #6
 800d954:	f7f2 fc3c 	bl	80001d0 <memchr>
 800d958:	2800      	cmp	r0, #0
 800d95a:	d036      	beq.n	800d9ca <_svfiprintf_r+0x1d2>
 800d95c:	4b21      	ldr	r3, [pc, #132]	@ (800d9e4 <_svfiprintf_r+0x1ec>)
 800d95e:	bb1b      	cbnz	r3, 800d9a8 <_svfiprintf_r+0x1b0>
 800d960:	9b03      	ldr	r3, [sp, #12]
 800d962:	3307      	adds	r3, #7
 800d964:	f023 0307 	bic.w	r3, r3, #7
 800d968:	3308      	adds	r3, #8
 800d96a:	9303      	str	r3, [sp, #12]
 800d96c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d96e:	4433      	add	r3, r6
 800d970:	9309      	str	r3, [sp, #36]	@ 0x24
 800d972:	e76a      	b.n	800d84a <_svfiprintf_r+0x52>
 800d974:	fb0c 3202 	mla	r2, ip, r2, r3
 800d978:	460c      	mov	r4, r1
 800d97a:	2001      	movs	r0, #1
 800d97c:	e7a8      	b.n	800d8d0 <_svfiprintf_r+0xd8>
 800d97e:	2300      	movs	r3, #0
 800d980:	3401      	adds	r4, #1
 800d982:	9305      	str	r3, [sp, #20]
 800d984:	4619      	mov	r1, r3
 800d986:	f04f 0c0a 	mov.w	ip, #10
 800d98a:	4620      	mov	r0, r4
 800d98c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d990:	3a30      	subs	r2, #48	@ 0x30
 800d992:	2a09      	cmp	r2, #9
 800d994:	d903      	bls.n	800d99e <_svfiprintf_r+0x1a6>
 800d996:	2b00      	cmp	r3, #0
 800d998:	d0c6      	beq.n	800d928 <_svfiprintf_r+0x130>
 800d99a:	9105      	str	r1, [sp, #20]
 800d99c:	e7c4      	b.n	800d928 <_svfiprintf_r+0x130>
 800d99e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9a2:	4604      	mov	r4, r0
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	e7f0      	b.n	800d98a <_svfiprintf_r+0x192>
 800d9a8:	ab03      	add	r3, sp, #12
 800d9aa:	9300      	str	r3, [sp, #0]
 800d9ac:	462a      	mov	r2, r5
 800d9ae:	4b0e      	ldr	r3, [pc, #56]	@ (800d9e8 <_svfiprintf_r+0x1f0>)
 800d9b0:	a904      	add	r1, sp, #16
 800d9b2:	4638      	mov	r0, r7
 800d9b4:	f7fd ff2e 	bl	800b814 <_printf_float>
 800d9b8:	1c42      	adds	r2, r0, #1
 800d9ba:	4606      	mov	r6, r0
 800d9bc:	d1d6      	bne.n	800d96c <_svfiprintf_r+0x174>
 800d9be:	89ab      	ldrh	r3, [r5, #12]
 800d9c0:	065b      	lsls	r3, r3, #25
 800d9c2:	f53f af2d 	bmi.w	800d820 <_svfiprintf_r+0x28>
 800d9c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d9c8:	e72c      	b.n	800d824 <_svfiprintf_r+0x2c>
 800d9ca:	ab03      	add	r3, sp, #12
 800d9cc:	9300      	str	r3, [sp, #0]
 800d9ce:	462a      	mov	r2, r5
 800d9d0:	4b05      	ldr	r3, [pc, #20]	@ (800d9e8 <_svfiprintf_r+0x1f0>)
 800d9d2:	a904      	add	r1, sp, #16
 800d9d4:	4638      	mov	r0, r7
 800d9d6:	f7fe f9b5 	bl	800bd44 <_printf_i>
 800d9da:	e7ed      	b.n	800d9b8 <_svfiprintf_r+0x1c0>
 800d9dc:	0800f3c0 	.word	0x0800f3c0
 800d9e0:	0800f3ca 	.word	0x0800f3ca
 800d9e4:	0800b815 	.word	0x0800b815
 800d9e8:	0800d741 	.word	0x0800d741
 800d9ec:	0800f3c6 	.word	0x0800f3c6

0800d9f0 <__sflush_r>:
 800d9f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9f8:	0716      	lsls	r6, r2, #28
 800d9fa:	4605      	mov	r5, r0
 800d9fc:	460c      	mov	r4, r1
 800d9fe:	d454      	bmi.n	800daaa <__sflush_r+0xba>
 800da00:	684b      	ldr	r3, [r1, #4]
 800da02:	2b00      	cmp	r3, #0
 800da04:	dc02      	bgt.n	800da0c <__sflush_r+0x1c>
 800da06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800da08:	2b00      	cmp	r3, #0
 800da0a:	dd48      	ble.n	800da9e <__sflush_r+0xae>
 800da0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da0e:	2e00      	cmp	r6, #0
 800da10:	d045      	beq.n	800da9e <__sflush_r+0xae>
 800da12:	2300      	movs	r3, #0
 800da14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800da18:	682f      	ldr	r7, [r5, #0]
 800da1a:	6a21      	ldr	r1, [r4, #32]
 800da1c:	602b      	str	r3, [r5, #0]
 800da1e:	d030      	beq.n	800da82 <__sflush_r+0x92>
 800da20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800da22:	89a3      	ldrh	r3, [r4, #12]
 800da24:	0759      	lsls	r1, r3, #29
 800da26:	d505      	bpl.n	800da34 <__sflush_r+0x44>
 800da28:	6863      	ldr	r3, [r4, #4]
 800da2a:	1ad2      	subs	r2, r2, r3
 800da2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800da2e:	b10b      	cbz	r3, 800da34 <__sflush_r+0x44>
 800da30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800da32:	1ad2      	subs	r2, r2, r3
 800da34:	2300      	movs	r3, #0
 800da36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800da38:	6a21      	ldr	r1, [r4, #32]
 800da3a:	4628      	mov	r0, r5
 800da3c:	47b0      	blx	r6
 800da3e:	1c43      	adds	r3, r0, #1
 800da40:	89a3      	ldrh	r3, [r4, #12]
 800da42:	d106      	bne.n	800da52 <__sflush_r+0x62>
 800da44:	6829      	ldr	r1, [r5, #0]
 800da46:	291d      	cmp	r1, #29
 800da48:	d82b      	bhi.n	800daa2 <__sflush_r+0xb2>
 800da4a:	4a2a      	ldr	r2, [pc, #168]	@ (800daf4 <__sflush_r+0x104>)
 800da4c:	410a      	asrs	r2, r1
 800da4e:	07d6      	lsls	r6, r2, #31
 800da50:	d427      	bmi.n	800daa2 <__sflush_r+0xb2>
 800da52:	2200      	movs	r2, #0
 800da54:	6062      	str	r2, [r4, #4]
 800da56:	04d9      	lsls	r1, r3, #19
 800da58:	6922      	ldr	r2, [r4, #16]
 800da5a:	6022      	str	r2, [r4, #0]
 800da5c:	d504      	bpl.n	800da68 <__sflush_r+0x78>
 800da5e:	1c42      	adds	r2, r0, #1
 800da60:	d101      	bne.n	800da66 <__sflush_r+0x76>
 800da62:	682b      	ldr	r3, [r5, #0]
 800da64:	b903      	cbnz	r3, 800da68 <__sflush_r+0x78>
 800da66:	6560      	str	r0, [r4, #84]	@ 0x54
 800da68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da6a:	602f      	str	r7, [r5, #0]
 800da6c:	b1b9      	cbz	r1, 800da9e <__sflush_r+0xae>
 800da6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da72:	4299      	cmp	r1, r3
 800da74:	d002      	beq.n	800da7c <__sflush_r+0x8c>
 800da76:	4628      	mov	r0, r5
 800da78:	f7ff fa96 	bl	800cfa8 <_free_r>
 800da7c:	2300      	movs	r3, #0
 800da7e:	6363      	str	r3, [r4, #52]	@ 0x34
 800da80:	e00d      	b.n	800da9e <__sflush_r+0xae>
 800da82:	2301      	movs	r3, #1
 800da84:	4628      	mov	r0, r5
 800da86:	47b0      	blx	r6
 800da88:	4602      	mov	r2, r0
 800da8a:	1c50      	adds	r0, r2, #1
 800da8c:	d1c9      	bne.n	800da22 <__sflush_r+0x32>
 800da8e:	682b      	ldr	r3, [r5, #0]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d0c6      	beq.n	800da22 <__sflush_r+0x32>
 800da94:	2b1d      	cmp	r3, #29
 800da96:	d001      	beq.n	800da9c <__sflush_r+0xac>
 800da98:	2b16      	cmp	r3, #22
 800da9a:	d11e      	bne.n	800dada <__sflush_r+0xea>
 800da9c:	602f      	str	r7, [r5, #0]
 800da9e:	2000      	movs	r0, #0
 800daa0:	e022      	b.n	800dae8 <__sflush_r+0xf8>
 800daa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800daa6:	b21b      	sxth	r3, r3
 800daa8:	e01b      	b.n	800dae2 <__sflush_r+0xf2>
 800daaa:	690f      	ldr	r7, [r1, #16]
 800daac:	2f00      	cmp	r7, #0
 800daae:	d0f6      	beq.n	800da9e <__sflush_r+0xae>
 800dab0:	0793      	lsls	r3, r2, #30
 800dab2:	680e      	ldr	r6, [r1, #0]
 800dab4:	bf08      	it	eq
 800dab6:	694b      	ldreq	r3, [r1, #20]
 800dab8:	600f      	str	r7, [r1, #0]
 800daba:	bf18      	it	ne
 800dabc:	2300      	movne	r3, #0
 800dabe:	eba6 0807 	sub.w	r8, r6, r7
 800dac2:	608b      	str	r3, [r1, #8]
 800dac4:	f1b8 0f00 	cmp.w	r8, #0
 800dac8:	dde9      	ble.n	800da9e <__sflush_r+0xae>
 800daca:	6a21      	ldr	r1, [r4, #32]
 800dacc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dace:	4643      	mov	r3, r8
 800dad0:	463a      	mov	r2, r7
 800dad2:	4628      	mov	r0, r5
 800dad4:	47b0      	blx	r6
 800dad6:	2800      	cmp	r0, #0
 800dad8:	dc08      	bgt.n	800daec <__sflush_r+0xfc>
 800dada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dae2:	81a3      	strh	r3, [r4, #12]
 800dae4:	f04f 30ff 	mov.w	r0, #4294967295
 800dae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daec:	4407      	add	r7, r0
 800daee:	eba8 0800 	sub.w	r8, r8, r0
 800daf2:	e7e7      	b.n	800dac4 <__sflush_r+0xd4>
 800daf4:	dfbffffe 	.word	0xdfbffffe

0800daf8 <_fflush_r>:
 800daf8:	b538      	push	{r3, r4, r5, lr}
 800dafa:	690b      	ldr	r3, [r1, #16]
 800dafc:	4605      	mov	r5, r0
 800dafe:	460c      	mov	r4, r1
 800db00:	b913      	cbnz	r3, 800db08 <_fflush_r+0x10>
 800db02:	2500      	movs	r5, #0
 800db04:	4628      	mov	r0, r5
 800db06:	bd38      	pop	{r3, r4, r5, pc}
 800db08:	b118      	cbz	r0, 800db12 <_fflush_r+0x1a>
 800db0a:	6a03      	ldr	r3, [r0, #32]
 800db0c:	b90b      	cbnz	r3, 800db12 <_fflush_r+0x1a>
 800db0e:	f7fe fac5 	bl	800c09c <__sinit>
 800db12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d0f3      	beq.n	800db02 <_fflush_r+0xa>
 800db1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800db1c:	07d0      	lsls	r0, r2, #31
 800db1e:	d404      	bmi.n	800db2a <_fflush_r+0x32>
 800db20:	0599      	lsls	r1, r3, #22
 800db22:	d402      	bmi.n	800db2a <_fflush_r+0x32>
 800db24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db26:	f7fe fbee 	bl	800c306 <__retarget_lock_acquire_recursive>
 800db2a:	4628      	mov	r0, r5
 800db2c:	4621      	mov	r1, r4
 800db2e:	f7ff ff5f 	bl	800d9f0 <__sflush_r>
 800db32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800db34:	07da      	lsls	r2, r3, #31
 800db36:	4605      	mov	r5, r0
 800db38:	d4e4      	bmi.n	800db04 <_fflush_r+0xc>
 800db3a:	89a3      	ldrh	r3, [r4, #12]
 800db3c:	059b      	lsls	r3, r3, #22
 800db3e:	d4e1      	bmi.n	800db04 <_fflush_r+0xc>
 800db40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800db42:	f7fe fbe1 	bl	800c308 <__retarget_lock_release_recursive>
 800db46:	e7dd      	b.n	800db04 <_fflush_r+0xc>

0800db48 <memmove>:
 800db48:	4288      	cmp	r0, r1
 800db4a:	b510      	push	{r4, lr}
 800db4c:	eb01 0402 	add.w	r4, r1, r2
 800db50:	d902      	bls.n	800db58 <memmove+0x10>
 800db52:	4284      	cmp	r4, r0
 800db54:	4623      	mov	r3, r4
 800db56:	d807      	bhi.n	800db68 <memmove+0x20>
 800db58:	1e43      	subs	r3, r0, #1
 800db5a:	42a1      	cmp	r1, r4
 800db5c:	d008      	beq.n	800db70 <memmove+0x28>
 800db5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db62:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db66:	e7f8      	b.n	800db5a <memmove+0x12>
 800db68:	4402      	add	r2, r0
 800db6a:	4601      	mov	r1, r0
 800db6c:	428a      	cmp	r2, r1
 800db6e:	d100      	bne.n	800db72 <memmove+0x2a>
 800db70:	bd10      	pop	{r4, pc}
 800db72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db7a:	e7f7      	b.n	800db6c <memmove+0x24>

0800db7c <memcpy>:
 800db7c:	440a      	add	r2, r1
 800db7e:	4291      	cmp	r1, r2
 800db80:	f100 33ff 	add.w	r3, r0, #4294967295
 800db84:	d100      	bne.n	800db88 <memcpy+0xc>
 800db86:	4770      	bx	lr
 800db88:	b510      	push	{r4, lr}
 800db8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db92:	4291      	cmp	r1, r2
 800db94:	d1f9      	bne.n	800db8a <memcpy+0xe>
 800db96:	bd10      	pop	{r4, pc}

0800db98 <__assert_func>:
 800db98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db9a:	4614      	mov	r4, r2
 800db9c:	461a      	mov	r2, r3
 800db9e:	4b09      	ldr	r3, [pc, #36]	@ (800dbc4 <__assert_func+0x2c>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	4605      	mov	r5, r0
 800dba4:	68d8      	ldr	r0, [r3, #12]
 800dba6:	b954      	cbnz	r4, 800dbbe <__assert_func+0x26>
 800dba8:	4b07      	ldr	r3, [pc, #28]	@ (800dbc8 <__assert_func+0x30>)
 800dbaa:	461c      	mov	r4, r3
 800dbac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dbb0:	9100      	str	r1, [sp, #0]
 800dbb2:	462b      	mov	r3, r5
 800dbb4:	4905      	ldr	r1, [pc, #20]	@ (800dbcc <__assert_func+0x34>)
 800dbb6:	f000 f86f 	bl	800dc98 <fiprintf>
 800dbba:	f000 f87f 	bl	800dcbc <abort>
 800dbbe:	4b04      	ldr	r3, [pc, #16]	@ (800dbd0 <__assert_func+0x38>)
 800dbc0:	e7f4      	b.n	800dbac <__assert_func+0x14>
 800dbc2:	bf00      	nop
 800dbc4:	20000040 	.word	0x20000040
 800dbc8:	0800f416 	.word	0x0800f416
 800dbcc:	0800f3e8 	.word	0x0800f3e8
 800dbd0:	0800f3db 	.word	0x0800f3db

0800dbd4 <_calloc_r>:
 800dbd4:	b570      	push	{r4, r5, r6, lr}
 800dbd6:	fba1 5402 	umull	r5, r4, r1, r2
 800dbda:	b93c      	cbnz	r4, 800dbec <_calloc_r+0x18>
 800dbdc:	4629      	mov	r1, r5
 800dbde:	f7fd fced 	bl	800b5bc <_malloc_r>
 800dbe2:	4606      	mov	r6, r0
 800dbe4:	b928      	cbnz	r0, 800dbf2 <_calloc_r+0x1e>
 800dbe6:	2600      	movs	r6, #0
 800dbe8:	4630      	mov	r0, r6
 800dbea:	bd70      	pop	{r4, r5, r6, pc}
 800dbec:	220c      	movs	r2, #12
 800dbee:	6002      	str	r2, [r0, #0]
 800dbf0:	e7f9      	b.n	800dbe6 <_calloc_r+0x12>
 800dbf2:	462a      	mov	r2, r5
 800dbf4:	4621      	mov	r1, r4
 800dbf6:	f7fe faea 	bl	800c1ce <memset>
 800dbfa:	e7f5      	b.n	800dbe8 <_calloc_r+0x14>

0800dbfc <__ascii_mbtowc>:
 800dbfc:	b082      	sub	sp, #8
 800dbfe:	b901      	cbnz	r1, 800dc02 <__ascii_mbtowc+0x6>
 800dc00:	a901      	add	r1, sp, #4
 800dc02:	b142      	cbz	r2, 800dc16 <__ascii_mbtowc+0x1a>
 800dc04:	b14b      	cbz	r3, 800dc1a <__ascii_mbtowc+0x1e>
 800dc06:	7813      	ldrb	r3, [r2, #0]
 800dc08:	600b      	str	r3, [r1, #0]
 800dc0a:	7812      	ldrb	r2, [r2, #0]
 800dc0c:	1e10      	subs	r0, r2, #0
 800dc0e:	bf18      	it	ne
 800dc10:	2001      	movne	r0, #1
 800dc12:	b002      	add	sp, #8
 800dc14:	4770      	bx	lr
 800dc16:	4610      	mov	r0, r2
 800dc18:	e7fb      	b.n	800dc12 <__ascii_mbtowc+0x16>
 800dc1a:	f06f 0001 	mvn.w	r0, #1
 800dc1e:	e7f8      	b.n	800dc12 <__ascii_mbtowc+0x16>

0800dc20 <_realloc_r>:
 800dc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc24:	4680      	mov	r8, r0
 800dc26:	4615      	mov	r5, r2
 800dc28:	460c      	mov	r4, r1
 800dc2a:	b921      	cbnz	r1, 800dc36 <_realloc_r+0x16>
 800dc2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc30:	4611      	mov	r1, r2
 800dc32:	f7fd bcc3 	b.w	800b5bc <_malloc_r>
 800dc36:	b92a      	cbnz	r2, 800dc44 <_realloc_r+0x24>
 800dc38:	f7ff f9b6 	bl	800cfa8 <_free_r>
 800dc3c:	2400      	movs	r4, #0
 800dc3e:	4620      	mov	r0, r4
 800dc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc44:	f000 f841 	bl	800dcca <_malloc_usable_size_r>
 800dc48:	4285      	cmp	r5, r0
 800dc4a:	4606      	mov	r6, r0
 800dc4c:	d802      	bhi.n	800dc54 <_realloc_r+0x34>
 800dc4e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dc52:	d8f4      	bhi.n	800dc3e <_realloc_r+0x1e>
 800dc54:	4629      	mov	r1, r5
 800dc56:	4640      	mov	r0, r8
 800dc58:	f7fd fcb0 	bl	800b5bc <_malloc_r>
 800dc5c:	4607      	mov	r7, r0
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	d0ec      	beq.n	800dc3c <_realloc_r+0x1c>
 800dc62:	42b5      	cmp	r5, r6
 800dc64:	462a      	mov	r2, r5
 800dc66:	4621      	mov	r1, r4
 800dc68:	bf28      	it	cs
 800dc6a:	4632      	movcs	r2, r6
 800dc6c:	f7ff ff86 	bl	800db7c <memcpy>
 800dc70:	4621      	mov	r1, r4
 800dc72:	4640      	mov	r0, r8
 800dc74:	f7ff f998 	bl	800cfa8 <_free_r>
 800dc78:	463c      	mov	r4, r7
 800dc7a:	e7e0      	b.n	800dc3e <_realloc_r+0x1e>

0800dc7c <__ascii_wctomb>:
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	4608      	mov	r0, r1
 800dc80:	b141      	cbz	r1, 800dc94 <__ascii_wctomb+0x18>
 800dc82:	2aff      	cmp	r2, #255	@ 0xff
 800dc84:	d904      	bls.n	800dc90 <__ascii_wctomb+0x14>
 800dc86:	228a      	movs	r2, #138	@ 0x8a
 800dc88:	601a      	str	r2, [r3, #0]
 800dc8a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc8e:	4770      	bx	lr
 800dc90:	700a      	strb	r2, [r1, #0]
 800dc92:	2001      	movs	r0, #1
 800dc94:	4770      	bx	lr
	...

0800dc98 <fiprintf>:
 800dc98:	b40e      	push	{r1, r2, r3}
 800dc9a:	b503      	push	{r0, r1, lr}
 800dc9c:	4601      	mov	r1, r0
 800dc9e:	ab03      	add	r3, sp, #12
 800dca0:	4805      	ldr	r0, [pc, #20]	@ (800dcb8 <fiprintf+0x20>)
 800dca2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dca6:	6800      	ldr	r0, [r0, #0]
 800dca8:	9301      	str	r3, [sp, #4]
 800dcaa:	f000 f83f 	bl	800dd2c <_vfiprintf_r>
 800dcae:	b002      	add	sp, #8
 800dcb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcb4:	b003      	add	sp, #12
 800dcb6:	4770      	bx	lr
 800dcb8:	20000040 	.word	0x20000040

0800dcbc <abort>:
 800dcbc:	b508      	push	{r3, lr}
 800dcbe:	2006      	movs	r0, #6
 800dcc0:	f000 fa08 	bl	800e0d4 <raise>
 800dcc4:	2001      	movs	r0, #1
 800dcc6:	f7f4 f913 	bl	8001ef0 <_exit>

0800dcca <_malloc_usable_size_r>:
 800dcca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcce:	1f18      	subs	r0, r3, #4
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	bfbc      	itt	lt
 800dcd4:	580b      	ldrlt	r3, [r1, r0]
 800dcd6:	18c0      	addlt	r0, r0, r3
 800dcd8:	4770      	bx	lr

0800dcda <__sfputc_r>:
 800dcda:	6893      	ldr	r3, [r2, #8]
 800dcdc:	3b01      	subs	r3, #1
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	b410      	push	{r4}
 800dce2:	6093      	str	r3, [r2, #8]
 800dce4:	da08      	bge.n	800dcf8 <__sfputc_r+0x1e>
 800dce6:	6994      	ldr	r4, [r2, #24]
 800dce8:	42a3      	cmp	r3, r4
 800dcea:	db01      	blt.n	800dcf0 <__sfputc_r+0x16>
 800dcec:	290a      	cmp	r1, #10
 800dcee:	d103      	bne.n	800dcf8 <__sfputc_r+0x1e>
 800dcf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcf4:	f000 b932 	b.w	800df5c <__swbuf_r>
 800dcf8:	6813      	ldr	r3, [r2, #0]
 800dcfa:	1c58      	adds	r0, r3, #1
 800dcfc:	6010      	str	r0, [r2, #0]
 800dcfe:	7019      	strb	r1, [r3, #0]
 800dd00:	4608      	mov	r0, r1
 800dd02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd06:	4770      	bx	lr

0800dd08 <__sfputs_r>:
 800dd08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd0a:	4606      	mov	r6, r0
 800dd0c:	460f      	mov	r7, r1
 800dd0e:	4614      	mov	r4, r2
 800dd10:	18d5      	adds	r5, r2, r3
 800dd12:	42ac      	cmp	r4, r5
 800dd14:	d101      	bne.n	800dd1a <__sfputs_r+0x12>
 800dd16:	2000      	movs	r0, #0
 800dd18:	e007      	b.n	800dd2a <__sfputs_r+0x22>
 800dd1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd1e:	463a      	mov	r2, r7
 800dd20:	4630      	mov	r0, r6
 800dd22:	f7ff ffda 	bl	800dcda <__sfputc_r>
 800dd26:	1c43      	adds	r3, r0, #1
 800dd28:	d1f3      	bne.n	800dd12 <__sfputs_r+0xa>
 800dd2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dd2c <_vfiprintf_r>:
 800dd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd30:	460d      	mov	r5, r1
 800dd32:	b09d      	sub	sp, #116	@ 0x74
 800dd34:	4614      	mov	r4, r2
 800dd36:	4698      	mov	r8, r3
 800dd38:	4606      	mov	r6, r0
 800dd3a:	b118      	cbz	r0, 800dd44 <_vfiprintf_r+0x18>
 800dd3c:	6a03      	ldr	r3, [r0, #32]
 800dd3e:	b90b      	cbnz	r3, 800dd44 <_vfiprintf_r+0x18>
 800dd40:	f7fe f9ac 	bl	800c09c <__sinit>
 800dd44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd46:	07d9      	lsls	r1, r3, #31
 800dd48:	d405      	bmi.n	800dd56 <_vfiprintf_r+0x2a>
 800dd4a:	89ab      	ldrh	r3, [r5, #12]
 800dd4c:	059a      	lsls	r2, r3, #22
 800dd4e:	d402      	bmi.n	800dd56 <_vfiprintf_r+0x2a>
 800dd50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd52:	f7fe fad8 	bl	800c306 <__retarget_lock_acquire_recursive>
 800dd56:	89ab      	ldrh	r3, [r5, #12]
 800dd58:	071b      	lsls	r3, r3, #28
 800dd5a:	d501      	bpl.n	800dd60 <_vfiprintf_r+0x34>
 800dd5c:	692b      	ldr	r3, [r5, #16]
 800dd5e:	b99b      	cbnz	r3, 800dd88 <_vfiprintf_r+0x5c>
 800dd60:	4629      	mov	r1, r5
 800dd62:	4630      	mov	r0, r6
 800dd64:	f000 f938 	bl	800dfd8 <__swsetup_r>
 800dd68:	b170      	cbz	r0, 800dd88 <_vfiprintf_r+0x5c>
 800dd6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dd6c:	07dc      	lsls	r4, r3, #31
 800dd6e:	d504      	bpl.n	800dd7a <_vfiprintf_r+0x4e>
 800dd70:	f04f 30ff 	mov.w	r0, #4294967295
 800dd74:	b01d      	add	sp, #116	@ 0x74
 800dd76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd7a:	89ab      	ldrh	r3, [r5, #12]
 800dd7c:	0598      	lsls	r0, r3, #22
 800dd7e:	d4f7      	bmi.n	800dd70 <_vfiprintf_r+0x44>
 800dd80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dd82:	f7fe fac1 	bl	800c308 <__retarget_lock_release_recursive>
 800dd86:	e7f3      	b.n	800dd70 <_vfiprintf_r+0x44>
 800dd88:	2300      	movs	r3, #0
 800dd8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd8c:	2320      	movs	r3, #32
 800dd8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dd92:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd96:	2330      	movs	r3, #48	@ 0x30
 800dd98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800df48 <_vfiprintf_r+0x21c>
 800dd9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dda0:	f04f 0901 	mov.w	r9, #1
 800dda4:	4623      	mov	r3, r4
 800dda6:	469a      	mov	sl, r3
 800dda8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddac:	b10a      	cbz	r2, 800ddb2 <_vfiprintf_r+0x86>
 800ddae:	2a25      	cmp	r2, #37	@ 0x25
 800ddb0:	d1f9      	bne.n	800dda6 <_vfiprintf_r+0x7a>
 800ddb2:	ebba 0b04 	subs.w	fp, sl, r4
 800ddb6:	d00b      	beq.n	800ddd0 <_vfiprintf_r+0xa4>
 800ddb8:	465b      	mov	r3, fp
 800ddba:	4622      	mov	r2, r4
 800ddbc:	4629      	mov	r1, r5
 800ddbe:	4630      	mov	r0, r6
 800ddc0:	f7ff ffa2 	bl	800dd08 <__sfputs_r>
 800ddc4:	3001      	adds	r0, #1
 800ddc6:	f000 80a7 	beq.w	800df18 <_vfiprintf_r+0x1ec>
 800ddca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ddcc:	445a      	add	r2, fp
 800ddce:	9209      	str	r2, [sp, #36]	@ 0x24
 800ddd0:	f89a 3000 	ldrb.w	r3, [sl]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	f000 809f 	beq.w	800df18 <_vfiprintf_r+0x1ec>
 800ddda:	2300      	movs	r3, #0
 800dddc:	f04f 32ff 	mov.w	r2, #4294967295
 800dde0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dde4:	f10a 0a01 	add.w	sl, sl, #1
 800dde8:	9304      	str	r3, [sp, #16]
 800ddea:	9307      	str	r3, [sp, #28]
 800ddec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ddf0:	931a      	str	r3, [sp, #104]	@ 0x68
 800ddf2:	4654      	mov	r4, sl
 800ddf4:	2205      	movs	r2, #5
 800ddf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddfa:	4853      	ldr	r0, [pc, #332]	@ (800df48 <_vfiprintf_r+0x21c>)
 800ddfc:	f7f2 f9e8 	bl	80001d0 <memchr>
 800de00:	9a04      	ldr	r2, [sp, #16]
 800de02:	b9d8      	cbnz	r0, 800de3c <_vfiprintf_r+0x110>
 800de04:	06d1      	lsls	r1, r2, #27
 800de06:	bf44      	itt	mi
 800de08:	2320      	movmi	r3, #32
 800de0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de0e:	0713      	lsls	r3, r2, #28
 800de10:	bf44      	itt	mi
 800de12:	232b      	movmi	r3, #43	@ 0x2b
 800de14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de18:	f89a 3000 	ldrb.w	r3, [sl]
 800de1c:	2b2a      	cmp	r3, #42	@ 0x2a
 800de1e:	d015      	beq.n	800de4c <_vfiprintf_r+0x120>
 800de20:	9a07      	ldr	r2, [sp, #28]
 800de22:	4654      	mov	r4, sl
 800de24:	2000      	movs	r0, #0
 800de26:	f04f 0c0a 	mov.w	ip, #10
 800de2a:	4621      	mov	r1, r4
 800de2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de30:	3b30      	subs	r3, #48	@ 0x30
 800de32:	2b09      	cmp	r3, #9
 800de34:	d94b      	bls.n	800dece <_vfiprintf_r+0x1a2>
 800de36:	b1b0      	cbz	r0, 800de66 <_vfiprintf_r+0x13a>
 800de38:	9207      	str	r2, [sp, #28]
 800de3a:	e014      	b.n	800de66 <_vfiprintf_r+0x13a>
 800de3c:	eba0 0308 	sub.w	r3, r0, r8
 800de40:	fa09 f303 	lsl.w	r3, r9, r3
 800de44:	4313      	orrs	r3, r2
 800de46:	9304      	str	r3, [sp, #16]
 800de48:	46a2      	mov	sl, r4
 800de4a:	e7d2      	b.n	800ddf2 <_vfiprintf_r+0xc6>
 800de4c:	9b03      	ldr	r3, [sp, #12]
 800de4e:	1d19      	adds	r1, r3, #4
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	9103      	str	r1, [sp, #12]
 800de54:	2b00      	cmp	r3, #0
 800de56:	bfbb      	ittet	lt
 800de58:	425b      	neglt	r3, r3
 800de5a:	f042 0202 	orrlt.w	r2, r2, #2
 800de5e:	9307      	strge	r3, [sp, #28]
 800de60:	9307      	strlt	r3, [sp, #28]
 800de62:	bfb8      	it	lt
 800de64:	9204      	strlt	r2, [sp, #16]
 800de66:	7823      	ldrb	r3, [r4, #0]
 800de68:	2b2e      	cmp	r3, #46	@ 0x2e
 800de6a:	d10a      	bne.n	800de82 <_vfiprintf_r+0x156>
 800de6c:	7863      	ldrb	r3, [r4, #1]
 800de6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800de70:	d132      	bne.n	800ded8 <_vfiprintf_r+0x1ac>
 800de72:	9b03      	ldr	r3, [sp, #12]
 800de74:	1d1a      	adds	r2, r3, #4
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	9203      	str	r2, [sp, #12]
 800de7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800de7e:	3402      	adds	r4, #2
 800de80:	9305      	str	r3, [sp, #20]
 800de82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800df58 <_vfiprintf_r+0x22c>
 800de86:	7821      	ldrb	r1, [r4, #0]
 800de88:	2203      	movs	r2, #3
 800de8a:	4650      	mov	r0, sl
 800de8c:	f7f2 f9a0 	bl	80001d0 <memchr>
 800de90:	b138      	cbz	r0, 800dea2 <_vfiprintf_r+0x176>
 800de92:	9b04      	ldr	r3, [sp, #16]
 800de94:	eba0 000a 	sub.w	r0, r0, sl
 800de98:	2240      	movs	r2, #64	@ 0x40
 800de9a:	4082      	lsls	r2, r0
 800de9c:	4313      	orrs	r3, r2
 800de9e:	3401      	adds	r4, #1
 800dea0:	9304      	str	r3, [sp, #16]
 800dea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dea6:	4829      	ldr	r0, [pc, #164]	@ (800df4c <_vfiprintf_r+0x220>)
 800dea8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800deac:	2206      	movs	r2, #6
 800deae:	f7f2 f98f 	bl	80001d0 <memchr>
 800deb2:	2800      	cmp	r0, #0
 800deb4:	d03f      	beq.n	800df36 <_vfiprintf_r+0x20a>
 800deb6:	4b26      	ldr	r3, [pc, #152]	@ (800df50 <_vfiprintf_r+0x224>)
 800deb8:	bb1b      	cbnz	r3, 800df02 <_vfiprintf_r+0x1d6>
 800deba:	9b03      	ldr	r3, [sp, #12]
 800debc:	3307      	adds	r3, #7
 800debe:	f023 0307 	bic.w	r3, r3, #7
 800dec2:	3308      	adds	r3, #8
 800dec4:	9303      	str	r3, [sp, #12]
 800dec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dec8:	443b      	add	r3, r7
 800deca:	9309      	str	r3, [sp, #36]	@ 0x24
 800decc:	e76a      	b.n	800dda4 <_vfiprintf_r+0x78>
 800dece:	fb0c 3202 	mla	r2, ip, r2, r3
 800ded2:	460c      	mov	r4, r1
 800ded4:	2001      	movs	r0, #1
 800ded6:	e7a8      	b.n	800de2a <_vfiprintf_r+0xfe>
 800ded8:	2300      	movs	r3, #0
 800deda:	3401      	adds	r4, #1
 800dedc:	9305      	str	r3, [sp, #20]
 800dede:	4619      	mov	r1, r3
 800dee0:	f04f 0c0a 	mov.w	ip, #10
 800dee4:	4620      	mov	r0, r4
 800dee6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800deea:	3a30      	subs	r2, #48	@ 0x30
 800deec:	2a09      	cmp	r2, #9
 800deee:	d903      	bls.n	800def8 <_vfiprintf_r+0x1cc>
 800def0:	2b00      	cmp	r3, #0
 800def2:	d0c6      	beq.n	800de82 <_vfiprintf_r+0x156>
 800def4:	9105      	str	r1, [sp, #20]
 800def6:	e7c4      	b.n	800de82 <_vfiprintf_r+0x156>
 800def8:	fb0c 2101 	mla	r1, ip, r1, r2
 800defc:	4604      	mov	r4, r0
 800defe:	2301      	movs	r3, #1
 800df00:	e7f0      	b.n	800dee4 <_vfiprintf_r+0x1b8>
 800df02:	ab03      	add	r3, sp, #12
 800df04:	9300      	str	r3, [sp, #0]
 800df06:	462a      	mov	r2, r5
 800df08:	4b12      	ldr	r3, [pc, #72]	@ (800df54 <_vfiprintf_r+0x228>)
 800df0a:	a904      	add	r1, sp, #16
 800df0c:	4630      	mov	r0, r6
 800df0e:	f7fd fc81 	bl	800b814 <_printf_float>
 800df12:	4607      	mov	r7, r0
 800df14:	1c78      	adds	r0, r7, #1
 800df16:	d1d6      	bne.n	800dec6 <_vfiprintf_r+0x19a>
 800df18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df1a:	07d9      	lsls	r1, r3, #31
 800df1c:	d405      	bmi.n	800df2a <_vfiprintf_r+0x1fe>
 800df1e:	89ab      	ldrh	r3, [r5, #12]
 800df20:	059a      	lsls	r2, r3, #22
 800df22:	d402      	bmi.n	800df2a <_vfiprintf_r+0x1fe>
 800df24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df26:	f7fe f9ef 	bl	800c308 <__retarget_lock_release_recursive>
 800df2a:	89ab      	ldrh	r3, [r5, #12]
 800df2c:	065b      	lsls	r3, r3, #25
 800df2e:	f53f af1f 	bmi.w	800dd70 <_vfiprintf_r+0x44>
 800df32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df34:	e71e      	b.n	800dd74 <_vfiprintf_r+0x48>
 800df36:	ab03      	add	r3, sp, #12
 800df38:	9300      	str	r3, [sp, #0]
 800df3a:	462a      	mov	r2, r5
 800df3c:	4b05      	ldr	r3, [pc, #20]	@ (800df54 <_vfiprintf_r+0x228>)
 800df3e:	a904      	add	r1, sp, #16
 800df40:	4630      	mov	r0, r6
 800df42:	f7fd feff 	bl	800bd44 <_printf_i>
 800df46:	e7e4      	b.n	800df12 <_vfiprintf_r+0x1e6>
 800df48:	0800f3c0 	.word	0x0800f3c0
 800df4c:	0800f3ca 	.word	0x0800f3ca
 800df50:	0800b815 	.word	0x0800b815
 800df54:	0800dd09 	.word	0x0800dd09
 800df58:	0800f3c6 	.word	0x0800f3c6

0800df5c <__swbuf_r>:
 800df5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df5e:	460e      	mov	r6, r1
 800df60:	4614      	mov	r4, r2
 800df62:	4605      	mov	r5, r0
 800df64:	b118      	cbz	r0, 800df6e <__swbuf_r+0x12>
 800df66:	6a03      	ldr	r3, [r0, #32]
 800df68:	b90b      	cbnz	r3, 800df6e <__swbuf_r+0x12>
 800df6a:	f7fe f897 	bl	800c09c <__sinit>
 800df6e:	69a3      	ldr	r3, [r4, #24]
 800df70:	60a3      	str	r3, [r4, #8]
 800df72:	89a3      	ldrh	r3, [r4, #12]
 800df74:	071a      	lsls	r2, r3, #28
 800df76:	d501      	bpl.n	800df7c <__swbuf_r+0x20>
 800df78:	6923      	ldr	r3, [r4, #16]
 800df7a:	b943      	cbnz	r3, 800df8e <__swbuf_r+0x32>
 800df7c:	4621      	mov	r1, r4
 800df7e:	4628      	mov	r0, r5
 800df80:	f000 f82a 	bl	800dfd8 <__swsetup_r>
 800df84:	b118      	cbz	r0, 800df8e <__swbuf_r+0x32>
 800df86:	f04f 37ff 	mov.w	r7, #4294967295
 800df8a:	4638      	mov	r0, r7
 800df8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df8e:	6823      	ldr	r3, [r4, #0]
 800df90:	6922      	ldr	r2, [r4, #16]
 800df92:	1a98      	subs	r0, r3, r2
 800df94:	6963      	ldr	r3, [r4, #20]
 800df96:	b2f6      	uxtb	r6, r6
 800df98:	4283      	cmp	r3, r0
 800df9a:	4637      	mov	r7, r6
 800df9c:	dc05      	bgt.n	800dfaa <__swbuf_r+0x4e>
 800df9e:	4621      	mov	r1, r4
 800dfa0:	4628      	mov	r0, r5
 800dfa2:	f7ff fda9 	bl	800daf8 <_fflush_r>
 800dfa6:	2800      	cmp	r0, #0
 800dfa8:	d1ed      	bne.n	800df86 <__swbuf_r+0x2a>
 800dfaa:	68a3      	ldr	r3, [r4, #8]
 800dfac:	3b01      	subs	r3, #1
 800dfae:	60a3      	str	r3, [r4, #8]
 800dfb0:	6823      	ldr	r3, [r4, #0]
 800dfb2:	1c5a      	adds	r2, r3, #1
 800dfb4:	6022      	str	r2, [r4, #0]
 800dfb6:	701e      	strb	r6, [r3, #0]
 800dfb8:	6962      	ldr	r2, [r4, #20]
 800dfba:	1c43      	adds	r3, r0, #1
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d004      	beq.n	800dfca <__swbuf_r+0x6e>
 800dfc0:	89a3      	ldrh	r3, [r4, #12]
 800dfc2:	07db      	lsls	r3, r3, #31
 800dfc4:	d5e1      	bpl.n	800df8a <__swbuf_r+0x2e>
 800dfc6:	2e0a      	cmp	r6, #10
 800dfc8:	d1df      	bne.n	800df8a <__swbuf_r+0x2e>
 800dfca:	4621      	mov	r1, r4
 800dfcc:	4628      	mov	r0, r5
 800dfce:	f7ff fd93 	bl	800daf8 <_fflush_r>
 800dfd2:	2800      	cmp	r0, #0
 800dfd4:	d0d9      	beq.n	800df8a <__swbuf_r+0x2e>
 800dfd6:	e7d6      	b.n	800df86 <__swbuf_r+0x2a>

0800dfd8 <__swsetup_r>:
 800dfd8:	b538      	push	{r3, r4, r5, lr}
 800dfda:	4b29      	ldr	r3, [pc, #164]	@ (800e080 <__swsetup_r+0xa8>)
 800dfdc:	4605      	mov	r5, r0
 800dfde:	6818      	ldr	r0, [r3, #0]
 800dfe0:	460c      	mov	r4, r1
 800dfe2:	b118      	cbz	r0, 800dfec <__swsetup_r+0x14>
 800dfe4:	6a03      	ldr	r3, [r0, #32]
 800dfe6:	b90b      	cbnz	r3, 800dfec <__swsetup_r+0x14>
 800dfe8:	f7fe f858 	bl	800c09c <__sinit>
 800dfec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dff0:	0719      	lsls	r1, r3, #28
 800dff2:	d422      	bmi.n	800e03a <__swsetup_r+0x62>
 800dff4:	06da      	lsls	r2, r3, #27
 800dff6:	d407      	bmi.n	800e008 <__swsetup_r+0x30>
 800dff8:	2209      	movs	r2, #9
 800dffa:	602a      	str	r2, [r5, #0]
 800dffc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e000:	81a3      	strh	r3, [r4, #12]
 800e002:	f04f 30ff 	mov.w	r0, #4294967295
 800e006:	e033      	b.n	800e070 <__swsetup_r+0x98>
 800e008:	0758      	lsls	r0, r3, #29
 800e00a:	d512      	bpl.n	800e032 <__swsetup_r+0x5a>
 800e00c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e00e:	b141      	cbz	r1, 800e022 <__swsetup_r+0x4a>
 800e010:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e014:	4299      	cmp	r1, r3
 800e016:	d002      	beq.n	800e01e <__swsetup_r+0x46>
 800e018:	4628      	mov	r0, r5
 800e01a:	f7fe ffc5 	bl	800cfa8 <_free_r>
 800e01e:	2300      	movs	r3, #0
 800e020:	6363      	str	r3, [r4, #52]	@ 0x34
 800e022:	89a3      	ldrh	r3, [r4, #12]
 800e024:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e028:	81a3      	strh	r3, [r4, #12]
 800e02a:	2300      	movs	r3, #0
 800e02c:	6063      	str	r3, [r4, #4]
 800e02e:	6923      	ldr	r3, [r4, #16]
 800e030:	6023      	str	r3, [r4, #0]
 800e032:	89a3      	ldrh	r3, [r4, #12]
 800e034:	f043 0308 	orr.w	r3, r3, #8
 800e038:	81a3      	strh	r3, [r4, #12]
 800e03a:	6923      	ldr	r3, [r4, #16]
 800e03c:	b94b      	cbnz	r3, 800e052 <__swsetup_r+0x7a>
 800e03e:	89a3      	ldrh	r3, [r4, #12]
 800e040:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e048:	d003      	beq.n	800e052 <__swsetup_r+0x7a>
 800e04a:	4621      	mov	r1, r4
 800e04c:	4628      	mov	r0, r5
 800e04e:	f000 f883 	bl	800e158 <__smakebuf_r>
 800e052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e056:	f013 0201 	ands.w	r2, r3, #1
 800e05a:	d00a      	beq.n	800e072 <__swsetup_r+0x9a>
 800e05c:	2200      	movs	r2, #0
 800e05e:	60a2      	str	r2, [r4, #8]
 800e060:	6962      	ldr	r2, [r4, #20]
 800e062:	4252      	negs	r2, r2
 800e064:	61a2      	str	r2, [r4, #24]
 800e066:	6922      	ldr	r2, [r4, #16]
 800e068:	b942      	cbnz	r2, 800e07c <__swsetup_r+0xa4>
 800e06a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e06e:	d1c5      	bne.n	800dffc <__swsetup_r+0x24>
 800e070:	bd38      	pop	{r3, r4, r5, pc}
 800e072:	0799      	lsls	r1, r3, #30
 800e074:	bf58      	it	pl
 800e076:	6962      	ldrpl	r2, [r4, #20]
 800e078:	60a2      	str	r2, [r4, #8]
 800e07a:	e7f4      	b.n	800e066 <__swsetup_r+0x8e>
 800e07c:	2000      	movs	r0, #0
 800e07e:	e7f7      	b.n	800e070 <__swsetup_r+0x98>
 800e080:	20000040 	.word	0x20000040

0800e084 <_raise_r>:
 800e084:	291f      	cmp	r1, #31
 800e086:	b538      	push	{r3, r4, r5, lr}
 800e088:	4605      	mov	r5, r0
 800e08a:	460c      	mov	r4, r1
 800e08c:	d904      	bls.n	800e098 <_raise_r+0x14>
 800e08e:	2316      	movs	r3, #22
 800e090:	6003      	str	r3, [r0, #0]
 800e092:	f04f 30ff 	mov.w	r0, #4294967295
 800e096:	bd38      	pop	{r3, r4, r5, pc}
 800e098:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e09a:	b112      	cbz	r2, 800e0a2 <_raise_r+0x1e>
 800e09c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e0a0:	b94b      	cbnz	r3, 800e0b6 <_raise_r+0x32>
 800e0a2:	4628      	mov	r0, r5
 800e0a4:	f000 f830 	bl	800e108 <_getpid_r>
 800e0a8:	4622      	mov	r2, r4
 800e0aa:	4601      	mov	r1, r0
 800e0ac:	4628      	mov	r0, r5
 800e0ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0b2:	f000 b817 	b.w	800e0e4 <_kill_r>
 800e0b6:	2b01      	cmp	r3, #1
 800e0b8:	d00a      	beq.n	800e0d0 <_raise_r+0x4c>
 800e0ba:	1c59      	adds	r1, r3, #1
 800e0bc:	d103      	bne.n	800e0c6 <_raise_r+0x42>
 800e0be:	2316      	movs	r3, #22
 800e0c0:	6003      	str	r3, [r0, #0]
 800e0c2:	2001      	movs	r0, #1
 800e0c4:	e7e7      	b.n	800e096 <_raise_r+0x12>
 800e0c6:	2100      	movs	r1, #0
 800e0c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e0cc:	4620      	mov	r0, r4
 800e0ce:	4798      	blx	r3
 800e0d0:	2000      	movs	r0, #0
 800e0d2:	e7e0      	b.n	800e096 <_raise_r+0x12>

0800e0d4 <raise>:
 800e0d4:	4b02      	ldr	r3, [pc, #8]	@ (800e0e0 <raise+0xc>)
 800e0d6:	4601      	mov	r1, r0
 800e0d8:	6818      	ldr	r0, [r3, #0]
 800e0da:	f7ff bfd3 	b.w	800e084 <_raise_r>
 800e0de:	bf00      	nop
 800e0e0:	20000040 	.word	0x20000040

0800e0e4 <_kill_r>:
 800e0e4:	b538      	push	{r3, r4, r5, lr}
 800e0e6:	4d07      	ldr	r5, [pc, #28]	@ (800e104 <_kill_r+0x20>)
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	4604      	mov	r4, r0
 800e0ec:	4608      	mov	r0, r1
 800e0ee:	4611      	mov	r1, r2
 800e0f0:	602b      	str	r3, [r5, #0]
 800e0f2:	f7f3 feed 	bl	8001ed0 <_kill>
 800e0f6:	1c43      	adds	r3, r0, #1
 800e0f8:	d102      	bne.n	800e100 <_kill_r+0x1c>
 800e0fa:	682b      	ldr	r3, [r5, #0]
 800e0fc:	b103      	cbz	r3, 800e100 <_kill_r+0x1c>
 800e0fe:	6023      	str	r3, [r4, #0]
 800e100:	bd38      	pop	{r3, r4, r5, pc}
 800e102:	bf00      	nop
 800e104:	200018cc 	.word	0x200018cc

0800e108 <_getpid_r>:
 800e108:	f7f3 beda 	b.w	8001ec0 <_getpid>

0800e10c <__swhatbuf_r>:
 800e10c:	b570      	push	{r4, r5, r6, lr}
 800e10e:	460c      	mov	r4, r1
 800e110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e114:	2900      	cmp	r1, #0
 800e116:	b096      	sub	sp, #88	@ 0x58
 800e118:	4615      	mov	r5, r2
 800e11a:	461e      	mov	r6, r3
 800e11c:	da0d      	bge.n	800e13a <__swhatbuf_r+0x2e>
 800e11e:	89a3      	ldrh	r3, [r4, #12]
 800e120:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e124:	f04f 0100 	mov.w	r1, #0
 800e128:	bf14      	ite	ne
 800e12a:	2340      	movne	r3, #64	@ 0x40
 800e12c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e130:	2000      	movs	r0, #0
 800e132:	6031      	str	r1, [r6, #0]
 800e134:	602b      	str	r3, [r5, #0]
 800e136:	b016      	add	sp, #88	@ 0x58
 800e138:	bd70      	pop	{r4, r5, r6, pc}
 800e13a:	466a      	mov	r2, sp
 800e13c:	f000 f848 	bl	800e1d0 <_fstat_r>
 800e140:	2800      	cmp	r0, #0
 800e142:	dbec      	blt.n	800e11e <__swhatbuf_r+0x12>
 800e144:	9901      	ldr	r1, [sp, #4]
 800e146:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e14a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e14e:	4259      	negs	r1, r3
 800e150:	4159      	adcs	r1, r3
 800e152:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e156:	e7eb      	b.n	800e130 <__swhatbuf_r+0x24>

0800e158 <__smakebuf_r>:
 800e158:	898b      	ldrh	r3, [r1, #12]
 800e15a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e15c:	079d      	lsls	r5, r3, #30
 800e15e:	4606      	mov	r6, r0
 800e160:	460c      	mov	r4, r1
 800e162:	d507      	bpl.n	800e174 <__smakebuf_r+0x1c>
 800e164:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e168:	6023      	str	r3, [r4, #0]
 800e16a:	6123      	str	r3, [r4, #16]
 800e16c:	2301      	movs	r3, #1
 800e16e:	6163      	str	r3, [r4, #20]
 800e170:	b003      	add	sp, #12
 800e172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e174:	ab01      	add	r3, sp, #4
 800e176:	466a      	mov	r2, sp
 800e178:	f7ff ffc8 	bl	800e10c <__swhatbuf_r>
 800e17c:	9f00      	ldr	r7, [sp, #0]
 800e17e:	4605      	mov	r5, r0
 800e180:	4639      	mov	r1, r7
 800e182:	4630      	mov	r0, r6
 800e184:	f7fd fa1a 	bl	800b5bc <_malloc_r>
 800e188:	b948      	cbnz	r0, 800e19e <__smakebuf_r+0x46>
 800e18a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e18e:	059a      	lsls	r2, r3, #22
 800e190:	d4ee      	bmi.n	800e170 <__smakebuf_r+0x18>
 800e192:	f023 0303 	bic.w	r3, r3, #3
 800e196:	f043 0302 	orr.w	r3, r3, #2
 800e19a:	81a3      	strh	r3, [r4, #12]
 800e19c:	e7e2      	b.n	800e164 <__smakebuf_r+0xc>
 800e19e:	89a3      	ldrh	r3, [r4, #12]
 800e1a0:	6020      	str	r0, [r4, #0]
 800e1a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1a6:	81a3      	strh	r3, [r4, #12]
 800e1a8:	9b01      	ldr	r3, [sp, #4]
 800e1aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e1ae:	b15b      	cbz	r3, 800e1c8 <__smakebuf_r+0x70>
 800e1b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1b4:	4630      	mov	r0, r6
 800e1b6:	f000 f81d 	bl	800e1f4 <_isatty_r>
 800e1ba:	b128      	cbz	r0, 800e1c8 <__smakebuf_r+0x70>
 800e1bc:	89a3      	ldrh	r3, [r4, #12]
 800e1be:	f023 0303 	bic.w	r3, r3, #3
 800e1c2:	f043 0301 	orr.w	r3, r3, #1
 800e1c6:	81a3      	strh	r3, [r4, #12]
 800e1c8:	89a3      	ldrh	r3, [r4, #12]
 800e1ca:	431d      	orrs	r5, r3
 800e1cc:	81a5      	strh	r5, [r4, #12]
 800e1ce:	e7cf      	b.n	800e170 <__smakebuf_r+0x18>

0800e1d0 <_fstat_r>:
 800e1d0:	b538      	push	{r3, r4, r5, lr}
 800e1d2:	4d07      	ldr	r5, [pc, #28]	@ (800e1f0 <_fstat_r+0x20>)
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	4604      	mov	r4, r0
 800e1d8:	4608      	mov	r0, r1
 800e1da:	4611      	mov	r1, r2
 800e1dc:	602b      	str	r3, [r5, #0]
 800e1de:	f7f3 fed7 	bl	8001f90 <_fstat>
 800e1e2:	1c43      	adds	r3, r0, #1
 800e1e4:	d102      	bne.n	800e1ec <_fstat_r+0x1c>
 800e1e6:	682b      	ldr	r3, [r5, #0]
 800e1e8:	b103      	cbz	r3, 800e1ec <_fstat_r+0x1c>
 800e1ea:	6023      	str	r3, [r4, #0]
 800e1ec:	bd38      	pop	{r3, r4, r5, pc}
 800e1ee:	bf00      	nop
 800e1f0:	200018cc 	.word	0x200018cc

0800e1f4 <_isatty_r>:
 800e1f4:	b538      	push	{r3, r4, r5, lr}
 800e1f6:	4d06      	ldr	r5, [pc, #24]	@ (800e210 <_isatty_r+0x1c>)
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	4608      	mov	r0, r1
 800e1fe:	602b      	str	r3, [r5, #0]
 800e200:	f7f3 fed6 	bl	8001fb0 <_isatty>
 800e204:	1c43      	adds	r3, r0, #1
 800e206:	d102      	bne.n	800e20e <_isatty_r+0x1a>
 800e208:	682b      	ldr	r3, [r5, #0]
 800e20a:	b103      	cbz	r3, 800e20e <_isatty_r+0x1a>
 800e20c:	6023      	str	r3, [r4, #0]
 800e20e:	bd38      	pop	{r3, r4, r5, pc}
 800e210:	200018cc 	.word	0x200018cc

0800e214 <pow>:
 800e214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e216:	ed2d 8b02 	vpush	{d8}
 800e21a:	eeb0 8a40 	vmov.f32	s16, s0
 800e21e:	eef0 8a60 	vmov.f32	s17, s1
 800e222:	ec55 4b11 	vmov	r4, r5, d1
 800e226:	f000 f873 	bl	800e310 <__ieee754_pow>
 800e22a:	4622      	mov	r2, r4
 800e22c:	462b      	mov	r3, r5
 800e22e:	4620      	mov	r0, r4
 800e230:	4629      	mov	r1, r5
 800e232:	ec57 6b10 	vmov	r6, r7, d0
 800e236:	f7f2 fc79 	bl	8000b2c <__aeabi_dcmpun>
 800e23a:	2800      	cmp	r0, #0
 800e23c:	d13b      	bne.n	800e2b6 <pow+0xa2>
 800e23e:	ec51 0b18 	vmov	r0, r1, d8
 800e242:	2200      	movs	r2, #0
 800e244:	2300      	movs	r3, #0
 800e246:	f7f2 fc3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e24a:	b1b8      	cbz	r0, 800e27c <pow+0x68>
 800e24c:	2200      	movs	r2, #0
 800e24e:	2300      	movs	r3, #0
 800e250:	4620      	mov	r0, r4
 800e252:	4629      	mov	r1, r5
 800e254:	f7f2 fc38 	bl	8000ac8 <__aeabi_dcmpeq>
 800e258:	2800      	cmp	r0, #0
 800e25a:	d146      	bne.n	800e2ea <pow+0xd6>
 800e25c:	ec45 4b10 	vmov	d0, r4, r5
 800e260:	f000 f848 	bl	800e2f4 <finite>
 800e264:	b338      	cbz	r0, 800e2b6 <pow+0xa2>
 800e266:	2200      	movs	r2, #0
 800e268:	2300      	movs	r3, #0
 800e26a:	4620      	mov	r0, r4
 800e26c:	4629      	mov	r1, r5
 800e26e:	f7f2 fc35 	bl	8000adc <__aeabi_dcmplt>
 800e272:	b300      	cbz	r0, 800e2b6 <pow+0xa2>
 800e274:	f7fe f81c 	bl	800c2b0 <__errno>
 800e278:	2322      	movs	r3, #34	@ 0x22
 800e27a:	e01b      	b.n	800e2b4 <pow+0xa0>
 800e27c:	ec47 6b10 	vmov	d0, r6, r7
 800e280:	f000 f838 	bl	800e2f4 <finite>
 800e284:	b9e0      	cbnz	r0, 800e2c0 <pow+0xac>
 800e286:	eeb0 0a48 	vmov.f32	s0, s16
 800e28a:	eef0 0a68 	vmov.f32	s1, s17
 800e28e:	f000 f831 	bl	800e2f4 <finite>
 800e292:	b1a8      	cbz	r0, 800e2c0 <pow+0xac>
 800e294:	ec45 4b10 	vmov	d0, r4, r5
 800e298:	f000 f82c 	bl	800e2f4 <finite>
 800e29c:	b180      	cbz	r0, 800e2c0 <pow+0xac>
 800e29e:	4632      	mov	r2, r6
 800e2a0:	463b      	mov	r3, r7
 800e2a2:	4630      	mov	r0, r6
 800e2a4:	4639      	mov	r1, r7
 800e2a6:	f7f2 fc41 	bl	8000b2c <__aeabi_dcmpun>
 800e2aa:	2800      	cmp	r0, #0
 800e2ac:	d0e2      	beq.n	800e274 <pow+0x60>
 800e2ae:	f7fd ffff 	bl	800c2b0 <__errno>
 800e2b2:	2321      	movs	r3, #33	@ 0x21
 800e2b4:	6003      	str	r3, [r0, #0]
 800e2b6:	ecbd 8b02 	vpop	{d8}
 800e2ba:	ec47 6b10 	vmov	d0, r6, r7
 800e2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	4630      	mov	r0, r6
 800e2c6:	4639      	mov	r1, r7
 800e2c8:	f7f2 fbfe 	bl	8000ac8 <__aeabi_dcmpeq>
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	d0f2      	beq.n	800e2b6 <pow+0xa2>
 800e2d0:	eeb0 0a48 	vmov.f32	s0, s16
 800e2d4:	eef0 0a68 	vmov.f32	s1, s17
 800e2d8:	f000 f80c 	bl	800e2f4 <finite>
 800e2dc:	2800      	cmp	r0, #0
 800e2de:	d0ea      	beq.n	800e2b6 <pow+0xa2>
 800e2e0:	ec45 4b10 	vmov	d0, r4, r5
 800e2e4:	f000 f806 	bl	800e2f4 <finite>
 800e2e8:	e7c3      	b.n	800e272 <pow+0x5e>
 800e2ea:	4f01      	ldr	r7, [pc, #4]	@ (800e2f0 <pow+0xdc>)
 800e2ec:	2600      	movs	r6, #0
 800e2ee:	e7e2      	b.n	800e2b6 <pow+0xa2>
 800e2f0:	3ff00000 	.word	0x3ff00000

0800e2f4 <finite>:
 800e2f4:	b082      	sub	sp, #8
 800e2f6:	ed8d 0b00 	vstr	d0, [sp]
 800e2fa:	9801      	ldr	r0, [sp, #4]
 800e2fc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800e300:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800e304:	0fc0      	lsrs	r0, r0, #31
 800e306:	b002      	add	sp, #8
 800e308:	4770      	bx	lr
 800e30a:	0000      	movs	r0, r0
 800e30c:	0000      	movs	r0, r0
	...

0800e310 <__ieee754_pow>:
 800e310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e314:	b091      	sub	sp, #68	@ 0x44
 800e316:	ed8d 1b00 	vstr	d1, [sp]
 800e31a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800e31e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800e322:	ea5a 0001 	orrs.w	r0, sl, r1
 800e326:	ec57 6b10 	vmov	r6, r7, d0
 800e32a:	d113      	bne.n	800e354 <__ieee754_pow+0x44>
 800e32c:	19b3      	adds	r3, r6, r6
 800e32e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800e332:	4152      	adcs	r2, r2
 800e334:	4298      	cmp	r0, r3
 800e336:	4b98      	ldr	r3, [pc, #608]	@ (800e598 <__ieee754_pow+0x288>)
 800e338:	4193      	sbcs	r3, r2
 800e33a:	f080 84ea 	bcs.w	800ed12 <__ieee754_pow+0xa02>
 800e33e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e342:	4630      	mov	r0, r6
 800e344:	4639      	mov	r1, r7
 800e346:	f7f1 ffa1 	bl	800028c <__adddf3>
 800e34a:	ec41 0b10 	vmov	d0, r0, r1
 800e34e:	b011      	add	sp, #68	@ 0x44
 800e350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e354:	4a91      	ldr	r2, [pc, #580]	@ (800e59c <__ieee754_pow+0x28c>)
 800e356:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e35a:	4590      	cmp	r8, r2
 800e35c:	463d      	mov	r5, r7
 800e35e:	4633      	mov	r3, r6
 800e360:	d806      	bhi.n	800e370 <__ieee754_pow+0x60>
 800e362:	d101      	bne.n	800e368 <__ieee754_pow+0x58>
 800e364:	2e00      	cmp	r6, #0
 800e366:	d1ea      	bne.n	800e33e <__ieee754_pow+0x2e>
 800e368:	4592      	cmp	sl, r2
 800e36a:	d801      	bhi.n	800e370 <__ieee754_pow+0x60>
 800e36c:	d10e      	bne.n	800e38c <__ieee754_pow+0x7c>
 800e36e:	b169      	cbz	r1, 800e38c <__ieee754_pow+0x7c>
 800e370:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800e374:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800e378:	431d      	orrs	r5, r3
 800e37a:	d1e0      	bne.n	800e33e <__ieee754_pow+0x2e>
 800e37c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e380:	18db      	adds	r3, r3, r3
 800e382:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800e386:	4152      	adcs	r2, r2
 800e388:	429d      	cmp	r5, r3
 800e38a:	e7d4      	b.n	800e336 <__ieee754_pow+0x26>
 800e38c:	2d00      	cmp	r5, #0
 800e38e:	46c3      	mov	fp, r8
 800e390:	da3a      	bge.n	800e408 <__ieee754_pow+0xf8>
 800e392:	4a83      	ldr	r2, [pc, #524]	@ (800e5a0 <__ieee754_pow+0x290>)
 800e394:	4592      	cmp	sl, r2
 800e396:	d84d      	bhi.n	800e434 <__ieee754_pow+0x124>
 800e398:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800e39c:	4592      	cmp	sl, r2
 800e39e:	f240 84c7 	bls.w	800ed30 <__ieee754_pow+0xa20>
 800e3a2:	ea4f 522a 	mov.w	r2, sl, asr #20
 800e3a6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800e3aa:	2a14      	cmp	r2, #20
 800e3ac:	dd0f      	ble.n	800e3ce <__ieee754_pow+0xbe>
 800e3ae:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800e3b2:	fa21 f402 	lsr.w	r4, r1, r2
 800e3b6:	fa04 f202 	lsl.w	r2, r4, r2
 800e3ba:	428a      	cmp	r2, r1
 800e3bc:	f040 84b8 	bne.w	800ed30 <__ieee754_pow+0xa20>
 800e3c0:	f004 0401 	and.w	r4, r4, #1
 800e3c4:	f1c4 0402 	rsb	r4, r4, #2
 800e3c8:	2900      	cmp	r1, #0
 800e3ca:	d158      	bne.n	800e47e <__ieee754_pow+0x16e>
 800e3cc:	e00e      	b.n	800e3ec <__ieee754_pow+0xdc>
 800e3ce:	2900      	cmp	r1, #0
 800e3d0:	d154      	bne.n	800e47c <__ieee754_pow+0x16c>
 800e3d2:	f1c2 0214 	rsb	r2, r2, #20
 800e3d6:	fa4a f402 	asr.w	r4, sl, r2
 800e3da:	fa04 f202 	lsl.w	r2, r4, r2
 800e3de:	4552      	cmp	r2, sl
 800e3e0:	f040 84a3 	bne.w	800ed2a <__ieee754_pow+0xa1a>
 800e3e4:	f004 0401 	and.w	r4, r4, #1
 800e3e8:	f1c4 0402 	rsb	r4, r4, #2
 800e3ec:	4a6d      	ldr	r2, [pc, #436]	@ (800e5a4 <__ieee754_pow+0x294>)
 800e3ee:	4592      	cmp	sl, r2
 800e3f0:	d12e      	bne.n	800e450 <__ieee754_pow+0x140>
 800e3f2:	f1b9 0f00 	cmp.w	r9, #0
 800e3f6:	f280 8494 	bge.w	800ed22 <__ieee754_pow+0xa12>
 800e3fa:	496a      	ldr	r1, [pc, #424]	@ (800e5a4 <__ieee754_pow+0x294>)
 800e3fc:	4632      	mov	r2, r6
 800e3fe:	463b      	mov	r3, r7
 800e400:	2000      	movs	r0, #0
 800e402:	f7f2 fa23 	bl	800084c <__aeabi_ddiv>
 800e406:	e7a0      	b.n	800e34a <__ieee754_pow+0x3a>
 800e408:	2400      	movs	r4, #0
 800e40a:	bbc1      	cbnz	r1, 800e47e <__ieee754_pow+0x16e>
 800e40c:	4a63      	ldr	r2, [pc, #396]	@ (800e59c <__ieee754_pow+0x28c>)
 800e40e:	4592      	cmp	sl, r2
 800e410:	d1ec      	bne.n	800e3ec <__ieee754_pow+0xdc>
 800e412:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800e416:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800e41a:	431a      	orrs	r2, r3
 800e41c:	f000 8479 	beq.w	800ed12 <__ieee754_pow+0xa02>
 800e420:	4b61      	ldr	r3, [pc, #388]	@ (800e5a8 <__ieee754_pow+0x298>)
 800e422:	4598      	cmp	r8, r3
 800e424:	d908      	bls.n	800e438 <__ieee754_pow+0x128>
 800e426:	f1b9 0f00 	cmp.w	r9, #0
 800e42a:	f2c0 8476 	blt.w	800ed1a <__ieee754_pow+0xa0a>
 800e42e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e432:	e78a      	b.n	800e34a <__ieee754_pow+0x3a>
 800e434:	2402      	movs	r4, #2
 800e436:	e7e8      	b.n	800e40a <__ieee754_pow+0xfa>
 800e438:	f1b9 0f00 	cmp.w	r9, #0
 800e43c:	f04f 0000 	mov.w	r0, #0
 800e440:	f04f 0100 	mov.w	r1, #0
 800e444:	da81      	bge.n	800e34a <__ieee754_pow+0x3a>
 800e446:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e44a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e44e:	e77c      	b.n	800e34a <__ieee754_pow+0x3a>
 800e450:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800e454:	d106      	bne.n	800e464 <__ieee754_pow+0x154>
 800e456:	4632      	mov	r2, r6
 800e458:	463b      	mov	r3, r7
 800e45a:	4630      	mov	r0, r6
 800e45c:	4639      	mov	r1, r7
 800e45e:	f7f2 f8cb 	bl	80005f8 <__aeabi_dmul>
 800e462:	e772      	b.n	800e34a <__ieee754_pow+0x3a>
 800e464:	4a51      	ldr	r2, [pc, #324]	@ (800e5ac <__ieee754_pow+0x29c>)
 800e466:	4591      	cmp	r9, r2
 800e468:	d109      	bne.n	800e47e <__ieee754_pow+0x16e>
 800e46a:	2d00      	cmp	r5, #0
 800e46c:	db07      	blt.n	800e47e <__ieee754_pow+0x16e>
 800e46e:	ec47 6b10 	vmov	d0, r6, r7
 800e472:	b011      	add	sp, #68	@ 0x44
 800e474:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e478:	f000 bd52 	b.w	800ef20 <__ieee754_sqrt>
 800e47c:	2400      	movs	r4, #0
 800e47e:	ec47 6b10 	vmov	d0, r6, r7
 800e482:	9302      	str	r3, [sp, #8]
 800e484:	f000 fc88 	bl	800ed98 <fabs>
 800e488:	9b02      	ldr	r3, [sp, #8]
 800e48a:	ec51 0b10 	vmov	r0, r1, d0
 800e48e:	bb53      	cbnz	r3, 800e4e6 <__ieee754_pow+0x1d6>
 800e490:	4b44      	ldr	r3, [pc, #272]	@ (800e5a4 <__ieee754_pow+0x294>)
 800e492:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800e496:	429a      	cmp	r2, r3
 800e498:	d002      	beq.n	800e4a0 <__ieee754_pow+0x190>
 800e49a:	f1b8 0f00 	cmp.w	r8, #0
 800e49e:	d122      	bne.n	800e4e6 <__ieee754_pow+0x1d6>
 800e4a0:	f1b9 0f00 	cmp.w	r9, #0
 800e4a4:	da05      	bge.n	800e4b2 <__ieee754_pow+0x1a2>
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	460b      	mov	r3, r1
 800e4aa:	2000      	movs	r0, #0
 800e4ac:	493d      	ldr	r1, [pc, #244]	@ (800e5a4 <__ieee754_pow+0x294>)
 800e4ae:	f7f2 f9cd 	bl	800084c <__aeabi_ddiv>
 800e4b2:	2d00      	cmp	r5, #0
 800e4b4:	f6bf af49 	bge.w	800e34a <__ieee754_pow+0x3a>
 800e4b8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800e4bc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800e4c0:	ea58 0804 	orrs.w	r8, r8, r4
 800e4c4:	d108      	bne.n	800e4d8 <__ieee754_pow+0x1c8>
 800e4c6:	4602      	mov	r2, r0
 800e4c8:	460b      	mov	r3, r1
 800e4ca:	4610      	mov	r0, r2
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	f7f1 fedb 	bl	8000288 <__aeabi_dsub>
 800e4d2:	4602      	mov	r2, r0
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	e794      	b.n	800e402 <__ieee754_pow+0xf2>
 800e4d8:	2c01      	cmp	r4, #1
 800e4da:	f47f af36 	bne.w	800e34a <__ieee754_pow+0x3a>
 800e4de:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	e731      	b.n	800e34a <__ieee754_pow+0x3a>
 800e4e6:	0feb      	lsrs	r3, r5, #31
 800e4e8:	3b01      	subs	r3, #1
 800e4ea:	ea53 0204 	orrs.w	r2, r3, r4
 800e4ee:	d102      	bne.n	800e4f6 <__ieee754_pow+0x1e6>
 800e4f0:	4632      	mov	r2, r6
 800e4f2:	463b      	mov	r3, r7
 800e4f4:	e7e9      	b.n	800e4ca <__ieee754_pow+0x1ba>
 800e4f6:	3c01      	subs	r4, #1
 800e4f8:	431c      	orrs	r4, r3
 800e4fa:	d016      	beq.n	800e52a <__ieee754_pow+0x21a>
 800e4fc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800e588 <__ieee754_pow+0x278>
 800e500:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800e504:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e508:	f240 8112 	bls.w	800e730 <__ieee754_pow+0x420>
 800e50c:	4b28      	ldr	r3, [pc, #160]	@ (800e5b0 <__ieee754_pow+0x2a0>)
 800e50e:	459a      	cmp	sl, r3
 800e510:	4b25      	ldr	r3, [pc, #148]	@ (800e5a8 <__ieee754_pow+0x298>)
 800e512:	d916      	bls.n	800e542 <__ieee754_pow+0x232>
 800e514:	4598      	cmp	r8, r3
 800e516:	d80b      	bhi.n	800e530 <__ieee754_pow+0x220>
 800e518:	f1b9 0f00 	cmp.w	r9, #0
 800e51c:	da0b      	bge.n	800e536 <__ieee754_pow+0x226>
 800e51e:	2000      	movs	r0, #0
 800e520:	b011      	add	sp, #68	@ 0x44
 800e522:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e526:	f000 bcf3 	b.w	800ef10 <__math_oflow>
 800e52a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800e590 <__ieee754_pow+0x280>
 800e52e:	e7e7      	b.n	800e500 <__ieee754_pow+0x1f0>
 800e530:	f1b9 0f00 	cmp.w	r9, #0
 800e534:	dcf3      	bgt.n	800e51e <__ieee754_pow+0x20e>
 800e536:	2000      	movs	r0, #0
 800e538:	b011      	add	sp, #68	@ 0x44
 800e53a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e53e:	f000 bcdf 	b.w	800ef00 <__math_uflow>
 800e542:	4598      	cmp	r8, r3
 800e544:	d20c      	bcs.n	800e560 <__ieee754_pow+0x250>
 800e546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e54a:	2200      	movs	r2, #0
 800e54c:	2300      	movs	r3, #0
 800e54e:	f7f2 fac5 	bl	8000adc <__aeabi_dcmplt>
 800e552:	3800      	subs	r0, #0
 800e554:	bf18      	it	ne
 800e556:	2001      	movne	r0, #1
 800e558:	f1b9 0f00 	cmp.w	r9, #0
 800e55c:	daec      	bge.n	800e538 <__ieee754_pow+0x228>
 800e55e:	e7df      	b.n	800e520 <__ieee754_pow+0x210>
 800e560:	4b10      	ldr	r3, [pc, #64]	@ (800e5a4 <__ieee754_pow+0x294>)
 800e562:	4598      	cmp	r8, r3
 800e564:	f04f 0200 	mov.w	r2, #0
 800e568:	d924      	bls.n	800e5b4 <__ieee754_pow+0x2a4>
 800e56a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e56e:	2300      	movs	r3, #0
 800e570:	f7f2 fab4 	bl	8000adc <__aeabi_dcmplt>
 800e574:	3800      	subs	r0, #0
 800e576:	bf18      	it	ne
 800e578:	2001      	movne	r0, #1
 800e57a:	f1b9 0f00 	cmp.w	r9, #0
 800e57e:	dccf      	bgt.n	800e520 <__ieee754_pow+0x210>
 800e580:	e7da      	b.n	800e538 <__ieee754_pow+0x228>
 800e582:	bf00      	nop
 800e584:	f3af 8000 	nop.w
 800e588:	00000000 	.word	0x00000000
 800e58c:	3ff00000 	.word	0x3ff00000
 800e590:	00000000 	.word	0x00000000
 800e594:	bff00000 	.word	0xbff00000
 800e598:	fff00000 	.word	0xfff00000
 800e59c:	7ff00000 	.word	0x7ff00000
 800e5a0:	433fffff 	.word	0x433fffff
 800e5a4:	3ff00000 	.word	0x3ff00000
 800e5a8:	3fefffff 	.word	0x3fefffff
 800e5ac:	3fe00000 	.word	0x3fe00000
 800e5b0:	43f00000 	.word	0x43f00000
 800e5b4:	4b5a      	ldr	r3, [pc, #360]	@ (800e720 <__ieee754_pow+0x410>)
 800e5b6:	f7f1 fe67 	bl	8000288 <__aeabi_dsub>
 800e5ba:	a351      	add	r3, pc, #324	@ (adr r3, 800e700 <__ieee754_pow+0x3f0>)
 800e5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c0:	4604      	mov	r4, r0
 800e5c2:	460d      	mov	r5, r1
 800e5c4:	f7f2 f818 	bl	80005f8 <__aeabi_dmul>
 800e5c8:	a34f      	add	r3, pc, #316	@ (adr r3, 800e708 <__ieee754_pow+0x3f8>)
 800e5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ce:	4606      	mov	r6, r0
 800e5d0:	460f      	mov	r7, r1
 800e5d2:	4620      	mov	r0, r4
 800e5d4:	4629      	mov	r1, r5
 800e5d6:	f7f2 f80f 	bl	80005f8 <__aeabi_dmul>
 800e5da:	4b52      	ldr	r3, [pc, #328]	@ (800e724 <__ieee754_pow+0x414>)
 800e5dc:	4682      	mov	sl, r0
 800e5de:	468b      	mov	fp, r1
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	4620      	mov	r0, r4
 800e5e4:	4629      	mov	r1, r5
 800e5e6:	f7f2 f807 	bl	80005f8 <__aeabi_dmul>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	460b      	mov	r3, r1
 800e5ee:	a148      	add	r1, pc, #288	@ (adr r1, 800e710 <__ieee754_pow+0x400>)
 800e5f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5f4:	f7f1 fe48 	bl	8000288 <__aeabi_dsub>
 800e5f8:	4622      	mov	r2, r4
 800e5fa:	462b      	mov	r3, r5
 800e5fc:	f7f1 fffc 	bl	80005f8 <__aeabi_dmul>
 800e600:	4602      	mov	r2, r0
 800e602:	460b      	mov	r3, r1
 800e604:	2000      	movs	r0, #0
 800e606:	4948      	ldr	r1, [pc, #288]	@ (800e728 <__ieee754_pow+0x418>)
 800e608:	f7f1 fe3e 	bl	8000288 <__aeabi_dsub>
 800e60c:	4622      	mov	r2, r4
 800e60e:	4680      	mov	r8, r0
 800e610:	4689      	mov	r9, r1
 800e612:	462b      	mov	r3, r5
 800e614:	4620      	mov	r0, r4
 800e616:	4629      	mov	r1, r5
 800e618:	f7f1 ffee 	bl	80005f8 <__aeabi_dmul>
 800e61c:	4602      	mov	r2, r0
 800e61e:	460b      	mov	r3, r1
 800e620:	4640      	mov	r0, r8
 800e622:	4649      	mov	r1, r9
 800e624:	f7f1 ffe8 	bl	80005f8 <__aeabi_dmul>
 800e628:	a33b      	add	r3, pc, #236	@ (adr r3, 800e718 <__ieee754_pow+0x408>)
 800e62a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e62e:	f7f1 ffe3 	bl	80005f8 <__aeabi_dmul>
 800e632:	4602      	mov	r2, r0
 800e634:	460b      	mov	r3, r1
 800e636:	4650      	mov	r0, sl
 800e638:	4659      	mov	r1, fp
 800e63a:	f7f1 fe25 	bl	8000288 <__aeabi_dsub>
 800e63e:	4602      	mov	r2, r0
 800e640:	460b      	mov	r3, r1
 800e642:	4680      	mov	r8, r0
 800e644:	4689      	mov	r9, r1
 800e646:	4630      	mov	r0, r6
 800e648:	4639      	mov	r1, r7
 800e64a:	f7f1 fe1f 	bl	800028c <__adddf3>
 800e64e:	2400      	movs	r4, #0
 800e650:	4632      	mov	r2, r6
 800e652:	463b      	mov	r3, r7
 800e654:	4620      	mov	r0, r4
 800e656:	460d      	mov	r5, r1
 800e658:	f7f1 fe16 	bl	8000288 <__aeabi_dsub>
 800e65c:	4602      	mov	r2, r0
 800e65e:	460b      	mov	r3, r1
 800e660:	4640      	mov	r0, r8
 800e662:	4649      	mov	r1, r9
 800e664:	f7f1 fe10 	bl	8000288 <__aeabi_dsub>
 800e668:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e66c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e670:	2300      	movs	r3, #0
 800e672:	9304      	str	r3, [sp, #16]
 800e674:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e678:	4606      	mov	r6, r0
 800e67a:	460f      	mov	r7, r1
 800e67c:	4652      	mov	r2, sl
 800e67e:	465b      	mov	r3, fp
 800e680:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e684:	f7f1 fe00 	bl	8000288 <__aeabi_dsub>
 800e688:	4622      	mov	r2, r4
 800e68a:	462b      	mov	r3, r5
 800e68c:	f7f1 ffb4 	bl	80005f8 <__aeabi_dmul>
 800e690:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e694:	4680      	mov	r8, r0
 800e696:	4689      	mov	r9, r1
 800e698:	4630      	mov	r0, r6
 800e69a:	4639      	mov	r1, r7
 800e69c:	f7f1 ffac 	bl	80005f8 <__aeabi_dmul>
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	460b      	mov	r3, r1
 800e6a4:	4640      	mov	r0, r8
 800e6a6:	4649      	mov	r1, r9
 800e6a8:	f7f1 fdf0 	bl	800028c <__adddf3>
 800e6ac:	4652      	mov	r2, sl
 800e6ae:	465b      	mov	r3, fp
 800e6b0:	4606      	mov	r6, r0
 800e6b2:	460f      	mov	r7, r1
 800e6b4:	4620      	mov	r0, r4
 800e6b6:	4629      	mov	r1, r5
 800e6b8:	f7f1 ff9e 	bl	80005f8 <__aeabi_dmul>
 800e6bc:	460b      	mov	r3, r1
 800e6be:	4602      	mov	r2, r0
 800e6c0:	4680      	mov	r8, r0
 800e6c2:	4689      	mov	r9, r1
 800e6c4:	4630      	mov	r0, r6
 800e6c6:	4639      	mov	r1, r7
 800e6c8:	f7f1 fde0 	bl	800028c <__adddf3>
 800e6cc:	4b17      	ldr	r3, [pc, #92]	@ (800e72c <__ieee754_pow+0x41c>)
 800e6ce:	4299      	cmp	r1, r3
 800e6d0:	4604      	mov	r4, r0
 800e6d2:	460d      	mov	r5, r1
 800e6d4:	468a      	mov	sl, r1
 800e6d6:	468b      	mov	fp, r1
 800e6d8:	f340 82ef 	ble.w	800ecba <__ieee754_pow+0x9aa>
 800e6dc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800e6e0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800e6e4:	4303      	orrs	r3, r0
 800e6e6:	f000 81e8 	beq.w	800eaba <__ieee754_pow+0x7aa>
 800e6ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	f7f2 f9f3 	bl	8000adc <__aeabi_dcmplt>
 800e6f6:	3800      	subs	r0, #0
 800e6f8:	bf18      	it	ne
 800e6fa:	2001      	movne	r0, #1
 800e6fc:	e710      	b.n	800e520 <__ieee754_pow+0x210>
 800e6fe:	bf00      	nop
 800e700:	60000000 	.word	0x60000000
 800e704:	3ff71547 	.word	0x3ff71547
 800e708:	f85ddf44 	.word	0xf85ddf44
 800e70c:	3e54ae0b 	.word	0x3e54ae0b
 800e710:	55555555 	.word	0x55555555
 800e714:	3fd55555 	.word	0x3fd55555
 800e718:	652b82fe 	.word	0x652b82fe
 800e71c:	3ff71547 	.word	0x3ff71547
 800e720:	3ff00000 	.word	0x3ff00000
 800e724:	3fd00000 	.word	0x3fd00000
 800e728:	3fe00000 	.word	0x3fe00000
 800e72c:	408fffff 	.word	0x408fffff
 800e730:	4bd5      	ldr	r3, [pc, #852]	@ (800ea88 <__ieee754_pow+0x778>)
 800e732:	402b      	ands	r3, r5
 800e734:	2200      	movs	r2, #0
 800e736:	b92b      	cbnz	r3, 800e744 <__ieee754_pow+0x434>
 800e738:	4bd4      	ldr	r3, [pc, #848]	@ (800ea8c <__ieee754_pow+0x77c>)
 800e73a:	f7f1 ff5d 	bl	80005f8 <__aeabi_dmul>
 800e73e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800e742:	468b      	mov	fp, r1
 800e744:	ea4f 532b 	mov.w	r3, fp, asr #20
 800e748:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800e74c:	4413      	add	r3, r2
 800e74e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e750:	4bcf      	ldr	r3, [pc, #828]	@ (800ea90 <__ieee754_pow+0x780>)
 800e752:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800e756:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800e75a:	459b      	cmp	fp, r3
 800e75c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e760:	dd08      	ble.n	800e774 <__ieee754_pow+0x464>
 800e762:	4bcc      	ldr	r3, [pc, #816]	@ (800ea94 <__ieee754_pow+0x784>)
 800e764:	459b      	cmp	fp, r3
 800e766:	f340 81a5 	ble.w	800eab4 <__ieee754_pow+0x7a4>
 800e76a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e76c:	3301      	adds	r3, #1
 800e76e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e770:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800e774:	f04f 0a00 	mov.w	sl, #0
 800e778:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800e77c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e77e:	4bc6      	ldr	r3, [pc, #792]	@ (800ea98 <__ieee754_pow+0x788>)
 800e780:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e784:	ed93 7b00 	vldr	d7, [r3]
 800e788:	4629      	mov	r1, r5
 800e78a:	ec53 2b17 	vmov	r2, r3, d7
 800e78e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e792:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e796:	f7f1 fd77 	bl	8000288 <__aeabi_dsub>
 800e79a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e79e:	4606      	mov	r6, r0
 800e7a0:	460f      	mov	r7, r1
 800e7a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7a6:	f7f1 fd71 	bl	800028c <__adddf3>
 800e7aa:	4602      	mov	r2, r0
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	2000      	movs	r0, #0
 800e7b0:	49ba      	ldr	r1, [pc, #744]	@ (800ea9c <__ieee754_pow+0x78c>)
 800e7b2:	f7f2 f84b 	bl	800084c <__aeabi_ddiv>
 800e7b6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	460b      	mov	r3, r1
 800e7be:	4630      	mov	r0, r6
 800e7c0:	4639      	mov	r1, r7
 800e7c2:	f7f1 ff19 	bl	80005f8 <__aeabi_dmul>
 800e7c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e7ca:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800e7ce:	106d      	asrs	r5, r5, #1
 800e7d0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800e7d4:	f04f 0b00 	mov.w	fp, #0
 800e7d8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800e7dc:	4661      	mov	r1, ip
 800e7de:	2200      	movs	r2, #0
 800e7e0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800e7e4:	4658      	mov	r0, fp
 800e7e6:	46e1      	mov	r9, ip
 800e7e8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800e7ec:	4614      	mov	r4, r2
 800e7ee:	461d      	mov	r5, r3
 800e7f0:	f7f1 ff02 	bl	80005f8 <__aeabi_dmul>
 800e7f4:	4602      	mov	r2, r0
 800e7f6:	460b      	mov	r3, r1
 800e7f8:	4630      	mov	r0, r6
 800e7fa:	4639      	mov	r1, r7
 800e7fc:	f7f1 fd44 	bl	8000288 <__aeabi_dsub>
 800e800:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e804:	4606      	mov	r6, r0
 800e806:	460f      	mov	r7, r1
 800e808:	4620      	mov	r0, r4
 800e80a:	4629      	mov	r1, r5
 800e80c:	f7f1 fd3c 	bl	8000288 <__aeabi_dsub>
 800e810:	4602      	mov	r2, r0
 800e812:	460b      	mov	r3, r1
 800e814:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e818:	f7f1 fd36 	bl	8000288 <__aeabi_dsub>
 800e81c:	465a      	mov	r2, fp
 800e81e:	464b      	mov	r3, r9
 800e820:	f7f1 feea 	bl	80005f8 <__aeabi_dmul>
 800e824:	4602      	mov	r2, r0
 800e826:	460b      	mov	r3, r1
 800e828:	4630      	mov	r0, r6
 800e82a:	4639      	mov	r1, r7
 800e82c:	f7f1 fd2c 	bl	8000288 <__aeabi_dsub>
 800e830:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e834:	f7f1 fee0 	bl	80005f8 <__aeabi_dmul>
 800e838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e83c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e840:	4610      	mov	r0, r2
 800e842:	4619      	mov	r1, r3
 800e844:	f7f1 fed8 	bl	80005f8 <__aeabi_dmul>
 800e848:	a37d      	add	r3, pc, #500	@ (adr r3, 800ea40 <__ieee754_pow+0x730>)
 800e84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e84e:	4604      	mov	r4, r0
 800e850:	460d      	mov	r5, r1
 800e852:	f7f1 fed1 	bl	80005f8 <__aeabi_dmul>
 800e856:	a37c      	add	r3, pc, #496	@ (adr r3, 800ea48 <__ieee754_pow+0x738>)
 800e858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85c:	f7f1 fd16 	bl	800028c <__adddf3>
 800e860:	4622      	mov	r2, r4
 800e862:	462b      	mov	r3, r5
 800e864:	f7f1 fec8 	bl	80005f8 <__aeabi_dmul>
 800e868:	a379      	add	r3, pc, #484	@ (adr r3, 800ea50 <__ieee754_pow+0x740>)
 800e86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86e:	f7f1 fd0d 	bl	800028c <__adddf3>
 800e872:	4622      	mov	r2, r4
 800e874:	462b      	mov	r3, r5
 800e876:	f7f1 febf 	bl	80005f8 <__aeabi_dmul>
 800e87a:	a377      	add	r3, pc, #476	@ (adr r3, 800ea58 <__ieee754_pow+0x748>)
 800e87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e880:	f7f1 fd04 	bl	800028c <__adddf3>
 800e884:	4622      	mov	r2, r4
 800e886:	462b      	mov	r3, r5
 800e888:	f7f1 feb6 	bl	80005f8 <__aeabi_dmul>
 800e88c:	a374      	add	r3, pc, #464	@ (adr r3, 800ea60 <__ieee754_pow+0x750>)
 800e88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e892:	f7f1 fcfb 	bl	800028c <__adddf3>
 800e896:	4622      	mov	r2, r4
 800e898:	462b      	mov	r3, r5
 800e89a:	f7f1 fead 	bl	80005f8 <__aeabi_dmul>
 800e89e:	a372      	add	r3, pc, #456	@ (adr r3, 800ea68 <__ieee754_pow+0x758>)
 800e8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a4:	f7f1 fcf2 	bl	800028c <__adddf3>
 800e8a8:	4622      	mov	r2, r4
 800e8aa:	4606      	mov	r6, r0
 800e8ac:	460f      	mov	r7, r1
 800e8ae:	462b      	mov	r3, r5
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	4629      	mov	r1, r5
 800e8b4:	f7f1 fea0 	bl	80005f8 <__aeabi_dmul>
 800e8b8:	4602      	mov	r2, r0
 800e8ba:	460b      	mov	r3, r1
 800e8bc:	4630      	mov	r0, r6
 800e8be:	4639      	mov	r1, r7
 800e8c0:	f7f1 fe9a 	bl	80005f8 <__aeabi_dmul>
 800e8c4:	465a      	mov	r2, fp
 800e8c6:	4604      	mov	r4, r0
 800e8c8:	460d      	mov	r5, r1
 800e8ca:	464b      	mov	r3, r9
 800e8cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e8d0:	f7f1 fcdc 	bl	800028c <__adddf3>
 800e8d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e8d8:	f7f1 fe8e 	bl	80005f8 <__aeabi_dmul>
 800e8dc:	4622      	mov	r2, r4
 800e8de:	462b      	mov	r3, r5
 800e8e0:	f7f1 fcd4 	bl	800028c <__adddf3>
 800e8e4:	465a      	mov	r2, fp
 800e8e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e8ea:	464b      	mov	r3, r9
 800e8ec:	4658      	mov	r0, fp
 800e8ee:	4649      	mov	r1, r9
 800e8f0:	f7f1 fe82 	bl	80005f8 <__aeabi_dmul>
 800e8f4:	4b6a      	ldr	r3, [pc, #424]	@ (800eaa0 <__ieee754_pow+0x790>)
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	4606      	mov	r6, r0
 800e8fa:	460f      	mov	r7, r1
 800e8fc:	f7f1 fcc6 	bl	800028c <__adddf3>
 800e900:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e904:	f7f1 fcc2 	bl	800028c <__adddf3>
 800e908:	46d8      	mov	r8, fp
 800e90a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800e90e:	460d      	mov	r5, r1
 800e910:	465a      	mov	r2, fp
 800e912:	460b      	mov	r3, r1
 800e914:	4640      	mov	r0, r8
 800e916:	4649      	mov	r1, r9
 800e918:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800e91c:	f7f1 fe6c 	bl	80005f8 <__aeabi_dmul>
 800e920:	465c      	mov	r4, fp
 800e922:	4680      	mov	r8, r0
 800e924:	4689      	mov	r9, r1
 800e926:	4b5e      	ldr	r3, [pc, #376]	@ (800eaa0 <__ieee754_pow+0x790>)
 800e928:	2200      	movs	r2, #0
 800e92a:	4620      	mov	r0, r4
 800e92c:	4629      	mov	r1, r5
 800e92e:	f7f1 fcab 	bl	8000288 <__aeabi_dsub>
 800e932:	4632      	mov	r2, r6
 800e934:	463b      	mov	r3, r7
 800e936:	f7f1 fca7 	bl	8000288 <__aeabi_dsub>
 800e93a:	4602      	mov	r2, r0
 800e93c:	460b      	mov	r3, r1
 800e93e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e942:	f7f1 fca1 	bl	8000288 <__aeabi_dsub>
 800e946:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e94a:	f7f1 fe55 	bl	80005f8 <__aeabi_dmul>
 800e94e:	4622      	mov	r2, r4
 800e950:	4606      	mov	r6, r0
 800e952:	460f      	mov	r7, r1
 800e954:	462b      	mov	r3, r5
 800e956:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e95a:	f7f1 fe4d 	bl	80005f8 <__aeabi_dmul>
 800e95e:	4602      	mov	r2, r0
 800e960:	460b      	mov	r3, r1
 800e962:	4630      	mov	r0, r6
 800e964:	4639      	mov	r1, r7
 800e966:	f7f1 fc91 	bl	800028c <__adddf3>
 800e96a:	4606      	mov	r6, r0
 800e96c:	460f      	mov	r7, r1
 800e96e:	4602      	mov	r2, r0
 800e970:	460b      	mov	r3, r1
 800e972:	4640      	mov	r0, r8
 800e974:	4649      	mov	r1, r9
 800e976:	f7f1 fc89 	bl	800028c <__adddf3>
 800e97a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800e97e:	a33c      	add	r3, pc, #240	@ (adr r3, 800ea70 <__ieee754_pow+0x760>)
 800e980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e984:	4658      	mov	r0, fp
 800e986:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800e98a:	460d      	mov	r5, r1
 800e98c:	f7f1 fe34 	bl	80005f8 <__aeabi_dmul>
 800e990:	465c      	mov	r4, fp
 800e992:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e996:	4642      	mov	r2, r8
 800e998:	464b      	mov	r3, r9
 800e99a:	4620      	mov	r0, r4
 800e99c:	4629      	mov	r1, r5
 800e99e:	f7f1 fc73 	bl	8000288 <__aeabi_dsub>
 800e9a2:	4602      	mov	r2, r0
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	4630      	mov	r0, r6
 800e9a8:	4639      	mov	r1, r7
 800e9aa:	f7f1 fc6d 	bl	8000288 <__aeabi_dsub>
 800e9ae:	a332      	add	r3, pc, #200	@ (adr r3, 800ea78 <__ieee754_pow+0x768>)
 800e9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b4:	f7f1 fe20 	bl	80005f8 <__aeabi_dmul>
 800e9b8:	a331      	add	r3, pc, #196	@ (adr r3, 800ea80 <__ieee754_pow+0x770>)
 800e9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9be:	4606      	mov	r6, r0
 800e9c0:	460f      	mov	r7, r1
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	4629      	mov	r1, r5
 800e9c6:	f7f1 fe17 	bl	80005f8 <__aeabi_dmul>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	460b      	mov	r3, r1
 800e9ce:	4630      	mov	r0, r6
 800e9d0:	4639      	mov	r1, r7
 800e9d2:	f7f1 fc5b 	bl	800028c <__adddf3>
 800e9d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e9d8:	4b32      	ldr	r3, [pc, #200]	@ (800eaa4 <__ieee754_pow+0x794>)
 800e9da:	4413      	add	r3, r2
 800e9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e0:	f7f1 fc54 	bl	800028c <__adddf3>
 800e9e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e9e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e9ea:	f7f1 fd9b 	bl	8000524 <__aeabi_i2d>
 800e9ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e9f0:	4b2d      	ldr	r3, [pc, #180]	@ (800eaa8 <__ieee754_pow+0x798>)
 800e9f2:	4413      	add	r3, r2
 800e9f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e9f8:	4606      	mov	r6, r0
 800e9fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e9fe:	460f      	mov	r7, r1
 800ea00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea04:	f7f1 fc42 	bl	800028c <__adddf3>
 800ea08:	4642      	mov	r2, r8
 800ea0a:	464b      	mov	r3, r9
 800ea0c:	f7f1 fc3e 	bl	800028c <__adddf3>
 800ea10:	4632      	mov	r2, r6
 800ea12:	463b      	mov	r3, r7
 800ea14:	f7f1 fc3a 	bl	800028c <__adddf3>
 800ea18:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800ea1c:	4632      	mov	r2, r6
 800ea1e:	463b      	mov	r3, r7
 800ea20:	4658      	mov	r0, fp
 800ea22:	460d      	mov	r5, r1
 800ea24:	f7f1 fc30 	bl	8000288 <__aeabi_dsub>
 800ea28:	4642      	mov	r2, r8
 800ea2a:	464b      	mov	r3, r9
 800ea2c:	f7f1 fc2c 	bl	8000288 <__aeabi_dsub>
 800ea30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea34:	f7f1 fc28 	bl	8000288 <__aeabi_dsub>
 800ea38:	465c      	mov	r4, fp
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	e036      	b.n	800eaac <__ieee754_pow+0x79c>
 800ea3e:	bf00      	nop
 800ea40:	4a454eef 	.word	0x4a454eef
 800ea44:	3fca7e28 	.word	0x3fca7e28
 800ea48:	93c9db65 	.word	0x93c9db65
 800ea4c:	3fcd864a 	.word	0x3fcd864a
 800ea50:	a91d4101 	.word	0xa91d4101
 800ea54:	3fd17460 	.word	0x3fd17460
 800ea58:	518f264d 	.word	0x518f264d
 800ea5c:	3fd55555 	.word	0x3fd55555
 800ea60:	db6fabff 	.word	0xdb6fabff
 800ea64:	3fdb6db6 	.word	0x3fdb6db6
 800ea68:	33333303 	.word	0x33333303
 800ea6c:	3fe33333 	.word	0x3fe33333
 800ea70:	e0000000 	.word	0xe0000000
 800ea74:	3feec709 	.word	0x3feec709
 800ea78:	dc3a03fd 	.word	0xdc3a03fd
 800ea7c:	3feec709 	.word	0x3feec709
 800ea80:	145b01f5 	.word	0x145b01f5
 800ea84:	be3e2fe0 	.word	0xbe3e2fe0
 800ea88:	7ff00000 	.word	0x7ff00000
 800ea8c:	43400000 	.word	0x43400000
 800ea90:	0003988e 	.word	0x0003988e
 800ea94:	000bb679 	.word	0x000bb679
 800ea98:	0800f538 	.word	0x0800f538
 800ea9c:	3ff00000 	.word	0x3ff00000
 800eaa0:	40080000 	.word	0x40080000
 800eaa4:	0800f518 	.word	0x0800f518
 800eaa8:	0800f528 	.word	0x0800f528
 800eaac:	460b      	mov	r3, r1
 800eaae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eab2:	e5d7      	b.n	800e664 <__ieee754_pow+0x354>
 800eab4:	f04f 0a01 	mov.w	sl, #1
 800eab8:	e65e      	b.n	800e778 <__ieee754_pow+0x468>
 800eaba:	a3b4      	add	r3, pc, #720	@ (adr r3, 800ed8c <__ieee754_pow+0xa7c>)
 800eabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac0:	4630      	mov	r0, r6
 800eac2:	4639      	mov	r1, r7
 800eac4:	f7f1 fbe2 	bl	800028c <__adddf3>
 800eac8:	4642      	mov	r2, r8
 800eaca:	e9cd 0100 	strd	r0, r1, [sp]
 800eace:	464b      	mov	r3, r9
 800ead0:	4620      	mov	r0, r4
 800ead2:	4629      	mov	r1, r5
 800ead4:	f7f1 fbd8 	bl	8000288 <__aeabi_dsub>
 800ead8:	4602      	mov	r2, r0
 800eada:	460b      	mov	r3, r1
 800eadc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eae0:	f7f2 f81a 	bl	8000b18 <__aeabi_dcmpgt>
 800eae4:	2800      	cmp	r0, #0
 800eae6:	f47f ae00 	bne.w	800e6ea <__ieee754_pow+0x3da>
 800eaea:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800eaee:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800eaf2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800eaf6:	fa43 fa0a 	asr.w	sl, r3, sl
 800eafa:	44da      	add	sl, fp
 800eafc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800eb00:	489d      	ldr	r0, [pc, #628]	@ (800ed78 <__ieee754_pow+0xa68>)
 800eb02:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800eb06:	4108      	asrs	r0, r1
 800eb08:	ea00 030a 	and.w	r3, r0, sl
 800eb0c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800eb10:	f1c1 0114 	rsb	r1, r1, #20
 800eb14:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800eb18:	fa4a fa01 	asr.w	sl, sl, r1
 800eb1c:	f1bb 0f00 	cmp.w	fp, #0
 800eb20:	4640      	mov	r0, r8
 800eb22:	4649      	mov	r1, r9
 800eb24:	f04f 0200 	mov.w	r2, #0
 800eb28:	bfb8      	it	lt
 800eb2a:	f1ca 0a00 	rsblt	sl, sl, #0
 800eb2e:	f7f1 fbab 	bl	8000288 <__aeabi_dsub>
 800eb32:	4680      	mov	r8, r0
 800eb34:	4689      	mov	r9, r1
 800eb36:	4632      	mov	r2, r6
 800eb38:	463b      	mov	r3, r7
 800eb3a:	4640      	mov	r0, r8
 800eb3c:	4649      	mov	r1, r9
 800eb3e:	f7f1 fba5 	bl	800028c <__adddf3>
 800eb42:	2400      	movs	r4, #0
 800eb44:	a37c      	add	r3, pc, #496	@ (adr r3, 800ed38 <__ieee754_pow+0xa28>)
 800eb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	460d      	mov	r5, r1
 800eb4e:	f7f1 fd53 	bl	80005f8 <__aeabi_dmul>
 800eb52:	4642      	mov	r2, r8
 800eb54:	e9cd 0100 	strd	r0, r1, [sp]
 800eb58:	464b      	mov	r3, r9
 800eb5a:	4620      	mov	r0, r4
 800eb5c:	4629      	mov	r1, r5
 800eb5e:	f7f1 fb93 	bl	8000288 <__aeabi_dsub>
 800eb62:	4602      	mov	r2, r0
 800eb64:	460b      	mov	r3, r1
 800eb66:	4630      	mov	r0, r6
 800eb68:	4639      	mov	r1, r7
 800eb6a:	f7f1 fb8d 	bl	8000288 <__aeabi_dsub>
 800eb6e:	a374      	add	r3, pc, #464	@ (adr r3, 800ed40 <__ieee754_pow+0xa30>)
 800eb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb74:	f7f1 fd40 	bl	80005f8 <__aeabi_dmul>
 800eb78:	a373      	add	r3, pc, #460	@ (adr r3, 800ed48 <__ieee754_pow+0xa38>)
 800eb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb7e:	4680      	mov	r8, r0
 800eb80:	4689      	mov	r9, r1
 800eb82:	4620      	mov	r0, r4
 800eb84:	4629      	mov	r1, r5
 800eb86:	f7f1 fd37 	bl	80005f8 <__aeabi_dmul>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	460b      	mov	r3, r1
 800eb8e:	4640      	mov	r0, r8
 800eb90:	4649      	mov	r1, r9
 800eb92:	f7f1 fb7b 	bl	800028c <__adddf3>
 800eb96:	4604      	mov	r4, r0
 800eb98:	460d      	mov	r5, r1
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eba2:	f7f1 fb73 	bl	800028c <__adddf3>
 800eba6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ebaa:	4680      	mov	r8, r0
 800ebac:	4689      	mov	r9, r1
 800ebae:	f7f1 fb6b 	bl	8000288 <__aeabi_dsub>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	4620      	mov	r0, r4
 800ebb8:	4629      	mov	r1, r5
 800ebba:	f7f1 fb65 	bl	8000288 <__aeabi_dsub>
 800ebbe:	4642      	mov	r2, r8
 800ebc0:	4606      	mov	r6, r0
 800ebc2:	460f      	mov	r7, r1
 800ebc4:	464b      	mov	r3, r9
 800ebc6:	4640      	mov	r0, r8
 800ebc8:	4649      	mov	r1, r9
 800ebca:	f7f1 fd15 	bl	80005f8 <__aeabi_dmul>
 800ebce:	a360      	add	r3, pc, #384	@ (adr r3, 800ed50 <__ieee754_pow+0xa40>)
 800ebd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd4:	4604      	mov	r4, r0
 800ebd6:	460d      	mov	r5, r1
 800ebd8:	f7f1 fd0e 	bl	80005f8 <__aeabi_dmul>
 800ebdc:	a35e      	add	r3, pc, #376	@ (adr r3, 800ed58 <__ieee754_pow+0xa48>)
 800ebde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe2:	f7f1 fb51 	bl	8000288 <__aeabi_dsub>
 800ebe6:	4622      	mov	r2, r4
 800ebe8:	462b      	mov	r3, r5
 800ebea:	f7f1 fd05 	bl	80005f8 <__aeabi_dmul>
 800ebee:	a35c      	add	r3, pc, #368	@ (adr r3, 800ed60 <__ieee754_pow+0xa50>)
 800ebf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf4:	f7f1 fb4a 	bl	800028c <__adddf3>
 800ebf8:	4622      	mov	r2, r4
 800ebfa:	462b      	mov	r3, r5
 800ebfc:	f7f1 fcfc 	bl	80005f8 <__aeabi_dmul>
 800ec00:	a359      	add	r3, pc, #356	@ (adr r3, 800ed68 <__ieee754_pow+0xa58>)
 800ec02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec06:	f7f1 fb3f 	bl	8000288 <__aeabi_dsub>
 800ec0a:	4622      	mov	r2, r4
 800ec0c:	462b      	mov	r3, r5
 800ec0e:	f7f1 fcf3 	bl	80005f8 <__aeabi_dmul>
 800ec12:	a357      	add	r3, pc, #348	@ (adr r3, 800ed70 <__ieee754_pow+0xa60>)
 800ec14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec18:	f7f1 fb38 	bl	800028c <__adddf3>
 800ec1c:	4622      	mov	r2, r4
 800ec1e:	462b      	mov	r3, r5
 800ec20:	f7f1 fcea 	bl	80005f8 <__aeabi_dmul>
 800ec24:	4602      	mov	r2, r0
 800ec26:	460b      	mov	r3, r1
 800ec28:	4640      	mov	r0, r8
 800ec2a:	4649      	mov	r1, r9
 800ec2c:	f7f1 fb2c 	bl	8000288 <__aeabi_dsub>
 800ec30:	4604      	mov	r4, r0
 800ec32:	460d      	mov	r5, r1
 800ec34:	4602      	mov	r2, r0
 800ec36:	460b      	mov	r3, r1
 800ec38:	4640      	mov	r0, r8
 800ec3a:	4649      	mov	r1, r9
 800ec3c:	f7f1 fcdc 	bl	80005f8 <__aeabi_dmul>
 800ec40:	2200      	movs	r2, #0
 800ec42:	e9cd 0100 	strd	r0, r1, [sp]
 800ec46:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	4629      	mov	r1, r5
 800ec4e:	f7f1 fb1b 	bl	8000288 <__aeabi_dsub>
 800ec52:	4602      	mov	r2, r0
 800ec54:	460b      	mov	r3, r1
 800ec56:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec5a:	f7f1 fdf7 	bl	800084c <__aeabi_ddiv>
 800ec5e:	4632      	mov	r2, r6
 800ec60:	4604      	mov	r4, r0
 800ec62:	460d      	mov	r5, r1
 800ec64:	463b      	mov	r3, r7
 800ec66:	4640      	mov	r0, r8
 800ec68:	4649      	mov	r1, r9
 800ec6a:	f7f1 fcc5 	bl	80005f8 <__aeabi_dmul>
 800ec6e:	4632      	mov	r2, r6
 800ec70:	463b      	mov	r3, r7
 800ec72:	f7f1 fb0b 	bl	800028c <__adddf3>
 800ec76:	4602      	mov	r2, r0
 800ec78:	460b      	mov	r3, r1
 800ec7a:	4620      	mov	r0, r4
 800ec7c:	4629      	mov	r1, r5
 800ec7e:	f7f1 fb03 	bl	8000288 <__aeabi_dsub>
 800ec82:	4642      	mov	r2, r8
 800ec84:	464b      	mov	r3, r9
 800ec86:	f7f1 faff 	bl	8000288 <__aeabi_dsub>
 800ec8a:	460b      	mov	r3, r1
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	493b      	ldr	r1, [pc, #236]	@ (800ed7c <__ieee754_pow+0xa6c>)
 800ec90:	2000      	movs	r0, #0
 800ec92:	f7f1 faf9 	bl	8000288 <__aeabi_dsub>
 800ec96:	ec41 0b10 	vmov	d0, r0, r1
 800ec9a:	ee10 3a90 	vmov	r3, s1
 800ec9e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800eca2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eca6:	da30      	bge.n	800ed0a <__ieee754_pow+0x9fa>
 800eca8:	4650      	mov	r0, sl
 800ecaa:	f000 f87d 	bl	800eda8 <scalbn>
 800ecae:	ec51 0b10 	vmov	r0, r1, d0
 800ecb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ecb6:	f7ff bbd2 	b.w	800e45e <__ieee754_pow+0x14e>
 800ecba:	4c31      	ldr	r4, [pc, #196]	@ (800ed80 <__ieee754_pow+0xa70>)
 800ecbc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ecc0:	42a3      	cmp	r3, r4
 800ecc2:	d91a      	bls.n	800ecfa <__ieee754_pow+0x9ea>
 800ecc4:	4b2f      	ldr	r3, [pc, #188]	@ (800ed84 <__ieee754_pow+0xa74>)
 800ecc6:	440b      	add	r3, r1
 800ecc8:	4303      	orrs	r3, r0
 800ecca:	d009      	beq.n	800ece0 <__ieee754_pow+0x9d0>
 800eccc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	f7f1 ff02 	bl	8000adc <__aeabi_dcmplt>
 800ecd8:	3800      	subs	r0, #0
 800ecda:	bf18      	it	ne
 800ecdc:	2001      	movne	r0, #1
 800ecde:	e42b      	b.n	800e538 <__ieee754_pow+0x228>
 800ece0:	4642      	mov	r2, r8
 800ece2:	464b      	mov	r3, r9
 800ece4:	f7f1 fad0 	bl	8000288 <__aeabi_dsub>
 800ece8:	4632      	mov	r2, r6
 800ecea:	463b      	mov	r3, r7
 800ecec:	f7f1 ff0a 	bl	8000b04 <__aeabi_dcmpge>
 800ecf0:	2800      	cmp	r0, #0
 800ecf2:	d1eb      	bne.n	800eccc <__ieee754_pow+0x9bc>
 800ecf4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800ed94 <__ieee754_pow+0xa84>
 800ecf8:	e6f7      	b.n	800eaea <__ieee754_pow+0x7da>
 800ecfa:	469a      	mov	sl, r3
 800ecfc:	4b22      	ldr	r3, [pc, #136]	@ (800ed88 <__ieee754_pow+0xa78>)
 800ecfe:	459a      	cmp	sl, r3
 800ed00:	f63f aef3 	bhi.w	800eaea <__ieee754_pow+0x7da>
 800ed04:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ed08:	e715      	b.n	800eb36 <__ieee754_pow+0x826>
 800ed0a:	ec51 0b10 	vmov	r0, r1, d0
 800ed0e:	4619      	mov	r1, r3
 800ed10:	e7cf      	b.n	800ecb2 <__ieee754_pow+0x9a2>
 800ed12:	491a      	ldr	r1, [pc, #104]	@ (800ed7c <__ieee754_pow+0xa6c>)
 800ed14:	2000      	movs	r0, #0
 800ed16:	f7ff bb18 	b.w	800e34a <__ieee754_pow+0x3a>
 800ed1a:	2000      	movs	r0, #0
 800ed1c:	2100      	movs	r1, #0
 800ed1e:	f7ff bb14 	b.w	800e34a <__ieee754_pow+0x3a>
 800ed22:	4630      	mov	r0, r6
 800ed24:	4639      	mov	r1, r7
 800ed26:	f7ff bb10 	b.w	800e34a <__ieee754_pow+0x3a>
 800ed2a:	460c      	mov	r4, r1
 800ed2c:	f7ff bb5e 	b.w	800e3ec <__ieee754_pow+0xdc>
 800ed30:	2400      	movs	r4, #0
 800ed32:	f7ff bb49 	b.w	800e3c8 <__ieee754_pow+0xb8>
 800ed36:	bf00      	nop
 800ed38:	00000000 	.word	0x00000000
 800ed3c:	3fe62e43 	.word	0x3fe62e43
 800ed40:	fefa39ef 	.word	0xfefa39ef
 800ed44:	3fe62e42 	.word	0x3fe62e42
 800ed48:	0ca86c39 	.word	0x0ca86c39
 800ed4c:	be205c61 	.word	0xbe205c61
 800ed50:	72bea4d0 	.word	0x72bea4d0
 800ed54:	3e663769 	.word	0x3e663769
 800ed58:	c5d26bf1 	.word	0xc5d26bf1
 800ed5c:	3ebbbd41 	.word	0x3ebbbd41
 800ed60:	af25de2c 	.word	0xaf25de2c
 800ed64:	3f11566a 	.word	0x3f11566a
 800ed68:	16bebd93 	.word	0x16bebd93
 800ed6c:	3f66c16c 	.word	0x3f66c16c
 800ed70:	5555553e 	.word	0x5555553e
 800ed74:	3fc55555 	.word	0x3fc55555
 800ed78:	fff00000 	.word	0xfff00000
 800ed7c:	3ff00000 	.word	0x3ff00000
 800ed80:	4090cbff 	.word	0x4090cbff
 800ed84:	3f6f3400 	.word	0x3f6f3400
 800ed88:	3fe00000 	.word	0x3fe00000
 800ed8c:	652b82fe 	.word	0x652b82fe
 800ed90:	3c971547 	.word	0x3c971547
 800ed94:	4090cc00 	.word	0x4090cc00

0800ed98 <fabs>:
 800ed98:	ec51 0b10 	vmov	r0, r1, d0
 800ed9c:	4602      	mov	r2, r0
 800ed9e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800eda2:	ec43 2b10 	vmov	d0, r2, r3
 800eda6:	4770      	bx	lr

0800eda8 <scalbn>:
 800eda8:	b570      	push	{r4, r5, r6, lr}
 800edaa:	ec55 4b10 	vmov	r4, r5, d0
 800edae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800edb2:	4606      	mov	r6, r0
 800edb4:	462b      	mov	r3, r5
 800edb6:	b991      	cbnz	r1, 800edde <scalbn+0x36>
 800edb8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800edbc:	4323      	orrs	r3, r4
 800edbe:	d03d      	beq.n	800ee3c <scalbn+0x94>
 800edc0:	4b35      	ldr	r3, [pc, #212]	@ (800ee98 <scalbn+0xf0>)
 800edc2:	4620      	mov	r0, r4
 800edc4:	4629      	mov	r1, r5
 800edc6:	2200      	movs	r2, #0
 800edc8:	f7f1 fc16 	bl	80005f8 <__aeabi_dmul>
 800edcc:	4b33      	ldr	r3, [pc, #204]	@ (800ee9c <scalbn+0xf4>)
 800edce:	429e      	cmp	r6, r3
 800edd0:	4604      	mov	r4, r0
 800edd2:	460d      	mov	r5, r1
 800edd4:	da0f      	bge.n	800edf6 <scalbn+0x4e>
 800edd6:	a328      	add	r3, pc, #160	@ (adr r3, 800ee78 <scalbn+0xd0>)
 800edd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eddc:	e01e      	b.n	800ee1c <scalbn+0x74>
 800edde:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ede2:	4291      	cmp	r1, r2
 800ede4:	d10b      	bne.n	800edfe <scalbn+0x56>
 800ede6:	4622      	mov	r2, r4
 800ede8:	4620      	mov	r0, r4
 800edea:	4629      	mov	r1, r5
 800edec:	f7f1 fa4e 	bl	800028c <__adddf3>
 800edf0:	4604      	mov	r4, r0
 800edf2:	460d      	mov	r5, r1
 800edf4:	e022      	b.n	800ee3c <scalbn+0x94>
 800edf6:	460b      	mov	r3, r1
 800edf8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800edfc:	3936      	subs	r1, #54	@ 0x36
 800edfe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ee02:	4296      	cmp	r6, r2
 800ee04:	dd0d      	ble.n	800ee22 <scalbn+0x7a>
 800ee06:	2d00      	cmp	r5, #0
 800ee08:	a11d      	add	r1, pc, #116	@ (adr r1, 800ee80 <scalbn+0xd8>)
 800ee0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee0e:	da02      	bge.n	800ee16 <scalbn+0x6e>
 800ee10:	a11d      	add	r1, pc, #116	@ (adr r1, 800ee88 <scalbn+0xe0>)
 800ee12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee16:	a31a      	add	r3, pc, #104	@ (adr r3, 800ee80 <scalbn+0xd8>)
 800ee18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee1c:	f7f1 fbec 	bl	80005f8 <__aeabi_dmul>
 800ee20:	e7e6      	b.n	800edf0 <scalbn+0x48>
 800ee22:	1872      	adds	r2, r6, r1
 800ee24:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ee28:	428a      	cmp	r2, r1
 800ee2a:	dcec      	bgt.n	800ee06 <scalbn+0x5e>
 800ee2c:	2a00      	cmp	r2, #0
 800ee2e:	dd08      	ble.n	800ee42 <scalbn+0x9a>
 800ee30:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ee34:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ee38:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ee3c:	ec45 4b10 	vmov	d0, r4, r5
 800ee40:	bd70      	pop	{r4, r5, r6, pc}
 800ee42:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ee46:	da08      	bge.n	800ee5a <scalbn+0xb2>
 800ee48:	2d00      	cmp	r5, #0
 800ee4a:	a10b      	add	r1, pc, #44	@ (adr r1, 800ee78 <scalbn+0xd0>)
 800ee4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee50:	dac1      	bge.n	800edd6 <scalbn+0x2e>
 800ee52:	a10f      	add	r1, pc, #60	@ (adr r1, 800ee90 <scalbn+0xe8>)
 800ee54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee58:	e7bd      	b.n	800edd6 <scalbn+0x2e>
 800ee5a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ee5e:	3236      	adds	r2, #54	@ 0x36
 800ee60:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ee64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ee68:	4620      	mov	r0, r4
 800ee6a:	4b0d      	ldr	r3, [pc, #52]	@ (800eea0 <scalbn+0xf8>)
 800ee6c:	4629      	mov	r1, r5
 800ee6e:	2200      	movs	r2, #0
 800ee70:	e7d4      	b.n	800ee1c <scalbn+0x74>
 800ee72:	bf00      	nop
 800ee74:	f3af 8000 	nop.w
 800ee78:	c2f8f359 	.word	0xc2f8f359
 800ee7c:	01a56e1f 	.word	0x01a56e1f
 800ee80:	8800759c 	.word	0x8800759c
 800ee84:	7e37e43c 	.word	0x7e37e43c
 800ee88:	8800759c 	.word	0x8800759c
 800ee8c:	fe37e43c 	.word	0xfe37e43c
 800ee90:	c2f8f359 	.word	0xc2f8f359
 800ee94:	81a56e1f 	.word	0x81a56e1f
 800ee98:	43500000 	.word	0x43500000
 800ee9c:	ffff3cb0 	.word	0xffff3cb0
 800eea0:	3c900000 	.word	0x3c900000

0800eea4 <with_errno>:
 800eea4:	b510      	push	{r4, lr}
 800eea6:	ed2d 8b02 	vpush	{d8}
 800eeaa:	eeb0 8a40 	vmov.f32	s16, s0
 800eeae:	eef0 8a60 	vmov.f32	s17, s1
 800eeb2:	4604      	mov	r4, r0
 800eeb4:	f7fd f9fc 	bl	800c2b0 <__errno>
 800eeb8:	eeb0 0a48 	vmov.f32	s0, s16
 800eebc:	eef0 0a68 	vmov.f32	s1, s17
 800eec0:	ecbd 8b02 	vpop	{d8}
 800eec4:	6004      	str	r4, [r0, #0]
 800eec6:	bd10      	pop	{r4, pc}

0800eec8 <xflow>:
 800eec8:	4603      	mov	r3, r0
 800eeca:	b507      	push	{r0, r1, r2, lr}
 800eecc:	ec51 0b10 	vmov	r0, r1, d0
 800eed0:	b183      	cbz	r3, 800eef4 <xflow+0x2c>
 800eed2:	4602      	mov	r2, r0
 800eed4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eed8:	e9cd 2300 	strd	r2, r3, [sp]
 800eedc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eee0:	f7f1 fb8a 	bl	80005f8 <__aeabi_dmul>
 800eee4:	ec41 0b10 	vmov	d0, r0, r1
 800eee8:	2022      	movs	r0, #34	@ 0x22
 800eeea:	b003      	add	sp, #12
 800eeec:	f85d eb04 	ldr.w	lr, [sp], #4
 800eef0:	f7ff bfd8 	b.w	800eea4 <with_errno>
 800eef4:	4602      	mov	r2, r0
 800eef6:	460b      	mov	r3, r1
 800eef8:	e7ee      	b.n	800eed8 <xflow+0x10>
 800eefa:	0000      	movs	r0, r0
 800eefc:	0000      	movs	r0, r0
	...

0800ef00 <__math_uflow>:
 800ef00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ef08 <__math_uflow+0x8>
 800ef04:	f7ff bfe0 	b.w	800eec8 <xflow>
 800ef08:	00000000 	.word	0x00000000
 800ef0c:	10000000 	.word	0x10000000

0800ef10 <__math_oflow>:
 800ef10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ef18 <__math_oflow+0x8>
 800ef14:	f7ff bfd8 	b.w	800eec8 <xflow>
 800ef18:	00000000 	.word	0x00000000
 800ef1c:	70000000 	.word	0x70000000

0800ef20 <__ieee754_sqrt>:
 800ef20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef24:	4a68      	ldr	r2, [pc, #416]	@ (800f0c8 <__ieee754_sqrt+0x1a8>)
 800ef26:	ec55 4b10 	vmov	r4, r5, d0
 800ef2a:	43aa      	bics	r2, r5
 800ef2c:	462b      	mov	r3, r5
 800ef2e:	4621      	mov	r1, r4
 800ef30:	d110      	bne.n	800ef54 <__ieee754_sqrt+0x34>
 800ef32:	4622      	mov	r2, r4
 800ef34:	4620      	mov	r0, r4
 800ef36:	4629      	mov	r1, r5
 800ef38:	f7f1 fb5e 	bl	80005f8 <__aeabi_dmul>
 800ef3c:	4602      	mov	r2, r0
 800ef3e:	460b      	mov	r3, r1
 800ef40:	4620      	mov	r0, r4
 800ef42:	4629      	mov	r1, r5
 800ef44:	f7f1 f9a2 	bl	800028c <__adddf3>
 800ef48:	4604      	mov	r4, r0
 800ef4a:	460d      	mov	r5, r1
 800ef4c:	ec45 4b10 	vmov	d0, r4, r5
 800ef50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef54:	2d00      	cmp	r5, #0
 800ef56:	dc0e      	bgt.n	800ef76 <__ieee754_sqrt+0x56>
 800ef58:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ef5c:	4322      	orrs	r2, r4
 800ef5e:	d0f5      	beq.n	800ef4c <__ieee754_sqrt+0x2c>
 800ef60:	b19d      	cbz	r5, 800ef8a <__ieee754_sqrt+0x6a>
 800ef62:	4622      	mov	r2, r4
 800ef64:	4620      	mov	r0, r4
 800ef66:	4629      	mov	r1, r5
 800ef68:	f7f1 f98e 	bl	8000288 <__aeabi_dsub>
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	460b      	mov	r3, r1
 800ef70:	f7f1 fc6c 	bl	800084c <__aeabi_ddiv>
 800ef74:	e7e8      	b.n	800ef48 <__ieee754_sqrt+0x28>
 800ef76:	152a      	asrs	r2, r5, #20
 800ef78:	d115      	bne.n	800efa6 <__ieee754_sqrt+0x86>
 800ef7a:	2000      	movs	r0, #0
 800ef7c:	e009      	b.n	800ef92 <__ieee754_sqrt+0x72>
 800ef7e:	0acb      	lsrs	r3, r1, #11
 800ef80:	3a15      	subs	r2, #21
 800ef82:	0549      	lsls	r1, r1, #21
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d0fa      	beq.n	800ef7e <__ieee754_sqrt+0x5e>
 800ef88:	e7f7      	b.n	800ef7a <__ieee754_sqrt+0x5a>
 800ef8a:	462a      	mov	r2, r5
 800ef8c:	e7fa      	b.n	800ef84 <__ieee754_sqrt+0x64>
 800ef8e:	005b      	lsls	r3, r3, #1
 800ef90:	3001      	adds	r0, #1
 800ef92:	02dc      	lsls	r4, r3, #11
 800ef94:	d5fb      	bpl.n	800ef8e <__ieee754_sqrt+0x6e>
 800ef96:	1e44      	subs	r4, r0, #1
 800ef98:	1b12      	subs	r2, r2, r4
 800ef9a:	f1c0 0420 	rsb	r4, r0, #32
 800ef9e:	fa21 f404 	lsr.w	r4, r1, r4
 800efa2:	4323      	orrs	r3, r4
 800efa4:	4081      	lsls	r1, r0
 800efa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800efaa:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800efae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800efb2:	07d2      	lsls	r2, r2, #31
 800efb4:	bf5c      	itt	pl
 800efb6:	005b      	lslpl	r3, r3, #1
 800efb8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800efbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800efc0:	bf58      	it	pl
 800efc2:	0049      	lslpl	r1, r1, #1
 800efc4:	2600      	movs	r6, #0
 800efc6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800efca:	106d      	asrs	r5, r5, #1
 800efcc:	0049      	lsls	r1, r1, #1
 800efce:	2016      	movs	r0, #22
 800efd0:	4632      	mov	r2, r6
 800efd2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800efd6:	1917      	adds	r7, r2, r4
 800efd8:	429f      	cmp	r7, r3
 800efda:	bfde      	ittt	le
 800efdc:	193a      	addle	r2, r7, r4
 800efde:	1bdb      	suble	r3, r3, r7
 800efe0:	1936      	addle	r6, r6, r4
 800efe2:	0fcf      	lsrs	r7, r1, #31
 800efe4:	3801      	subs	r0, #1
 800efe6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800efea:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800efee:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800eff2:	d1f0      	bne.n	800efd6 <__ieee754_sqrt+0xb6>
 800eff4:	4604      	mov	r4, r0
 800eff6:	2720      	movs	r7, #32
 800eff8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800effc:	429a      	cmp	r2, r3
 800effe:	eb00 0e0c 	add.w	lr, r0, ip
 800f002:	db02      	blt.n	800f00a <__ieee754_sqrt+0xea>
 800f004:	d113      	bne.n	800f02e <__ieee754_sqrt+0x10e>
 800f006:	458e      	cmp	lr, r1
 800f008:	d811      	bhi.n	800f02e <__ieee754_sqrt+0x10e>
 800f00a:	f1be 0f00 	cmp.w	lr, #0
 800f00e:	eb0e 000c 	add.w	r0, lr, ip
 800f012:	da42      	bge.n	800f09a <__ieee754_sqrt+0x17a>
 800f014:	2800      	cmp	r0, #0
 800f016:	db40      	blt.n	800f09a <__ieee754_sqrt+0x17a>
 800f018:	f102 0801 	add.w	r8, r2, #1
 800f01c:	1a9b      	subs	r3, r3, r2
 800f01e:	458e      	cmp	lr, r1
 800f020:	bf88      	it	hi
 800f022:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f026:	eba1 010e 	sub.w	r1, r1, lr
 800f02a:	4464      	add	r4, ip
 800f02c:	4642      	mov	r2, r8
 800f02e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f032:	3f01      	subs	r7, #1
 800f034:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f038:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f03c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f040:	d1dc      	bne.n	800effc <__ieee754_sqrt+0xdc>
 800f042:	4319      	orrs	r1, r3
 800f044:	d01b      	beq.n	800f07e <__ieee754_sqrt+0x15e>
 800f046:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800f0cc <__ieee754_sqrt+0x1ac>
 800f04a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800f0d0 <__ieee754_sqrt+0x1b0>
 800f04e:	e9da 0100 	ldrd	r0, r1, [sl]
 800f052:	e9db 2300 	ldrd	r2, r3, [fp]
 800f056:	f7f1 f917 	bl	8000288 <__aeabi_dsub>
 800f05a:	e9da 8900 	ldrd	r8, r9, [sl]
 800f05e:	4602      	mov	r2, r0
 800f060:	460b      	mov	r3, r1
 800f062:	4640      	mov	r0, r8
 800f064:	4649      	mov	r1, r9
 800f066:	f7f1 fd43 	bl	8000af0 <__aeabi_dcmple>
 800f06a:	b140      	cbz	r0, 800f07e <__ieee754_sqrt+0x15e>
 800f06c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f070:	e9da 0100 	ldrd	r0, r1, [sl]
 800f074:	e9db 2300 	ldrd	r2, r3, [fp]
 800f078:	d111      	bne.n	800f09e <__ieee754_sqrt+0x17e>
 800f07a:	3601      	adds	r6, #1
 800f07c:	463c      	mov	r4, r7
 800f07e:	1072      	asrs	r2, r6, #1
 800f080:	0863      	lsrs	r3, r4, #1
 800f082:	07f1      	lsls	r1, r6, #31
 800f084:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f088:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f08c:	bf48      	it	mi
 800f08e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f092:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800f096:	4618      	mov	r0, r3
 800f098:	e756      	b.n	800ef48 <__ieee754_sqrt+0x28>
 800f09a:	4690      	mov	r8, r2
 800f09c:	e7be      	b.n	800f01c <__ieee754_sqrt+0xfc>
 800f09e:	f7f1 f8f5 	bl	800028c <__adddf3>
 800f0a2:	e9da 8900 	ldrd	r8, r9, [sl]
 800f0a6:	4602      	mov	r2, r0
 800f0a8:	460b      	mov	r3, r1
 800f0aa:	4640      	mov	r0, r8
 800f0ac:	4649      	mov	r1, r9
 800f0ae:	f7f1 fd15 	bl	8000adc <__aeabi_dcmplt>
 800f0b2:	b120      	cbz	r0, 800f0be <__ieee754_sqrt+0x19e>
 800f0b4:	1ca0      	adds	r0, r4, #2
 800f0b6:	bf08      	it	eq
 800f0b8:	3601      	addeq	r6, #1
 800f0ba:	3402      	adds	r4, #2
 800f0bc:	e7df      	b.n	800f07e <__ieee754_sqrt+0x15e>
 800f0be:	1c63      	adds	r3, r4, #1
 800f0c0:	f023 0401 	bic.w	r4, r3, #1
 800f0c4:	e7db      	b.n	800f07e <__ieee754_sqrt+0x15e>
 800f0c6:	bf00      	nop
 800f0c8:	7ff00000 	.word	0x7ff00000
 800f0cc:	20000208 	.word	0x20000208
 800f0d0:	20000200 	.word	0x20000200

0800f0d4 <_init>:
 800f0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0d6:	bf00      	nop
 800f0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0da:	bc08      	pop	{r3}
 800f0dc:	469e      	mov	lr, r3
 800f0de:	4770      	bx	lr

0800f0e0 <_fini>:
 800f0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0e2:	bf00      	nop
 800f0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0e6:	bc08      	pop	{r3}
 800f0e8:	469e      	mov	lr, r3
 800f0ea:	4770      	bx	lr
